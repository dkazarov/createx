!function(){"use strict";const e=document.querySelector(".burger"),t=document.querySelector(".burger__line"),s=document.querySelector("nav"),i=document.querySelector("body"),r=document.querySelectorAll("header nav li");function n(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function a(e,t){void 0===e&&(e={}),void 0===t&&(t={}),Object.keys(t).forEach((s=>{void 0===e[s]?e[s]=t[s]:n(t[s])&&n(e[s])&&Object.keys(t[s]).length>0&&a(e[s],t[s])}))}const l={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector(){return null},querySelectorAll(){return[]},getElementById(){return null},createEvent(){return{initEvent(){}}},createElement(){return{children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName(){return[]}}},createElementNS(){return{}},importNode(){return null},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function o(){const e="undefined"!=typeof document?document:{};return a(e,l),e}const d={document:l,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle(){return{getPropertyValue(){return""}}},Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia(){return{}},requestAnimationFrame(e){return"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0)},cancelAnimationFrame(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function c(){const e="undefined"!=typeof window?window:{};return a(e,d),e}function p(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function u(){return Date.now()}function m(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function h(){const e=Object(arguments.length<=0?void 0:arguments[0]),t=["__proto__","constructor","prototype"];for(let i=1;i<arguments.length;i+=1){const r=i<0||arguments.length<=i?void 0:arguments[i];if(null!=r&&(s=r,!("undefined"!=typeof window&&void 0!==window.HTMLElement?s instanceof HTMLElement:s&&(1===s.nodeType||11===s.nodeType)))){const s=Object.keys(Object(r)).filter((e=>t.indexOf(e)<0));for(let t=0,i=s.length;t<i;t+=1){const i=s[t],n=Object.getOwnPropertyDescriptor(r,i);void 0!==n&&n.enumerable&&(m(e[i])&&m(r[i])?r[i].__swiper__?e[i]=r[i]:h(e[i],r[i]):!m(e[i])&&m(r[i])?(e[i]={},r[i].__swiper__?e[i]=r[i]:h(e[i],r[i])):e[i]=r[i])}}}var s;return e}function f(e,t,s){e.style.setProperty(t,s)}function g(e){let{swiper:t,targetPosition:s,side:i}=e;const r=c(),n=-t.translate;let a,l=null;const o=t.params.speed;t.wrapperEl.style.scrollSnapType="none",r.cancelAnimationFrame(t.cssModeFrameID);const d=s>n?"next":"prev",p=(e,t)=>"next"===d&&e>=t||"prev"===d&&e<=t,u=()=>{a=(new Date).getTime(),null===l&&(l=a);const e=Math.max(Math.min((a-l)/o,1),0),d=.5-Math.cos(e*Math.PI)/2;let c=n+d*(s-n);if(p(c,s)&&(c=s),t.wrapperEl.scrollTo({[i]:c}),p(c,s))return t.wrapperEl.style.overflow="hidden",t.wrapperEl.style.scrollSnapType="",setTimeout((()=>{t.wrapperEl.style.overflow="",t.wrapperEl.scrollTo({[i]:c})})),void r.cancelAnimationFrame(t.cssModeFrameID);t.cssModeFrameID=r.requestAnimationFrame(u)};u()}function v(e,t){void 0===t&&(t="");const s=[...e.children];return e instanceof HTMLSlotElement&&s.push(...e.assignedElements()),t?s.filter((e=>e.matches(t))):s}function w(e){try{return void console.warn(e)}catch(e){}}function b(e,t){void 0===t&&(t=[]);const s=document.createElement(e);return s.classList.add(...Array.isArray(t)?t:function(e){return void 0===e&&(e=""),e.trim().split(" ").filter((e=>!!e.trim()))}(t)),s}function S(e,t){return c().getComputedStyle(e,null).getPropertyValue(t)}function T(e){let t,s=e;if(s){for(t=0;null!==(s=s.previousSibling);)1===s.nodeType&&(t+=1);return t}}function y(e,t){const s=[];let i=e.parentElement;for(;i;)t?i.matches(t)&&s.push(i):s.push(i),i=i.parentElement;return s}function E(e,t,s){const i=c();return s?e["width"===t?"offsetWidth":"offsetHeight"]+parseFloat(i.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-right":"margin-top"))+parseFloat(i.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-left":"margin-bottom")):e.offsetWidth}function x(e){return(Array.isArray(e)?e:[e]).filter((e=>!!e))}let C,M,P;function L(){return C||(C=function(){const e=c(),t=o();return{smoothScroll:t.documentElement&&t.documentElement.style&&"scrollBehavior"in t.documentElement.style,touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch)}}()),C}function k(e){return void 0===e&&(e={}),M||(M=function(e){let{userAgent:t}=void 0===e?{}:e;const s=L(),i=c(),r=i.navigator.platform,n=t||i.navigator.userAgent,a={ios:!1,android:!1},l=i.screen.width,o=i.screen.height,d=n.match(/(Android);?[\s\/]+([\d.]+)?/);let p=n.match(/(iPad).*OS\s([\d_]+)/);const u=n.match(/(iPod)(.*OS\s([\d_]+))?/),m=!p&&n.match(/(iPhone\sOS|iOS)\s([\d_]+)/),h="Win32"===r;let f="MacIntel"===r;return!p&&f&&s.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${l}x${o}`)>=0&&(p=n.match(/(Version)\/([\d.]+)/),p||(p=[0,1,"13_0_0"]),f=!1),d&&!h&&(a.os="android",a.android=!0),(p||m||u)&&(a.os="ios",a.ios=!0),a}(e)),M}var I={on(e,t,s){const i=this;if(!i.eventsListeners||i.destroyed)return i;if("function"!=typeof t)return i;const r=s?"unshift":"push";return e.split(" ").forEach((e=>{i.eventsListeners[e]||(i.eventsListeners[e]=[]),i.eventsListeners[e][r](t)})),i},once(e,t,s){const i=this;if(!i.eventsListeners||i.destroyed)return i;if("function"!=typeof t)return i;function r(){i.off(e,r),r.__emitterProxy&&delete r.__emitterProxy;for(var s=arguments.length,n=new Array(s),a=0;a<s;a++)n[a]=arguments[a];t.apply(i,n)}return r.__emitterProxy=t,i.on(e,r,s)},onAny(e,t){const s=this;if(!s.eventsListeners||s.destroyed)return s;if("function"!=typeof e)return s;const i=t?"unshift":"push";return s.eventsAnyListeners.indexOf(e)<0&&s.eventsAnyListeners[i](e),s},offAny(e){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsAnyListeners)return t;const s=t.eventsAnyListeners.indexOf(e);return s>=0&&t.eventsAnyListeners.splice(s,1),t},off(e,t){const s=this;return!s.eventsListeners||s.destroyed?s:s.eventsListeners?(e.split(" ").forEach((e=>{void 0===t?s.eventsListeners[e]=[]:s.eventsListeners[e]&&s.eventsListeners[e].forEach(((i,r)=>{(i===t||i.__emitterProxy&&i.__emitterProxy===t)&&s.eventsListeners[e].splice(r,1)}))})),s):s},emit(){const e=this;if(!e.eventsListeners||e.destroyed)return e;if(!e.eventsListeners)return e;let t,s,i;for(var r=arguments.length,n=new Array(r),a=0;a<r;a++)n[a]=arguments[a];return"string"==typeof n[0]||Array.isArray(n[0])?(t=n[0],s=n.slice(1,n.length),i=e):(t=n[0].events,s=n[0].data,i=n[0].context||e),s.unshift(i),(Array.isArray(t)?t:t.split(" ")).forEach((t=>{e.eventsAnyListeners&&e.eventsAnyListeners.length&&e.eventsAnyListeners.forEach((e=>{e.apply(i,[t,...s])})),e.eventsListeners&&e.eventsListeners[t]&&e.eventsListeners[t].forEach((e=>{e.apply(i,s)}))})),e}};const A=(e,t,s)=>{t&&!e.classList.contains(s)?e.classList.add(s):!t&&e.classList.contains(s)&&e.classList.remove(s)},O=(e,t,s)=>{t&&!e.classList.contains(s)?e.classList.add(s):!t&&e.classList.contains(s)&&e.classList.remove(s)},z=(e,t)=>{if(!e||e.destroyed||!e.params)return;const s=t.closest(e.isElement?"swiper-slide":`.${e.params.slideClass}`);if(s){let t=s.querySelector(`.${e.params.lazyPreloaderClass}`);!t&&e.isElement&&(s.shadowRoot?t=s.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`):requestAnimationFrame((()=>{s.shadowRoot&&(t=s.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`),t&&t.remove())}))),t&&t.remove()}},G=(e,t)=>{if(!e.slides[t])return;const s=e.slides[t].querySelector('[loading="lazy"]');s&&s.removeAttribute("loading")},D=e=>{if(!e||e.destroyed||!e.params)return;let t=e.params.lazyPreloadPrevNext;const s=e.slides.length;if(!s||!t||t<0)return;t=Math.min(t,s);const i="auto"===e.params.slidesPerView?e.slidesPerViewDynamic():Math.ceil(e.params.slidesPerView),r=e.activeIndex;if(e.params.grid&&e.params.grid.rows>1){const s=r,n=[s-t];return n.push(...Array.from({length:t}).map(((e,t)=>s+i+t))),void e.slides.forEach(((t,s)=>{n.includes(t.column)&&G(e,s)}))}const n=r+i-1;if(e.params.rewind||e.params.loop)for(let i=r-t;i<=n+t;i+=1){const t=(i%s+s)%s;(t<r||t>n)&&G(e,t)}else for(let i=Math.max(r-t,0);i<=Math.min(n+t,s-1);i+=1)i!==r&&(i>n||i<r)&&G(e,i)};var B={updateSize:function(){const e=this;let t,s;const i=e.el;t=void 0!==e.params.width&&null!==e.params.width?e.params.width:i.clientWidth,s=void 0!==e.params.height&&null!==e.params.height?e.params.height:i.clientHeight,0===t&&e.isHorizontal()||0===s&&e.isVertical()||(t=t-parseInt(S(i,"padding-left")||0,10)-parseInt(S(i,"padding-right")||0,10),s=s-parseInt(S(i,"padding-top")||0,10)-parseInt(S(i,"padding-bottom")||0,10),Number.isNaN(t)&&(t=0),Number.isNaN(s)&&(s=0),Object.assign(e,{width:t,height:s,size:e.isHorizontal()?t:s}))},updateSlides:function(){const e=this;function t(t,s){return parseFloat(t.getPropertyValue(e.getDirectionLabel(s))||0)}const s=e.params,{wrapperEl:i,slidesEl:r,size:n,rtlTranslate:a,wrongRTL:l}=e,o=e.virtual&&s.virtual.enabled,d=o?e.virtual.slides.length:e.slides.length,c=v(r,`.${e.params.slideClass}, swiper-slide`),p=o?e.virtual.slides.length:c.length;let u=[];const m=[],h=[];let g=s.slidesOffsetBefore;"function"==typeof g&&(g=s.slidesOffsetBefore.call(e));let w=s.slidesOffsetAfter;"function"==typeof w&&(w=s.slidesOffsetAfter.call(e));const b=e.snapGrid.length,T=e.slidesGrid.length;let y=s.spaceBetween,x=-g,C=0,M=0;if(void 0===n)return;"string"==typeof y&&y.indexOf("%")>=0?y=parseFloat(y.replace("%",""))/100*n:"string"==typeof y&&(y=parseFloat(y)),e.virtualSize=-y,c.forEach((e=>{a?e.style.marginLeft="":e.style.marginRight="",e.style.marginBottom="",e.style.marginTop=""})),s.centeredSlides&&s.cssMode&&(f(i,"--swiper-centered-offset-before",""),f(i,"--swiper-centered-offset-after",""));const P=s.grid&&s.grid.rows>1&&e.grid;let L;P?e.grid.initSlides(c):e.grid&&e.grid.unsetSlides();const k="auto"===s.slidesPerView&&s.breakpoints&&Object.keys(s.breakpoints).filter((e=>void 0!==s.breakpoints[e].slidesPerView)).length>0;for(let i=0;i<p;i+=1){let r;if(L=0,c[i]&&(r=c[i]),P&&e.grid.updateSlide(i,r,c),!c[i]||"none"!==S(r,"display")){if("auto"===s.slidesPerView){k&&(c[i].style[e.getDirectionLabel("width")]="");const n=getComputedStyle(r),a=r.style.transform,l=r.style.webkitTransform;if(a&&(r.style.transform="none"),l&&(r.style.webkitTransform="none"),s.roundLengths)L=e.isHorizontal()?E(r,"width",!0):E(r,"height",!0);else{const e=t(n,"width"),s=t(n,"padding-left"),i=t(n,"padding-right"),a=t(n,"margin-left"),l=t(n,"margin-right"),o=n.getPropertyValue("box-sizing");if(o&&"border-box"===o)L=e+a+l;else{const{clientWidth:t,offsetWidth:n}=r;L=e+s+i+a+l+(n-t)}}a&&(r.style.transform=a),l&&(r.style.webkitTransform=l),s.roundLengths&&(L=Math.floor(L))}else L=(n-(s.slidesPerView-1)*y)/s.slidesPerView,s.roundLengths&&(L=Math.floor(L)),c[i]&&(c[i].style[e.getDirectionLabel("width")]=`${L}px`);c[i]&&(c[i].swiperSlideSize=L),h.push(L),s.centeredSlides?(x=x+L/2+C/2+y,0===C&&0!==i&&(x=x-n/2-y),0===i&&(x=x-n/2-y),Math.abs(x)<.001&&(x=0),s.roundLengths&&(x=Math.floor(x)),M%s.slidesPerGroup==0&&u.push(x),m.push(x)):(s.roundLengths&&(x=Math.floor(x)),(M-Math.min(e.params.slidesPerGroupSkip,M))%e.params.slidesPerGroup==0&&u.push(x),m.push(x),x=x+L+y),e.virtualSize+=L+y,C=L,M+=1}}if(e.virtualSize=Math.max(e.virtualSize,n)+w,a&&l&&("slide"===s.effect||"coverflow"===s.effect)&&(i.style.width=`${e.virtualSize+y}px`),s.setWrapperSize&&(i.style[e.getDirectionLabel("width")]=`${e.virtualSize+y}px`),P&&e.grid.updateWrapperSize(L,u),!s.centeredSlides){const t=[];for(let i=0;i<u.length;i+=1){let r=u[i];s.roundLengths&&(r=Math.floor(r)),u[i]<=e.virtualSize-n&&t.push(r)}u=t,Math.floor(e.virtualSize-n)-Math.floor(u[u.length-1])>1&&u.push(e.virtualSize-n)}if(o&&s.loop){const t=h[0]+y;if(s.slidesPerGroup>1){const i=Math.ceil((e.virtual.slidesBefore+e.virtual.slidesAfter)/s.slidesPerGroup),r=t*s.slidesPerGroup;for(let e=0;e<i;e+=1)u.push(u[u.length-1]+r)}for(let i=0;i<e.virtual.slidesBefore+e.virtual.slidesAfter;i+=1)1===s.slidesPerGroup&&u.push(u[u.length-1]+t),m.push(m[m.length-1]+t),e.virtualSize+=t}if(0===u.length&&(u=[0]),0!==y){const t=e.isHorizontal()&&a?"marginLeft":e.getDirectionLabel("marginRight");c.filter(((e,t)=>!(s.cssMode&&!s.loop)||t!==c.length-1)).forEach((e=>{e.style[t]=`${y}px`}))}if(s.centeredSlides&&s.centeredSlidesBounds){let e=0;h.forEach((t=>{e+=t+(y||0)})),e-=y;const t=e>n?e-n:0;u=u.map((e=>e<=0?-g:e>t?t+w:e))}if(s.centerInsufficientSlides){let e=0;h.forEach((t=>{e+=t+(y||0)})),e-=y;const t=(s.slidesOffsetBefore||0)+(s.slidesOffsetAfter||0);if(e+t<n){const s=(n-e-t)/2;u.forEach(((e,t)=>{u[t]=e-s})),m.forEach(((e,t)=>{m[t]=e+s}))}}if(Object.assign(e,{slides:c,snapGrid:u,slidesGrid:m,slidesSizesGrid:h}),s.centeredSlides&&s.cssMode&&!s.centeredSlidesBounds){f(i,"--swiper-centered-offset-before",-u[0]+"px"),f(i,"--swiper-centered-offset-after",e.size/2-h[h.length-1]/2+"px");const t=-e.snapGrid[0],s=-e.slidesGrid[0];e.snapGrid=e.snapGrid.map((e=>e+t)),e.slidesGrid=e.slidesGrid.map((e=>e+s))}if(p!==d&&e.emit("slidesLengthChange"),u.length!==b&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),m.length!==T&&e.emit("slidesGridLengthChange"),s.watchSlidesProgress&&e.updateSlidesOffset(),e.emit("slidesUpdated"),!(o||s.cssMode||"slide"!==s.effect&&"fade"!==s.effect)){const t=`${s.containerModifierClass}backface-hidden`,i=e.el.classList.contains(t);p<=s.maxBackfaceHiddenSlides?i||e.el.classList.add(t):i&&e.el.classList.remove(t)}},updateAutoHeight:function(e){const t=this,s=[],i=t.virtual&&t.params.virtual.enabled;let r,n=0;"number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed);const a=e=>i?t.slides[t.getSlideIndexByData(e)]:t.slides[e];if("auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)if(t.params.centeredSlides)(t.visibleSlides||[]).forEach((e=>{s.push(e)}));else for(r=0;r<Math.ceil(t.params.slidesPerView);r+=1){const e=t.activeIndex+r;if(e>t.slides.length&&!i)break;s.push(a(e))}else s.push(a(t.activeIndex));for(r=0;r<s.length;r+=1)if(void 0!==s[r]){const e=s[r].offsetHeight;n=e>n?e:n}(n||0===n)&&(t.wrapperEl.style.height=`${n}px`)},updateSlidesOffset:function(){const e=this,t=e.slides,s=e.isElement?e.isHorizontal()?e.wrapperEl.offsetLeft:e.wrapperEl.offsetTop:0;for(let i=0;i<t.length;i+=1)t[i].swiperSlideOffset=(e.isHorizontal()?t[i].offsetLeft:t[i].offsetTop)-s-e.cssOverflowAdjustment()},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);const t=this,s=t.params,{slides:i,rtlTranslate:r,snapGrid:n}=t;if(0===i.length)return;void 0===i[0].swiperSlideOffset&&t.updateSlidesOffset();let a=-e;r&&(a=e),t.visibleSlidesIndexes=[],t.visibleSlides=[];let l=s.spaceBetween;"string"==typeof l&&l.indexOf("%")>=0?l=parseFloat(l.replace("%",""))/100*t.size:"string"==typeof l&&(l=parseFloat(l));for(let e=0;e<i.length;e+=1){const o=i[e];let d=o.swiperSlideOffset;s.cssMode&&s.centeredSlides&&(d-=i[0].swiperSlideOffset);const c=(a+(s.centeredSlides?t.minTranslate():0)-d)/(o.swiperSlideSize+l),p=(a-n[0]+(s.centeredSlides?t.minTranslate():0)-d)/(o.swiperSlideSize+l),u=-(a-d),m=u+t.slidesSizesGrid[e],h=u>=0&&u<=t.size-t.slidesSizesGrid[e],f=u>=0&&u<t.size-1||m>1&&m<=t.size||u<=0&&m>=t.size;f&&(t.visibleSlides.push(o),t.visibleSlidesIndexes.push(e)),A(o,f,s.slideVisibleClass),A(o,h,s.slideFullyVisibleClass),o.progress=r?-c:c,o.originalProgress=r?-p:p}},updateProgress:function(e){const t=this;if(void 0===e){const s=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*s||0}const s=t.params,i=t.maxTranslate()-t.minTranslate();let{progress:r,isBeginning:n,isEnd:a,progressLoop:l}=t;const o=n,d=a;if(0===i)r=0,n=!0,a=!0;else{r=(e-t.minTranslate())/i;const s=Math.abs(e-t.minTranslate())<1,l=Math.abs(e-t.maxTranslate())<1;n=s||r<=0,a=l||r>=1,s&&(r=0),l&&(r=1)}if(s.loop){const s=t.getSlideIndexByData(0),i=t.getSlideIndexByData(t.slides.length-1),r=t.slidesGrid[s],n=t.slidesGrid[i],a=t.slidesGrid[t.slidesGrid.length-1],o=Math.abs(e);l=o>=r?(o-r)/a:(o+a-n)/a,l>1&&(l-=1)}Object.assign(t,{progress:r,progressLoop:l,isBeginning:n,isEnd:a}),(s.watchSlidesProgress||s.centeredSlides&&s.autoHeight)&&t.updateSlidesProgress(e),n&&!o&&t.emit("reachBeginning toEdge"),a&&!d&&t.emit("reachEnd toEdge"),(o&&!n||d&&!a)&&t.emit("fromEdge"),t.emit("progress",r)},updateSlidesClasses:function(){const e=this,{slides:t,params:s,slidesEl:i,activeIndex:r}=e,n=e.virtual&&s.virtual.enabled,a=e.grid&&s.grid&&s.grid.rows>1,l=e=>v(i,`.${s.slideClass}${e}, swiper-slide${e}`)[0];let o,d,c;if(n)if(s.loop){let t=r-e.virtual.slidesBefore;t<0&&(t=e.virtual.slides.length+t),t>=e.virtual.slides.length&&(t-=e.virtual.slides.length),o=l(`[data-swiper-slide-index="${t}"]`)}else o=l(`[data-swiper-slide-index="${r}"]`);else a?(o=t.find((e=>e.column===r)),c=t.find((e=>e.column===r+1)),d=t.find((e=>e.column===r-1))):o=t[r];o&&(a||(c=function(e,t){const s=[];for(;e.nextElementSibling;){const i=e.nextElementSibling;t?i.matches(t)&&s.push(i):s.push(i),e=i}return s}(o,`.${s.slideClass}, swiper-slide`)[0],s.loop&&!c&&(c=t[0]),d=function(e,t){const s=[];for(;e.previousElementSibling;){const i=e.previousElementSibling;t?i.matches(t)&&s.push(i):s.push(i),e=i}return s}(o,`.${s.slideClass}, swiper-slide`)[0],s.loop&&0===!d&&(d=t[t.length-1]))),t.forEach((e=>{O(e,e===o,s.slideActiveClass),O(e,e===c,s.slideNextClass),O(e,e===d,s.slidePrevClass)})),e.emitSlidesClasses()},updateActiveIndex:function(e){const t=this,s=t.rtlTranslate?t.translate:-t.translate,{snapGrid:i,params:r,activeIndex:n,realIndex:a,snapIndex:l}=t;let o,d=e;const c=e=>{let s=e-t.virtual.slidesBefore;return s<0&&(s=t.virtual.slides.length+s),s>=t.virtual.slides.length&&(s-=t.virtual.slides.length),s};if(void 0===d&&(d=function(e){const{slidesGrid:t,params:s}=e,i=e.rtlTranslate?e.translate:-e.translate;let r;for(let e=0;e<t.length;e+=1)void 0!==t[e+1]?i>=t[e]&&i<t[e+1]-(t[e+1]-t[e])/2?r=e:i>=t[e]&&i<t[e+1]&&(r=e+1):i>=t[e]&&(r=e);return s.normalizeSlideIndex&&(r<0||void 0===r)&&(r=0),r}(t)),i.indexOf(s)>=0)o=i.indexOf(s);else{const e=Math.min(r.slidesPerGroupSkip,d);o=e+Math.floor((d-e)/r.slidesPerGroup)}if(o>=i.length&&(o=i.length-1),d===n&&!t.params.loop)return void(o!==l&&(t.snapIndex=o,t.emit("snapIndexChange")));if(d===n&&t.params.loop&&t.virtual&&t.params.virtual.enabled)return void(t.realIndex=c(d));const p=t.grid&&r.grid&&r.grid.rows>1;let u;if(t.virtual&&r.virtual.enabled&&r.loop)u=c(d);else if(p){const e=t.slides.find((e=>e.column===d));let s=parseInt(e.getAttribute("data-swiper-slide-index"),10);Number.isNaN(s)&&(s=Math.max(t.slides.indexOf(e),0)),u=Math.floor(s/r.grid.rows)}else if(t.slides[d]){const e=t.slides[d].getAttribute("data-swiper-slide-index");u=e?parseInt(e,10):d}else u=d;Object.assign(t,{previousSnapIndex:l,snapIndex:o,previousRealIndex:a,realIndex:u,previousIndex:n,activeIndex:d}),t.initialized&&D(t),t.emit("activeIndexChange"),t.emit("snapIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&(a!==u&&t.emit("realIndexChange"),t.emit("slideChange"))},updateClickedSlide:function(e,t){const s=this,i=s.params;let r=e.closest(`.${i.slideClass}, swiper-slide`);!r&&s.isElement&&t&&t.length>1&&t.includes(e)&&[...t.slice(t.indexOf(e)+1,t.length)].forEach((e=>{!r&&e.matches&&e.matches(`.${i.slideClass}, swiper-slide`)&&(r=e)}));let n,a=!1;if(r)for(let e=0;e<s.slides.length;e+=1)if(s.slides[e]===r){a=!0,n=e;break}if(!r||!a)return s.clickedSlide=void 0,void(s.clickedIndex=void 0);s.clickedSlide=r,s.virtual&&s.params.virtual.enabled?s.clickedIndex=parseInt(r.getAttribute("data-swiper-slide-index"),10):s.clickedIndex=n,i.slideToClickedSlide&&void 0!==s.clickedIndex&&s.clickedIndex!==s.activeIndex&&s.slideToClickedSlide()}};function _(e){let{swiper:t,runCallbacks:s,direction:i,step:r}=e;const{activeIndex:n,previousIndex:a}=t;let l=i;if(l||(l=n>a?"next":n<a?"prev":"reset"),t.emit(`transition${r}`),s&&n!==a){if("reset"===l)return void t.emit(`slideResetTransition${r}`);t.emit(`slideChangeTransition${r}`),"next"===l?t.emit(`slideNextTransition${r}`):t.emit(`slidePrevTransition${r}`)}}var $={slideTo:function(e,t,s,i,r){void 0===e&&(e=0),void 0===s&&(s=!0),"string"==typeof e&&(e=parseInt(e,10));const n=this;let a=e;a<0&&(a=0);const{params:l,snapGrid:o,slidesGrid:d,previousIndex:c,activeIndex:p,rtlTranslate:u,wrapperEl:m,enabled:h}=n;if(!h&&!i&&!r||n.destroyed||n.animating&&l.preventInteractionOnTransition)return!1;void 0===t&&(t=n.params.speed);const f=Math.min(n.params.slidesPerGroupSkip,a);let v=f+Math.floor((a-f)/n.params.slidesPerGroup);v>=o.length&&(v=o.length-1);const w=-o[v];if(l.normalizeSlideIndex)for(let e=0;e<d.length;e+=1){const t=-Math.floor(100*w),s=Math.floor(100*d[e]),i=Math.floor(100*d[e+1]);void 0!==d[e+1]?t>=s&&t<i-(i-s)/2?a=e:t>=s&&t<i&&(a=e+1):t>=s&&(a=e)}if(n.initialized&&a!==p){if(!n.allowSlideNext&&(u?w>n.translate&&w>n.minTranslate():w<n.translate&&w<n.minTranslate()))return!1;if(!n.allowSlidePrev&&w>n.translate&&w>n.maxTranslate()&&(p||0)!==a)return!1}let b;a!==(c||0)&&s&&n.emit("beforeSlideChangeStart"),n.updateProgress(w),b=a>p?"next":a<p?"prev":"reset";const S=n.virtual&&n.params.virtual.enabled;if((!S||!r)&&(u&&-w===n.translate||!u&&w===n.translate))return n.updateActiveIndex(a),l.autoHeight&&n.updateAutoHeight(),n.updateSlidesClasses(),"slide"!==l.effect&&n.setTranslate(w),"reset"!==b&&(n.transitionStart(s,b),n.transitionEnd(s,b)),!1;if(l.cssMode){const e=n.isHorizontal(),s=u?w:-w;if(0===t)S&&(n.wrapperEl.style.scrollSnapType="none",n._immediateVirtual=!0),S&&!n._cssModeVirtualInitialSet&&n.params.initialSlide>0?(n._cssModeVirtualInitialSet=!0,requestAnimationFrame((()=>{m[e?"scrollLeft":"scrollTop"]=s}))):m[e?"scrollLeft":"scrollTop"]=s,S&&requestAnimationFrame((()=>{n.wrapperEl.style.scrollSnapType="",n._immediateVirtual=!1}));else{if(!n.support.smoothScroll)return g({swiper:n,targetPosition:s,side:e?"left":"top"}),!0;m.scrollTo({[e?"left":"top"]:s,behavior:"smooth"})}return!0}return n.setTransition(t),n.setTranslate(w),n.updateActiveIndex(a),n.updateSlidesClasses(),n.emit("beforeTransitionStart",t,i),n.transitionStart(s,b),0===t?n.transitionEnd(s,b):n.animating||(n.animating=!0,n.onSlideToWrapperTransitionEnd||(n.onSlideToWrapperTransitionEnd=function(e){n&&!n.destroyed&&e.target===this&&(n.wrapperEl.removeEventListener("transitionend",n.onSlideToWrapperTransitionEnd),n.onSlideToWrapperTransitionEnd=null,delete n.onSlideToWrapperTransitionEnd,n.transitionEnd(s,b))}),n.wrapperEl.addEventListener("transitionend",n.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(e,t,s,i){void 0===e&&(e=0),void 0===s&&(s=!0),"string"==typeof e&&(e=parseInt(e,10));const r=this;if(r.destroyed)return;void 0===t&&(t=r.params.speed);const n=r.grid&&r.params.grid&&r.params.grid.rows>1;let a=e;if(r.params.loop)if(r.virtual&&r.params.virtual.enabled)a+=r.virtual.slidesBefore;else{let e;if(n){const t=a*r.params.grid.rows;e=r.slides.find((e=>1*e.getAttribute("data-swiper-slide-index")===t)).column}else e=r.getSlideIndexByData(a);const t=n?Math.ceil(r.slides.length/r.params.grid.rows):r.slides.length,{centeredSlides:s}=r.params;let l=r.params.slidesPerView;"auto"===l?l=r.slidesPerViewDynamic():(l=Math.ceil(parseFloat(r.params.slidesPerView,10)),s&&l%2==0&&(l+=1));let o=t-e<l;if(s&&(o=o||e<Math.ceil(l/2)),i&&s&&"auto"!==r.params.slidesPerView&&!n&&(o=!1),o){const i=s?e<r.activeIndex?"prev":"next":e-r.activeIndex-1<r.params.slidesPerView?"next":"prev";r.loopFix({direction:i,slideTo:!0,activeSlideIndex:"next"===i?e+1:e-t+1,slideRealIndex:"next"===i?r.realIndex:void 0})}if(n){const e=a*r.params.grid.rows;a=r.slides.find((t=>1*t.getAttribute("data-swiper-slide-index")===e)).column}else a=r.getSlideIndexByData(a)}return requestAnimationFrame((()=>{r.slideTo(a,t,s,i)})),r},slideNext:function(e,t,s){void 0===t&&(t=!0);const i=this,{enabled:r,params:n,animating:a}=i;if(!r||i.destroyed)return i;void 0===e&&(e=i.params.speed);let l=n.slidesPerGroup;"auto"===n.slidesPerView&&1===n.slidesPerGroup&&n.slidesPerGroupAuto&&(l=Math.max(i.slidesPerViewDynamic("current",!0),1));const o=i.activeIndex<n.slidesPerGroupSkip?1:l,d=i.virtual&&n.virtual.enabled;if(n.loop){if(a&&!d&&n.loopPreventsSliding)return!1;if(i.loopFix({direction:"next"}),i._clientLeft=i.wrapperEl.clientLeft,i.activeIndex===i.slides.length-1&&n.cssMode)return requestAnimationFrame((()=>{i.slideTo(i.activeIndex+o,e,t,s)})),!0}return n.rewind&&i.isEnd?i.slideTo(0,e,t,s):i.slideTo(i.activeIndex+o,e,t,s)},slidePrev:function(e,t,s){void 0===t&&(t=!0);const i=this,{params:r,snapGrid:n,slidesGrid:a,rtlTranslate:l,enabled:o,animating:d}=i;if(!o||i.destroyed)return i;void 0===e&&(e=i.params.speed);const c=i.virtual&&r.virtual.enabled;if(r.loop){if(d&&!c&&r.loopPreventsSliding)return!1;i.loopFix({direction:"prev"}),i._clientLeft=i.wrapperEl.clientLeft}function p(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const u=p(l?i.translate:-i.translate),m=n.map((e=>p(e)));let h=n[m.indexOf(u)-1];if(void 0===h&&r.cssMode){let e;n.forEach(((t,s)=>{u>=t&&(e=s)})),void 0!==e&&(h=n[e>0?e-1:e])}let f=0;if(void 0!==h&&(f=a.indexOf(h),f<0&&(f=i.activeIndex-1),"auto"===r.slidesPerView&&1===r.slidesPerGroup&&r.slidesPerGroupAuto&&(f=f-i.slidesPerViewDynamic("previous",!0)+1,f=Math.max(f,0))),r.rewind&&i.isBeginning){const r=i.params.virtual&&i.params.virtual.enabled&&i.virtual?i.virtual.slides.length-1:i.slides.length-1;return i.slideTo(r,e,t,s)}return r.loop&&0===i.activeIndex&&r.cssMode?(requestAnimationFrame((()=>{i.slideTo(f,e,t,s)})),!0):i.slideTo(f,e,t,s)},slideReset:function(e,t,s){void 0===t&&(t=!0);const i=this;if(!i.destroyed)return void 0===e&&(e=i.params.speed),i.slideTo(i.activeIndex,e,t,s)},slideToClosest:function(e,t,s,i){void 0===t&&(t=!0),void 0===i&&(i=.5);const r=this;if(r.destroyed)return;void 0===e&&(e=r.params.speed);let n=r.activeIndex;const a=Math.min(r.params.slidesPerGroupSkip,n),l=a+Math.floor((n-a)/r.params.slidesPerGroup),o=r.rtlTranslate?r.translate:-r.translate;if(o>=r.snapGrid[l]){const e=r.snapGrid[l];o-e>(r.snapGrid[l+1]-e)*i&&(n+=r.params.slidesPerGroup)}else{const e=r.snapGrid[l-1];o-e<=(r.snapGrid[l]-e)*i&&(n-=r.params.slidesPerGroup)}return n=Math.max(n,0),n=Math.min(n,r.slidesGrid.length-1),r.slideTo(n,e,t,s)},slideToClickedSlide:function(){const e=this;if(e.destroyed)return;const{params:t,slidesEl:s}=e,i="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let r,n=e.clickedIndex;const a=e.isElement?"swiper-slide":`.${t.slideClass}`;if(t.loop){if(e.animating)return;r=parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10),t.centeredSlides?n<e.loopedSlides-i/2||n>e.slides.length-e.loopedSlides+i/2?(e.loopFix(),n=e.getSlideIndex(v(s,`${a}[data-swiper-slide-index="${r}"]`)[0]),p((()=>{e.slideTo(n)}))):e.slideTo(n):n>e.slides.length-i?(e.loopFix(),n=e.getSlideIndex(v(s,`${a}[data-swiper-slide-index="${r}"]`)[0]),p((()=>{e.slideTo(n)}))):e.slideTo(n)}else e.slideTo(n)}},V={loopCreate:function(e){const t=this,{params:s,slidesEl:i}=t;if(!s.loop||t.virtual&&t.params.virtual.enabled)return;const r=()=>{v(i,`.${s.slideClass}, swiper-slide`).forEach(((e,t)=>{e.setAttribute("data-swiper-slide-index",t)}))},n=t.grid&&s.grid&&s.grid.rows>1,a=s.slidesPerGroup*(n?s.grid.rows:1),l=t.slides.length%a!=0,o=n&&t.slides.length%s.grid.rows!=0,d=e=>{for(let i=0;i<e;i+=1){const e=t.isElement?b("swiper-slide",[s.slideBlankClass]):b("div",[s.slideClass,s.slideBlankClass]);t.slidesEl.append(e)}};l?(s.loopAddBlankSlides?(d(a-t.slides.length%a),t.recalcSlides(),t.updateSlides()):w("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)"),r()):o?(s.loopAddBlankSlides?(d(s.grid.rows-t.slides.length%s.grid.rows),t.recalcSlides(),t.updateSlides()):w("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)"),r()):r(),t.loopFix({slideRealIndex:e,direction:s.centeredSlides?void 0:"next"})},loopFix:function(e){let{slideRealIndex:t,slideTo:s=!0,direction:i,setTranslate:r,activeSlideIndex:n,byController:a,byMousewheel:l}=void 0===e?{}:e;const o=this;if(!o.params.loop)return;o.emit("beforeLoopFix");const{slides:d,allowSlidePrev:c,allowSlideNext:p,slidesEl:u,params:m}=o,{centeredSlides:h}=m;if(o.allowSlidePrev=!0,o.allowSlideNext=!0,o.virtual&&m.virtual.enabled)return s&&(m.centeredSlides||0!==o.snapIndex?m.centeredSlides&&o.snapIndex<m.slidesPerView?o.slideTo(o.virtual.slides.length+o.snapIndex,0,!1,!0):o.snapIndex===o.snapGrid.length-1&&o.slideTo(o.virtual.slidesBefore,0,!1,!0):o.slideTo(o.virtual.slides.length,0,!1,!0)),o.allowSlidePrev=c,o.allowSlideNext=p,void o.emit("loopFix");let f=m.slidesPerView;"auto"===f?f=o.slidesPerViewDynamic():(f=Math.ceil(parseFloat(m.slidesPerView,10)),h&&f%2==0&&(f+=1));const g=m.slidesPerGroupAuto?f:m.slidesPerGroup;let v=g;v%g!=0&&(v+=g-v%g),v+=m.loopAdditionalSlides,o.loopedSlides=v;const b=o.grid&&m.grid&&m.grid.rows>1;d.length<f+v?w("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):b&&"row"===m.grid.fill&&w("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const S=[],T=[];let y=o.activeIndex;void 0===n?n=o.getSlideIndex(d.find((e=>e.classList.contains(m.slideActiveClass)))):y=n;const E="next"===i||!i,x="prev"===i||!i;let C=0,M=0;const P=b?Math.ceil(d.length/m.grid.rows):d.length,L=(b?d[n].column:n)+(h&&void 0===r?-f/2+.5:0);if(L<v){C=Math.max(v-L,g);for(let e=0;e<v-L;e+=1){const t=e-Math.floor(e/P)*P;if(b){const e=P-t-1;for(let t=d.length-1;t>=0;t-=1)d[t].column===e&&S.push(t)}else S.push(P-t-1)}}else if(L+f>P-v){M=Math.max(L-(P-2*v),g);for(let e=0;e<M;e+=1){const t=e-Math.floor(e/P)*P;b?d.forEach(((e,s)=>{e.column===t&&T.push(s)})):T.push(t)}}if(o.__preventObserver__=!0,requestAnimationFrame((()=>{o.__preventObserver__=!1})),x&&S.forEach((e=>{d[e].swiperLoopMoveDOM=!0,u.prepend(d[e]),d[e].swiperLoopMoveDOM=!1})),E&&T.forEach((e=>{d[e].swiperLoopMoveDOM=!0,u.append(d[e]),d[e].swiperLoopMoveDOM=!1})),o.recalcSlides(),"auto"===m.slidesPerView?o.updateSlides():b&&(S.length>0&&x||T.length>0&&E)&&o.slides.forEach(((e,t)=>{o.grid.updateSlide(t,e,o.slides)})),m.watchSlidesProgress&&o.updateSlidesOffset(),s)if(S.length>0&&x){if(void 0===t){const e=o.slidesGrid[y],t=o.slidesGrid[y+C]-e;l?o.setTranslate(o.translate-t):(o.slideTo(y+Math.ceil(C),0,!1,!0),r&&(o.touchEventsData.startTranslate=o.touchEventsData.startTranslate-t,o.touchEventsData.currentTranslate=o.touchEventsData.currentTranslate-t))}else if(r){const e=b?S.length/m.grid.rows:S.length;o.slideTo(o.activeIndex+e,0,!1,!0),o.touchEventsData.currentTranslate=o.translate}}else if(T.length>0&&E)if(void 0===t){const e=o.slidesGrid[y],t=o.slidesGrid[y-M]-e;l?o.setTranslate(o.translate-t):(o.slideTo(y-M,0,!1,!0),r&&(o.touchEventsData.startTranslate=o.touchEventsData.startTranslate-t,o.touchEventsData.currentTranslate=o.touchEventsData.currentTranslate-t))}else{const e=b?T.length/m.grid.rows:T.length;o.slideTo(o.activeIndex-e,0,!1,!0)}if(o.allowSlidePrev=c,o.allowSlideNext=p,o.controller&&o.controller.control&&!a){const e={slideRealIndex:t,direction:i,setTranslate:r,activeSlideIndex:n,byController:!0};Array.isArray(o.controller.control)?o.controller.control.forEach((t=>{!t.destroyed&&t.params.loop&&t.loopFix({...e,slideTo:t.params.slidesPerView===m.slidesPerView&&s})})):o.controller.control instanceof o.constructor&&o.controller.control.params.loop&&o.controller.control.loopFix({...e,slideTo:o.controller.control.params.slidesPerView===m.slidesPerView&&s})}o.emit("loopFix")},loopDestroy:function(){const e=this,{params:t,slidesEl:s}=e;if(!t.loop||e.virtual&&e.params.virtual.enabled)return;e.recalcSlides();const i=[];e.slides.forEach((e=>{const t=void 0===e.swiperSlideIndex?1*e.getAttribute("data-swiper-slide-index"):e.swiperSlideIndex;i[t]=e})),e.slides.forEach((e=>{e.removeAttribute("data-swiper-slide-index")})),i.forEach((e=>{s.append(e)})),e.recalcSlides(),e.slideTo(e.realIndex,0)}};function F(e,t,s){const i=c(),{params:r}=e,n=r.edgeSwipeDetection,a=r.edgeSwipeThreshold;return!n||!(s<=a||s>=i.innerWidth-a)||"prevent"===n&&(t.preventDefault(),!0)}function N(e){const t=this,s=o();let i=e;i.originalEvent&&(i=i.originalEvent);const r=t.touchEventsData;if("pointerdown"===i.type){if(null!==r.pointerId&&r.pointerId!==i.pointerId)return;r.pointerId=i.pointerId}else"touchstart"===i.type&&1===i.targetTouches.length&&(r.touchId=i.targetTouches[0].identifier);if("touchstart"===i.type)return void F(t,i,i.targetTouches[0].pageX);const{params:n,touches:a,enabled:l}=t;if(!l)return;if(!n.simulateTouch&&"mouse"===i.pointerType)return;if(t.animating&&n.preventInteractionOnTransition)return;!t.animating&&n.cssMode&&n.loop&&t.loopFix();let d=i.target;if("wrapper"===n.touchEventsTarget&&!function(e,t){let s=t.contains(e);return!s&&t instanceof HTMLSlotElement&&(s=[...t.assignedElements()].includes(e),s||(s=function(e,t){const s=[t];for(;s.length>0;){const t=s.shift();if(e===t)return!0;s.push(...t.children,...t.shadowRoot?.children||[],...t.assignedElements?.()||[])}}(e,t))),s}(d,t.wrapperEl))return;if("which"in i&&3===i.which)return;if("button"in i&&i.button>0)return;if(r.isTouched&&r.isMoved)return;const p=!!n.noSwipingClass&&""!==n.noSwipingClass,m=i.composedPath?i.composedPath():i.path;p&&i.target&&i.target.shadowRoot&&m&&(d=m[0]);const h=n.noSwipingSelector?n.noSwipingSelector:`.${n.noSwipingClass}`,f=!(!i.target||!i.target.shadowRoot);if(n.noSwiping&&(f?function(e,t){return void 0===t&&(t=this),function t(s){if(!s||s===o()||s===c())return null;s.assignedSlot&&(s=s.assignedSlot);const i=s.closest(e);return i||s.getRootNode?i||t(s.getRootNode().host):null}(t)}(h,d):d.closest(h)))return void(t.allowClick=!0);if(n.swipeHandler&&!d.closest(n.swipeHandler))return;a.currentX=i.pageX,a.currentY=i.pageY;const g=a.currentX,v=a.currentY;if(!F(t,i,g))return;Object.assign(r,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),a.startX=g,a.startY=v,r.touchStartTime=u(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,n.threshold>0&&(r.allowThresholdMove=!1);let w=!0;d.matches(r.focusableElements)&&(w=!1,"SELECT"===d.nodeName&&(r.isTouched=!1)),s.activeElement&&s.activeElement.matches(r.focusableElements)&&s.activeElement!==d&&("mouse"===i.pointerType||"mouse"!==i.pointerType&&!d.matches(r.focusableElements))&&s.activeElement.blur();const b=w&&t.allowTouchMove&&n.touchStartPreventDefault;!n.touchStartForcePreventDefault&&!b||d.isContentEditable||i.preventDefault(),n.freeMode&&n.freeMode.enabled&&t.freeMode&&t.animating&&!n.cssMode&&t.freeMode.onTouchStart(),t.emit("touchStart",i)}function H(e){const t=o(),s=this,i=s.touchEventsData,{params:r,touches:n,rtlTranslate:a,enabled:l}=s;if(!l)return;if(!r.simulateTouch&&"mouse"===e.pointerType)return;let d,c=e;if(c.originalEvent&&(c=c.originalEvent),"pointermove"===c.type){if(null!==i.touchId)return;if(c.pointerId!==i.pointerId)return}if("touchmove"===c.type){if(d=[...c.changedTouches].find((e=>e.identifier===i.touchId)),!d||d.identifier!==i.touchId)return}else d=c;if(!i.isTouched)return void(i.startMoving&&i.isScrolling&&s.emit("touchMoveOpposite",c));const p=d.pageX,m=d.pageY;if(c.preventedByNestedSwiper)return n.startX=p,void(n.startY=m);if(!s.allowTouchMove)return c.target.matches(i.focusableElements)||(s.allowClick=!1),void(i.isTouched&&(Object.assign(n,{startX:p,startY:m,currentX:p,currentY:m}),i.touchStartTime=u()));if(r.touchReleaseOnEdges&&!r.loop)if(s.isVertical()){if(m<n.startY&&s.translate<=s.maxTranslate()||m>n.startY&&s.translate>=s.minTranslate())return i.isTouched=!1,void(i.isMoved=!1)}else if(p<n.startX&&s.translate<=s.maxTranslate()||p>n.startX&&s.translate>=s.minTranslate())return;if(t.activeElement&&t.activeElement.matches(i.focusableElements)&&t.activeElement!==c.target&&"mouse"!==c.pointerType&&t.activeElement.blur(),t.activeElement&&c.target===t.activeElement&&c.target.matches(i.focusableElements))return i.isMoved=!0,void(s.allowClick=!1);i.allowTouchCallbacks&&s.emit("touchMove",c),n.previousX=n.currentX,n.previousY=n.currentY,n.currentX=p,n.currentY=m;const h=n.currentX-n.startX,f=n.currentY-n.startY;if(s.params.threshold&&Math.sqrt(h**2+f**2)<s.params.threshold)return;if(void 0===i.isScrolling){let e;s.isHorizontal()&&n.currentY===n.startY||s.isVertical()&&n.currentX===n.startX?i.isScrolling=!1:h*h+f*f>=25&&(e=180*Math.atan2(Math.abs(f),Math.abs(h))/Math.PI,i.isScrolling=s.isHorizontal()?e>r.touchAngle:90-e>r.touchAngle)}if(i.isScrolling&&s.emit("touchMoveOpposite",c),void 0===i.startMoving&&(n.currentX===n.startX&&n.currentY===n.startY||(i.startMoving=!0)),i.isScrolling||"touchmove"===c.type&&i.preventTouchMoveFromPointerMove)return void(i.isTouched=!1);if(!i.startMoving)return;s.allowClick=!1,!r.cssMode&&c.cancelable&&c.preventDefault(),r.touchMoveStopPropagation&&!r.nested&&c.stopPropagation();let g=s.isHorizontal()?h:f,v=s.isHorizontal()?n.currentX-n.previousX:n.currentY-n.previousY;r.oneWayMovement&&(g=Math.abs(g)*(a?1:-1),v=Math.abs(v)*(a?1:-1)),n.diff=g,g*=r.touchRatio,a&&(g=-g,v=-v);const w=s.touchesDirection;s.swipeDirection=g>0?"prev":"next",s.touchesDirection=v>0?"prev":"next";const b=s.params.loop&&!r.cssMode,S="next"===s.touchesDirection&&s.allowSlideNext||"prev"===s.touchesDirection&&s.allowSlidePrev;if(!i.isMoved){if(b&&S&&s.loopFix({direction:s.swipeDirection}),i.startTranslate=s.getTranslate(),s.setTransition(0),s.animating){const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0,detail:{bySwiperTouchMove:!0}});s.wrapperEl.dispatchEvent(e)}i.allowMomentumBounce=!1,!r.grabCursor||!0!==s.allowSlideNext&&!0!==s.allowSlidePrev||s.setGrabCursor(!0),s.emit("sliderFirstMove",c)}if((new Date).getTime(),i.isMoved&&i.allowThresholdMove&&w!==s.touchesDirection&&b&&S&&Math.abs(g)>=1)return Object.assign(n,{startX:p,startY:m,currentX:p,currentY:m,startTranslate:i.currentTranslate}),i.loopSwapReset=!0,void(i.startTranslate=i.currentTranslate);s.emit("sliderMove",c),i.isMoved=!0,i.currentTranslate=g+i.startTranslate;let T=!0,y=r.resistanceRatio;if(r.touchReleaseOnEdges&&(y=0),g>0?(b&&S&&i.allowThresholdMove&&i.currentTranslate>(r.centeredSlides?s.minTranslate()-s.slidesSizesGrid[s.activeIndex+1]-("auto"!==r.slidesPerView&&s.slides.length-r.slidesPerView>=2?s.slidesSizesGrid[s.activeIndex+1]+s.params.spaceBetween:0)-s.params.spaceBetween:s.minTranslate())&&s.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),i.currentTranslate>s.minTranslate()&&(T=!1,r.resistance&&(i.currentTranslate=s.minTranslate()-1+(-s.minTranslate()+i.startTranslate+g)**y))):g<0&&(b&&S&&i.allowThresholdMove&&i.currentTranslate<(r.centeredSlides?s.maxTranslate()+s.slidesSizesGrid[s.slidesSizesGrid.length-1]+s.params.spaceBetween+("auto"!==r.slidesPerView&&s.slides.length-r.slidesPerView>=2?s.slidesSizesGrid[s.slidesSizesGrid.length-1]+s.params.spaceBetween:0):s.maxTranslate())&&s.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:s.slides.length-("auto"===r.slidesPerView?s.slidesPerViewDynamic():Math.ceil(parseFloat(r.slidesPerView,10)))}),i.currentTranslate<s.maxTranslate()&&(T=!1,r.resistance&&(i.currentTranslate=s.maxTranslate()+1-(s.maxTranslate()-i.startTranslate-g)**y))),T&&(c.preventedByNestedSwiper=!0),!s.allowSlideNext&&"next"===s.swipeDirection&&i.currentTranslate<i.startTranslate&&(i.currentTranslate=i.startTranslate),!s.allowSlidePrev&&"prev"===s.swipeDirection&&i.currentTranslate>i.startTranslate&&(i.currentTranslate=i.startTranslate),s.allowSlidePrev||s.allowSlideNext||(i.currentTranslate=i.startTranslate),r.threshold>0){if(!(Math.abs(g)>r.threshold||i.allowThresholdMove))return void(i.currentTranslate=i.startTranslate);if(!i.allowThresholdMove)return i.allowThresholdMove=!0,n.startX=n.currentX,n.startY=n.currentY,i.currentTranslate=i.startTranslate,void(n.diff=s.isHorizontal()?n.currentX-n.startX:n.currentY-n.startY)}r.followFinger&&!r.cssMode&&((r.freeMode&&r.freeMode.enabled&&s.freeMode||r.watchSlidesProgress)&&(s.updateActiveIndex(),s.updateSlidesClasses()),r.freeMode&&r.freeMode.enabled&&s.freeMode&&s.freeMode.onTouchMove(),s.updateProgress(i.currentTranslate),s.setTranslate(i.currentTranslate))}function R(e){const t=this,s=t.touchEventsData;let i,r=e;if(r.originalEvent&&(r=r.originalEvent),"touchend"===r.type||"touchcancel"===r.type){if(i=[...r.changedTouches].find((e=>e.identifier===s.touchId)),!i||i.identifier!==s.touchId)return}else{if(null!==s.touchId)return;if(r.pointerId!==s.pointerId)return;i=r}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(r.type)&&(!["pointercancel","contextmenu"].includes(r.type)||!t.browser.isSafari&&!t.browser.isWebView))return;s.pointerId=null,s.touchId=null;const{params:n,touches:a,rtlTranslate:l,slidesGrid:o,enabled:d}=t;if(!d)return;if(!n.simulateTouch&&"mouse"===r.pointerType)return;if(s.allowTouchCallbacks&&t.emit("touchEnd",r),s.allowTouchCallbacks=!1,!s.isTouched)return s.isMoved&&n.grabCursor&&t.setGrabCursor(!1),s.isMoved=!1,void(s.startMoving=!1);n.grabCursor&&s.isMoved&&s.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const c=u(),m=c-s.touchStartTime;if(t.allowClick){const e=r.path||r.composedPath&&r.composedPath();t.updateClickedSlide(e&&e[0]||r.target,e),t.emit("tap click",r),m<300&&c-s.lastClickTime<300&&t.emit("doubleTap doubleClick",r)}if(s.lastClickTime=u(),p((()=>{t.destroyed||(t.allowClick=!0)})),!s.isTouched||!s.isMoved||!t.swipeDirection||0===a.diff&&!s.loopSwapReset||s.currentTranslate===s.startTranslate&&!s.loopSwapReset)return s.isTouched=!1,s.isMoved=!1,void(s.startMoving=!1);let h;if(s.isTouched=!1,s.isMoved=!1,s.startMoving=!1,h=n.followFinger?l?t.translate:-t.translate:-s.currentTranslate,n.cssMode)return;if(n.freeMode&&n.freeMode.enabled)return void t.freeMode.onTouchEnd({currentPos:h});const f=h>=-t.maxTranslate()&&!t.params.loop;let g=0,v=t.slidesSizesGrid[0];for(let e=0;e<o.length;e+=e<n.slidesPerGroupSkip?1:n.slidesPerGroup){const t=e<n.slidesPerGroupSkip-1?1:n.slidesPerGroup;void 0!==o[e+t]?(f||h>=o[e]&&h<o[e+t])&&(g=e,v=o[e+t]-o[e]):(f||h>=o[e])&&(g=e,v=o[o.length-1]-o[o.length-2])}let w=null,b=null;n.rewind&&(t.isBeginning?b=n.virtual&&n.virtual.enabled&&t.virtual?t.virtual.slides.length-1:t.slides.length-1:t.isEnd&&(w=0));const S=(h-o[g])/v,T=g<n.slidesPerGroupSkip-1?1:n.slidesPerGroup;if(m>n.longSwipesMs){if(!n.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(S>=n.longSwipesRatio?t.slideTo(n.rewind&&t.isEnd?w:g+T):t.slideTo(g)),"prev"===t.swipeDirection&&(S>1-n.longSwipesRatio?t.slideTo(g+T):null!==b&&S<0&&Math.abs(S)>n.longSwipesRatio?t.slideTo(b):t.slideTo(g))}else{if(!n.shortSwipes)return void t.slideTo(t.activeIndex);!t.navigation||r.target!==t.navigation.nextEl&&r.target!==t.navigation.prevEl?("next"===t.swipeDirection&&t.slideTo(null!==w?w:g+T),"prev"===t.swipeDirection&&t.slideTo(null!==b?b:g)):r.target===t.navigation.nextEl?t.slideTo(g+T):t.slideTo(g)}}function j(){const e=this,{params:t,el:s}=e;if(s&&0===s.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:i,allowSlidePrev:r,snapGrid:n}=e,a=e.virtual&&e.params.virtual.enabled;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses();const l=a&&t.loop;!("auto"===t.slidesPerView||t.slidesPerView>1)||!e.isEnd||e.isBeginning||e.params.centeredSlides||l?e.params.loop&&!a?e.slideToLoop(e.realIndex,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0):e.slideTo(e.slides.length-1,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&(clearTimeout(e.autoplay.resizeTimeout),e.autoplay.resizeTimeout=setTimeout((()=>{e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.resume()}),500)),e.allowSlidePrev=r,e.allowSlideNext=i,e.params.watchOverflow&&n!==e.snapGrid&&e.checkOverflow()}function q(e){const t=this;t.enabled&&(t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function W(){const e=this,{wrapperEl:t,rtlTranslate:s,enabled:i}=e;if(!i)return;let r;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=-t.scrollLeft:e.translate=-t.scrollTop,0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();const n=e.maxTranslate()-e.minTranslate();r=0===n?0:(e.translate-e.minTranslate())/n,r!==e.progress&&e.updateProgress(s?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}function Y(e){const t=this;z(t,e.target),t.params.cssMode||"auto"!==t.params.slidesPerView&&!t.params.autoHeight||t.update()}function X(){const e=this;e.documentTouchHandlerProceeded||(e.documentTouchHandlerProceeded=!0,e.params.touchReleaseOnEdges&&(e.el.style.touchAction="auto"))}const U=(e,t)=>{const s=o(),{params:i,el:r,wrapperEl:n,device:a}=e,l=!!i.nested,d="on"===t?"addEventListener":"removeEventListener",c=t;r&&"string"!=typeof r&&(s[d]("touchstart",e.onDocumentTouchStart,{passive:!1,capture:l}),r[d]("touchstart",e.onTouchStart,{passive:!1}),r[d]("pointerdown",e.onTouchStart,{passive:!1}),s[d]("touchmove",e.onTouchMove,{passive:!1,capture:l}),s[d]("pointermove",e.onTouchMove,{passive:!1,capture:l}),s[d]("touchend",e.onTouchEnd,{passive:!0}),s[d]("pointerup",e.onTouchEnd,{passive:!0}),s[d]("pointercancel",e.onTouchEnd,{passive:!0}),s[d]("touchcancel",e.onTouchEnd,{passive:!0}),s[d]("pointerout",e.onTouchEnd,{passive:!0}),s[d]("pointerleave",e.onTouchEnd,{passive:!0}),s[d]("contextmenu",e.onTouchEnd,{passive:!0}),(i.preventClicks||i.preventClicksPropagation)&&r[d]("click",e.onClick,!0),i.cssMode&&n[d]("scroll",e.onScroll),i.updateOnWindowResize?e[c](a.ios||a.android?"resize orientationchange observerUpdate":"resize observerUpdate",j,!0):e[c]("observerUpdate",j,!0),r[d]("load",e.onLoad,{capture:!0}))};const K=(e,t)=>e.grid&&t.grid&&t.grid.rows>1;var J={init:!0,direction:"horizontal",oneWayMovement:!1,swiperElementNodeName:"SWIPER-CONTAINER",touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function Q(e,t){return function(s){void 0===s&&(s={});const i=Object.keys(s)[0],r=s[i];"object"==typeof r&&null!==r?(!0===e[i]&&(e[i]={enabled:!0}),"navigation"===i&&e[i]&&e[i].enabled&&!e[i].prevEl&&!e[i].nextEl&&(e[i].auto=!0),["pagination","scrollbar"].indexOf(i)>=0&&e[i]&&e[i].enabled&&!e[i].el&&(e[i].auto=!0),i in e&&"enabled"in r?("object"!=typeof e[i]||"enabled"in e[i]||(e[i].enabled=!0),e[i]||(e[i]={enabled:!1}),h(t,s)):h(t,s)):h(t,s)}}const Z={eventsEmitter:I,update:B,translate:{getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");const{params:t,rtlTranslate:s,translate:i,wrapperEl:r}=this;if(t.virtualTranslate)return s?-i:i;if(t.cssMode)return i;let n=function(e,t){void 0===t&&(t="x");const s=c();let i,r,n;const a=function(e){const t=c();let s;return t.getComputedStyle&&(s=t.getComputedStyle(e,null)),!s&&e.currentStyle&&(s=e.currentStyle),s||(s=e.style),s}(e);return s.WebKitCSSMatrix?(r=a.transform||a.webkitTransform,r.split(",").length>6&&(r=r.split(", ").map((e=>e.replace(",","."))).join(", ")),n=new s.WebKitCSSMatrix("none"===r?"":r)):(n=a.MozTransform||a.OTransform||a.MsTransform||a.msTransform||a.transform||a.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),i=n.toString().split(",")),"x"===t&&(r=s.WebKitCSSMatrix?n.m41:16===i.length?parseFloat(i[12]):parseFloat(i[4])),"y"===t&&(r=s.WebKitCSSMatrix?n.m42:16===i.length?parseFloat(i[13]):parseFloat(i[5])),r||0}(r,e);return n+=this.cssOverflowAdjustment(),s&&(n=-n),n||0},setTranslate:function(e,t){const s=this,{rtlTranslate:i,params:r,wrapperEl:n,progress:a}=s;let l,o=0,d=0;s.isHorizontal()?o=i?-e:e:d=e,r.roundLengths&&(o=Math.floor(o),d=Math.floor(d)),s.previousTranslate=s.translate,s.translate=s.isHorizontal()?o:d,r.cssMode?n[s.isHorizontal()?"scrollLeft":"scrollTop"]=s.isHorizontal()?-o:-d:r.virtualTranslate||(s.isHorizontal()?o-=s.cssOverflowAdjustment():d-=s.cssOverflowAdjustment(),n.style.transform=`translate3d(${o}px, ${d}px, 0px)`);const c=s.maxTranslate()-s.minTranslate();l=0===c?0:(e-s.minTranslate())/c,l!==a&&s.updateProgress(e),s.emit("setTranslate",s.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,s,i,r){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===s&&(s=!0),void 0===i&&(i=!0);const n=this,{params:a,wrapperEl:l}=n;if(n.animating&&a.preventInteractionOnTransition)return!1;const o=n.minTranslate(),d=n.maxTranslate();let c;if(c=i&&e>o?o:i&&e<d?d:e,n.updateProgress(c),a.cssMode){const e=n.isHorizontal();if(0===t)l[e?"scrollLeft":"scrollTop"]=-c;else{if(!n.support.smoothScroll)return g({swiper:n,targetPosition:-c,side:e?"left":"top"}),!0;l.scrollTo({[e?"left":"top"]:-c,behavior:"smooth"})}return!0}return 0===t?(n.setTransition(0),n.setTranslate(c),s&&(n.emit("beforeTransitionStart",t,r),n.emit("transitionEnd"))):(n.setTransition(t),n.setTranslate(c),s&&(n.emit("beforeTransitionStart",t,r),n.emit("transitionStart")),n.animating||(n.animating=!0,n.onTranslateToWrapperTransitionEnd||(n.onTranslateToWrapperTransitionEnd=function(e){n&&!n.destroyed&&e.target===this&&(n.wrapperEl.removeEventListener("transitionend",n.onTranslateToWrapperTransitionEnd),n.onTranslateToWrapperTransitionEnd=null,delete n.onTranslateToWrapperTransitionEnd,n.animating=!1,s&&n.emit("transitionEnd"))}),n.wrapperEl.addEventListener("transitionend",n.onTranslateToWrapperTransitionEnd))),!0}},transition:{setTransition:function(e,t){const s=this;s.params.cssMode||(s.wrapperEl.style.transitionDuration=`${e}ms`,s.wrapperEl.style.transitionDelay=0===e?"0ms":""),s.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);const s=this,{params:i}=s;i.cssMode||(i.autoHeight&&s.updateAutoHeight(),_({swiper:s,runCallbacks:e,direction:t,step:"Start"}))},transitionEnd:function(e,t){void 0===e&&(e=!0);const s=this,{params:i}=s;s.animating=!1,i.cssMode||(s.setTransition(0),_({swiper:s,runCallbacks:e,direction:t,step:"End"}))}},slide:$,loop:V,grabCursor:{setGrabCursor:function(e){const t=this;if(!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)return;const s="container"===t.params.touchEventsTarget?t.el:t.wrapperEl;t.isElement&&(t.__preventObserver__=!0),s.style.cursor="move",s.style.cursor=e?"grabbing":"grab",t.isElement&&requestAnimationFrame((()=>{t.__preventObserver__=!1}))},unsetGrabCursor:function(){const e=this;e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.isElement&&(e.__preventObserver__=!0),e["container"===e.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="",e.isElement&&requestAnimationFrame((()=>{e.__preventObserver__=!1})))}},events:{attachEvents:function(){const e=this,{params:t}=e;e.onTouchStart=N.bind(e),e.onTouchMove=H.bind(e),e.onTouchEnd=R.bind(e),e.onDocumentTouchStart=X.bind(e),t.cssMode&&(e.onScroll=W.bind(e)),e.onClick=q.bind(e),e.onLoad=Y.bind(e),U(e,"on")},detachEvents:function(){U(this,"off")}},breakpoints:{setBreakpoint:function(){const e=this,{realIndex:t,initialized:s,params:i,el:r}=e,n=i.breakpoints;if(!n||n&&0===Object.keys(n).length)return;const a=o(),l="window"!==i.breakpointsBase&&i.breakpointsBase?"container":i.breakpointsBase,d=["window","container"].includes(i.breakpointsBase)||!i.breakpointsBase?e.el:a.querySelector(i.breakpointsBase),c=e.getBreakpoint(n,l,d);if(!c||e.currentBreakpoint===c)return;const p=(c in n?n[c]:void 0)||e.originalParams,u=K(e,i),m=K(e,p),f=e.params.grabCursor,g=p.grabCursor,v=i.enabled;u&&!m?(r.classList.remove(`${i.containerModifierClass}grid`,`${i.containerModifierClass}grid-column`),e.emitContainerClasses()):!u&&m&&(r.classList.add(`${i.containerModifierClass}grid`),(p.grid.fill&&"column"===p.grid.fill||!p.grid.fill&&"column"===i.grid.fill)&&r.classList.add(`${i.containerModifierClass}grid-column`),e.emitContainerClasses()),f&&!g?e.unsetGrabCursor():!f&&g&&e.setGrabCursor(),["navigation","pagination","scrollbar"].forEach((t=>{if(void 0===p[t])return;const s=i[t]&&i[t].enabled,r=p[t]&&p[t].enabled;s&&!r&&e[t].disable(),!s&&r&&e[t].enable()}));const w=p.direction&&p.direction!==i.direction,b=i.loop&&(p.slidesPerView!==i.slidesPerView||w),S=i.loop;w&&s&&e.changeDirection(),h(e.params,p);const T=e.params.enabled,y=e.params.loop;Object.assign(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),v&&!T?e.disable():!v&&T&&e.enable(),e.currentBreakpoint=c,e.emit("_beforeBreakpoint",p),s&&(b?(e.loopDestroy(),e.loopCreate(t),e.updateSlides()):!S&&y?(e.loopCreate(t),e.updateSlides()):S&&!y&&e.loopDestroy()),e.emit("breakpoint",p)},getBreakpoint:function(e,t,s){if(void 0===t&&(t="window"),!e||"container"===t&&!s)return;let i=!1;const r=c(),n="window"===t?r.innerHeight:s.clientHeight,a=Object.keys(e).map((e=>{if("string"==typeof e&&0===e.indexOf("@")){const t=parseFloat(e.substr(1));return{value:n*t,point:e}}return{value:e,point:e}}));a.sort(((e,t)=>parseInt(e.value,10)-parseInt(t.value,10)));for(let e=0;e<a.length;e+=1){const{point:n,value:l}=a[e];"window"===t?r.matchMedia(`(min-width: ${l}px)`).matches&&(i=n):l<=s.clientWidth&&(i=n)}return i||"max"}},checkOverflow:{checkOverflow:function(){const e=this,{isLocked:t,params:s}=e,{slidesOffsetBefore:i}=s;if(i){const t=e.slides.length-1,s=e.slidesGrid[t]+e.slidesSizesGrid[t]+2*i;e.isLocked=e.size>s}else e.isLocked=1===e.snapGrid.length;!0===s.allowSlideNext&&(e.allowSlideNext=!e.isLocked),!0===s.allowSlidePrev&&(e.allowSlidePrev=!e.isLocked),t&&t!==e.isLocked&&(e.isEnd=!1),t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock")}},classes:{addClasses:function(){const e=this,{classNames:t,params:s,rtl:i,el:r,device:n}=e,a=function(e,t){const s=[];return e.forEach((e=>{"object"==typeof e?Object.keys(e).forEach((i=>{e[i]&&s.push(t+i)})):"string"==typeof e&&s.push(t+e)})),s}(["initialized",s.direction,{"free-mode":e.params.freeMode&&s.freeMode.enabled},{autoheight:s.autoHeight},{rtl:i},{grid:s.grid&&s.grid.rows>1},{"grid-column":s.grid&&s.grid.rows>1&&"column"===s.grid.fill},{android:n.android},{ios:n.ios},{"css-mode":s.cssMode},{centered:s.cssMode&&s.centeredSlides},{"watch-progress":s.watchSlidesProgress}],s.containerModifierClass);t.push(...a),r.classList.add(...t),e.emitContainerClasses()},removeClasses:function(){const{el:e,classNames:t}=this;e&&"string"!=typeof e&&(e.classList.remove(...t),this.emitContainerClasses())}}},ee={};class te{constructor(){let e,t;for(var s=arguments.length,i=new Array(s),r=0;r<s;r++)i[r]=arguments[r];1===i.length&&i[0].constructor&&"Object"===Object.prototype.toString.call(i[0]).slice(8,-1)?t=i[0]:[e,t]=i,t||(t={}),t=h({},t),e&&!t.el&&(t.el=e);const n=o();if(t.el&&"string"==typeof t.el&&n.querySelectorAll(t.el).length>1){const e=[];return n.querySelectorAll(t.el).forEach((s=>{const i=h({},t,{el:s});e.push(new te(i))})),e}const a=this;a.__swiper__=!0,a.support=L(),a.device=k({userAgent:t.userAgent}),a.browser=(P||(P=function(){const e=c(),t=k();let s=!1;function i(){const t=e.navigator.userAgent.toLowerCase();return t.indexOf("safari")>=0&&t.indexOf("chrome")<0&&t.indexOf("android")<0}if(i()){const t=String(e.navigator.userAgent);if(t.includes("Version/")){const[e,i]=t.split("Version/")[1].split(" ")[0].split(".").map((e=>Number(e)));s=e<16||16===e&&i<2}}const r=/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent),n=i();return{isSafari:s||n,needPerspectiveFix:s,need3dFix:n||r&&t.ios,isWebView:r}}()),P),a.eventsListeners={},a.eventsAnyListeners=[],a.modules=[...a.__modules__],t.modules&&Array.isArray(t.modules)&&a.modules.push(...t.modules);const l={};a.modules.forEach((e=>{e({params:t,swiper:a,extendParams:Q(t,l),on:a.on.bind(a),once:a.once.bind(a),off:a.off.bind(a),emit:a.emit.bind(a)})}));const d=h({},J,l);return a.params=h({},d,ee,t),a.originalParams=h({},a.params),a.passedParams=h({},t),a.params&&a.params.on&&Object.keys(a.params.on).forEach((e=>{a.on(e,a.params.on[e])})),a.params&&a.params.onAny&&a.onAny(a.params.onAny),Object.assign(a,{enabled:a.params.enabled,el:e,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal(){return"horizontal"===a.params.direction},isVertical(){return"vertical"===a.params.direction},activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:a.params.allowSlideNext,allowSlidePrev:a.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:a.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:a.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),a.emit("_swiper"),a.params.init&&a.init(),a}getDirectionLabel(e){return this.isHorizontal()?e:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[e]}getSlideIndex(e){const{slidesEl:t,params:s}=this,i=T(v(t,`.${s.slideClass}, swiper-slide`)[0]);return T(e)-i}getSlideIndexByData(e){return this.getSlideIndex(this.slides.find((t=>1*t.getAttribute("data-swiper-slide-index")===e)))}recalcSlides(){const{slidesEl:e,params:t}=this;this.slides=v(e,`.${t.slideClass}, swiper-slide`)}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,t){const s=this;e=Math.min(Math.max(e,0),1);const i=s.minTranslate(),r=(s.maxTranslate()-i)*e+i;s.translateTo(r,void 0===t?0:t),s.updateActiveIndex(),s.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=e.el.className.split(" ").filter((t=>0===t.indexOf("swiper")||0===t.indexOf(e.params.containerModifierClass)));e.emit("_containerClasses",t.join(" "))}getSlideClasses(e){const t=this;return t.destroyed?"":e.className.split(" ").filter((e=>0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass))).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=[];e.slides.forEach((s=>{const i=e.getSlideClasses(s);t.push({slideEl:s,classNames:i}),e.emit("_slideClass",s,i)})),e.emit("_slideClasses",t)}slidesPerViewDynamic(e,t){void 0===e&&(e="current"),void 0===t&&(t=!1);const{params:s,slides:i,slidesGrid:r,slidesSizesGrid:n,size:a,activeIndex:l}=this;let o=1;if("number"==typeof s.slidesPerView)return s.slidesPerView;if(s.centeredSlides){let e,t=i[l]?Math.ceil(i[l].swiperSlideSize):0;for(let s=l+1;s<i.length;s+=1)i[s]&&!e&&(t+=Math.ceil(i[s].swiperSlideSize),o+=1,t>a&&(e=!0));for(let s=l-1;s>=0;s-=1)i[s]&&!e&&(t+=i[s].swiperSlideSize,o+=1,t>a&&(e=!0))}else if("current"===e)for(let e=l+1;e<i.length;e+=1)(t?r[e]+n[e]-r[l]<a:r[e]-r[l]<a)&&(o+=1);else for(let e=l-1;e>=0;e-=1)r[l]-r[e]<a&&(o+=1);return o}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:s}=e;function i(){const t=e.rtlTranslate?-1*e.translate:e.translate,s=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(s),e.updateActiveIndex(),e.updateSlidesClasses()}let r;if(s.breakpoints&&e.setBreakpoint(),[...e.el.querySelectorAll('[loading="lazy"]')].forEach((t=>{t.complete&&z(e,t)})),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),s.freeMode&&s.freeMode.enabled&&!s.cssMode)i(),s.autoHeight&&e.updateAutoHeight();else{if(("auto"===s.slidesPerView||s.slidesPerView>1)&&e.isEnd&&!s.centeredSlides){const t=e.virtual&&s.virtual.enabled?e.virtual.slides:e.slides;r=e.slideTo(t.length-1,0,!1,!0)}else r=e.slideTo(e.activeIndex,0,!1,!0);r||i()}s.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,t){void 0===t&&(t=!0);const s=this,i=s.params.direction;return e||(e="horizontal"===i?"vertical":"horizontal"),e===i||"horizontal"!==e&&"vertical"!==e||(s.el.classList.remove(`${s.params.containerModifierClass}${i}`),s.el.classList.add(`${s.params.containerModifierClass}${e}`),s.emitContainerClasses(),s.params.direction=e,s.slides.forEach((t=>{"vertical"===e?t.style.width="":t.style.height=""})),s.emit("changeDirection"),t&&s.update()),s}changeLanguageDirection(e){const t=this;t.rtl&&"rtl"===e||!t.rtl&&"ltr"===e||(t.rtl="rtl"===e,t.rtlTranslate="horizontal"===t.params.direction&&t.rtl,t.rtl?(t.el.classList.add(`${t.params.containerModifierClass}rtl`),t.el.dir="rtl"):(t.el.classList.remove(`${t.params.containerModifierClass}rtl`),t.el.dir="ltr"),t.update())}mount(e){const t=this;if(t.mounted)return!0;let s=e||t.params.el;if("string"==typeof s&&(s=document.querySelector(s)),!s)return!1;s.swiper=t,s.parentNode&&s.parentNode.host&&s.parentNode.host.nodeName===t.params.swiperElementNodeName.toUpperCase()&&(t.isElement=!0);const i=()=>`.${(t.params.wrapperClass||"").trim().split(" ").join(".")}`;let r=s&&s.shadowRoot&&s.shadowRoot.querySelector?s.shadowRoot.querySelector(i()):v(s,i())[0];return!r&&t.params.createElements&&(r=b("div",t.params.wrapperClass),s.append(r),v(s,`.${t.params.slideClass}`).forEach((e=>{r.append(e)}))),Object.assign(t,{el:s,wrapperEl:r,slidesEl:t.isElement&&!s.parentNode.host.slideSlots?s.parentNode.host:r,hostEl:t.isElement?s.parentNode.host:s,mounted:!0,rtl:"rtl"===s.dir.toLowerCase()||"rtl"===S(s,"direction"),rtlTranslate:"horizontal"===t.params.direction&&("rtl"===s.dir.toLowerCase()||"rtl"===S(s,"direction")),wrongRTL:"-webkit-box"===S(r,"display")}),!0}init(e){const t=this;if(t.initialized)return t;if(!1===t.mount(e))return t;t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.enabled&&t.setGrabCursor(),t.params.loop&&t.virtual&&t.params.virtual.enabled?t.slideTo(t.params.initialSlide+t.virtual.slidesBefore,0,t.params.runCallbacksOnInit,!1,!0):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit,!1,!0),t.params.loop&&t.loopCreate(),t.attachEvents();const s=[...t.el.querySelectorAll('[loading="lazy"]')];return t.isElement&&s.push(...t.hostEl.querySelectorAll('[loading="lazy"]')),s.forEach((e=>{e.complete?z(t,e):e.addEventListener("load",(e=>{z(t,e.target)}))})),D(t),t.initialized=!0,D(t),t.emit("init"),t.emit("afterInit"),t}destroy(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);const s=this,{params:i,el:r,wrapperEl:n,slides:a}=s;return void 0===s.params||s.destroyed||(s.emit("beforeDestroy"),s.initialized=!1,s.detachEvents(),i.loop&&s.loopDestroy(),t&&(s.removeClasses(),r&&"string"!=typeof r&&r.removeAttribute("style"),n&&n.removeAttribute("style"),a&&a.length&&a.forEach((e=>{e.classList.remove(i.slideVisibleClass,i.slideFullyVisibleClass,i.slideActiveClass,i.slideNextClass,i.slidePrevClass),e.removeAttribute("style"),e.removeAttribute("data-swiper-slide-index")}))),s.emit("destroy"),Object.keys(s.eventsListeners).forEach((e=>{s.off(e)})),!1!==e&&(s.el&&"string"!=typeof s.el&&(s.el.swiper=null),function(e){const t=e;Object.keys(t).forEach((e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}}))}(s)),s.destroyed=!0),null}static extendDefaults(e){h(ee,e)}static get extendedDefaults(){return ee}static get defaults(){return J}static installModule(e){te.prototype.__modules__||(te.prototype.__modules__=[]);const t=te.prototype.__modules__;"function"==typeof e&&t.indexOf(e)<0&&t.push(e)}static use(e){return Array.isArray(e)?(e.forEach((e=>te.installModule(e))),te):(te.installModule(e),te)}}function se(e,t,s,i){return e.params.createElements&&Object.keys(i).forEach((r=>{if(!s[r]&&!0===s.auto){let n=v(e.el,`.${i[r]}`)[0];n||(n=b("div",i[r]),n.className=i[r],e.el.append(n)),s[r]=n,t[r]=n}})),s}function ie(e){return void 0===e&&(e=""),`.${e.trim().replace(/([\.:!+\/])/g,"\\$1").replace(/ /g,".")}`}Object.keys(Z).forEach((e=>{Object.keys(Z[e]).forEach((t=>{te.prototype[t]=Z[e][t]}))})),te.use([function(e){let{swiper:t,on:s,emit:i}=e;const r=c();let n=null,a=null;const l=()=>{t&&!t.destroyed&&t.initialized&&(i("beforeResize"),i("resize"))},o=()=>{t&&!t.destroyed&&t.initialized&&i("orientationchange")};s("init",(()=>{t.params.resizeObserver&&void 0!==r.ResizeObserver?t&&!t.destroyed&&t.initialized&&(n=new ResizeObserver((e=>{a=r.requestAnimationFrame((()=>{const{width:s,height:i}=t;let r=s,n=i;e.forEach((e=>{let{contentBoxSize:s,contentRect:i,target:a}=e;a&&a!==t.el||(r=i?i.width:(s[0]||s).inlineSize,n=i?i.height:(s[0]||s).blockSize)})),r===s&&n===i||l()}))})),n.observe(t.el)):(r.addEventListener("resize",l),r.addEventListener("orientationchange",o))})),s("destroy",(()=>{a&&r.cancelAnimationFrame(a),n&&n.unobserve&&t.el&&(n.unobserve(t.el),n=null),r.removeEventListener("resize",l),r.removeEventListener("orientationchange",o)}))},function(e){let{swiper:t,extendParams:s,on:i,emit:r}=e;const n=[],a=c(),l=function(e,s){void 0===s&&(s={});const i=new(a.MutationObserver||a.WebkitMutationObserver)((e=>{if(t.__preventObserver__)return;if(1===e.length)return void r("observerUpdate",e[0]);const s=function(){r("observerUpdate",e[0])};a.requestAnimationFrame?a.requestAnimationFrame(s):a.setTimeout(s,0)}));i.observe(e,{attributes:void 0===s.attributes||s.attributes,childList:t.isElement||(void 0===s.childList||s).childList,characterData:void 0===s.characterData||s.characterData}),n.push(i)};s({observer:!1,observeParents:!1,observeSlideChildren:!1}),i("init",(()=>{if(t.params.observer){if(t.params.observeParents){const e=y(t.hostEl);for(let t=0;t<e.length;t+=1)l(e[t])}l(t.hostEl,{childList:t.params.observeSlideChildren}),l(t.wrapperEl,{attributes:!1})}})),i("destroy",(()=>{n.forEach((e=>{e.disconnect()})),n.splice(0,n.length)}))}]),new te(".hero-slider",{modules:[function(e){let{swiper:t,extendParams:s,on:i,emit:r}=e;function n(e){let s;return e&&"string"==typeof e&&t.isElement&&(s=t.el.querySelector(e)||t.hostEl.querySelector(e),s)?s:(e&&("string"==typeof e&&(s=[...document.querySelectorAll(e)]),t.params.uniqueNavElements&&"string"==typeof e&&s&&s.length>1&&1===t.el.querySelectorAll(e).length?s=t.el.querySelector(e):s&&1===s.length&&(s=s[0])),e&&!s?e:s)}function a(e,s){const i=t.params.navigation;(e=x(e)).forEach((e=>{e&&(e.classList[s?"add":"remove"](...i.disabledClass.split(" ")),"BUTTON"===e.tagName&&(e.disabled=s),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](i.lockClass))}))}function l(){const{nextEl:e,prevEl:s}=t.navigation;if(t.params.loop)return a(s,!1),void a(e,!1);a(s,t.isBeginning&&!t.params.rewind),a(e,t.isEnd&&!t.params.rewind)}function o(e){e.preventDefault(),(!t.isBeginning||t.params.loop||t.params.rewind)&&(t.slidePrev(),r("navigationPrev"))}function d(e){e.preventDefault(),(!t.isEnd||t.params.loop||t.params.rewind)&&(t.slideNext(),r("navigationNext"))}function c(){const e=t.params.navigation;if(t.params.navigation=se(t,t.originalParams.navigation,t.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!e.nextEl&&!e.prevEl)return;let s=n(e.nextEl),i=n(e.prevEl);Object.assign(t.navigation,{nextEl:s,prevEl:i}),s=x(s),i=x(i);const r=(s,i)=>{s&&s.addEventListener("click","next"===i?d:o),!t.enabled&&s&&s.classList.add(...e.lockClass.split(" "))};s.forEach((e=>r(e,"next"))),i.forEach((e=>r(e,"prev")))}function p(){let{nextEl:e,prevEl:s}=t.navigation;e=x(e),s=x(s);const i=(e,s)=>{e.removeEventListener("click","next"===s?d:o),e.classList.remove(...t.params.navigation.disabledClass.split(" "))};e.forEach((e=>i(e,"next"))),s.forEach((e=>i(e,"prev")))}s({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),t.navigation={nextEl:null,prevEl:null},i("init",(()=>{!1===t.params.navigation.enabled?u():(c(),l())})),i("toEdge fromEdge lock unlock",(()=>{l()})),i("destroy",(()=>{p()})),i("enable disable",(()=>{let{nextEl:e,prevEl:s}=t.navigation;e=x(e),s=x(s),t.enabled?l():[...e,...s].filter((e=>!!e)).forEach((e=>e.classList.add(t.params.navigation.lockClass)))})),i("click",((e,s)=>{let{nextEl:i,prevEl:n}=t.navigation;i=x(i),n=x(n);const a=s.target;let l=n.includes(a)||i.includes(a);if(t.isElement&&!l){const e=s.path||s.composedPath&&s.composedPath();e&&(l=e.find((e=>i.includes(e)||n.includes(e))))}if(t.params.navigation.hideOnClick&&!l){if(t.pagination&&t.params.pagination&&t.params.pagination.clickable&&(t.pagination.el===a||t.pagination.el.contains(a)))return;let e;i.length?e=i[0].classList.contains(t.params.navigation.hiddenClass):n.length&&(e=n[0].classList.contains(t.params.navigation.hiddenClass)),r(!0===e?"navigationShow":"navigationHide"),[...i,...n].filter((e=>!!e)).forEach((e=>e.classList.toggle(t.params.navigation.hiddenClass)))}}));const u=()=>{t.el.classList.add(...t.params.navigation.navigationDisabledClass.split(" ")),p()};Object.assign(t.navigation,{enable:()=>{t.el.classList.remove(...t.params.navigation.navigationDisabledClass.split(" ")),c(),l()},disable:u,update:l,init:c,destroy:p})},function(e){let{swiper:t,extendParams:s,on:i,emit:r}=e;const n="swiper-pagination";let a;s({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:e=>e,formatFractionTotal:e=>e,bulletClass:`${n}-bullet`,bulletActiveClass:`${n}-bullet-active`,modifierClass:`${n}-`,currentClass:`${n}-current`,totalClass:`${n}-total`,hiddenClass:`${n}-hidden`,progressbarFillClass:`${n}-progressbar-fill`,progressbarOppositeClass:`${n}-progressbar-opposite`,clickableClass:`${n}-clickable`,lockClass:`${n}-lock`,horizontalClass:`${n}-horizontal`,verticalClass:`${n}-vertical`,paginationDisabledClass:`${n}-disabled`}}),t.pagination={el:null,bullets:[]};let l=0;function o(){return!t.params.pagination.el||!t.pagination.el||Array.isArray(t.pagination.el)&&0===t.pagination.el.length}function d(e,s){const{bulletActiveClass:i}=t.params.pagination;e&&(e=e[("prev"===s?"previous":"next")+"ElementSibling"])&&(e.classList.add(`${i}-${s}`),(e=e[("prev"===s?"previous":"next")+"ElementSibling"])&&e.classList.add(`${i}-${s}-${s}`))}function c(e){const s=e.target.closest(ie(t.params.pagination.bulletClass));if(!s)return;e.preventDefault();const i=T(s)*t.params.slidesPerGroup;if(t.params.loop){if(t.realIndex===i)return;const e=(r=t.realIndex,n=i,(n%=a=t.slides.length)==1+(r%=a)?"next":n===r-1?"previous":void 0);"next"===e?t.slideNext():"previous"===e?t.slidePrev():t.slideToLoop(i)}else t.slideTo(i);var r,n,a}function p(){const e=t.rtl,s=t.params.pagination;if(o())return;let i,n,c=t.pagination.el;c=x(c);const p=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.slides.length,u=t.params.loop?Math.ceil(p/t.params.slidesPerGroup):t.snapGrid.length;if(t.params.loop?(n=t.previousRealIndex||0,i=t.params.slidesPerGroup>1?Math.floor(t.realIndex/t.params.slidesPerGroup):t.realIndex):void 0!==t.snapIndex?(i=t.snapIndex,n=t.previousSnapIndex):(n=t.previousIndex||0,i=t.activeIndex||0),"bullets"===s.type&&t.pagination.bullets&&t.pagination.bullets.length>0){const r=t.pagination.bullets;let o,p,u;if(s.dynamicBullets&&(a=E(r[0],t.isHorizontal()?"width":"height",!0),c.forEach((e=>{e.style[t.isHorizontal()?"width":"height"]=a*(s.dynamicMainBullets+4)+"px"})),s.dynamicMainBullets>1&&void 0!==n&&(l+=i-(n||0),l>s.dynamicMainBullets-1?l=s.dynamicMainBullets-1:l<0&&(l=0)),o=Math.max(i-l,0),p=o+(Math.min(r.length,s.dynamicMainBullets)-1),u=(p+o)/2),r.forEach((e=>{const t=[...["","-next","-next-next","-prev","-prev-prev","-main"].map((e=>`${s.bulletActiveClass}${e}`))].map((e=>"string"==typeof e&&e.includes(" ")?e.split(" "):e)).flat();e.classList.remove(...t)})),c.length>1)r.forEach((e=>{const r=T(e);r===i?e.classList.add(...s.bulletActiveClass.split(" ")):t.isElement&&e.setAttribute("part","bullet"),s.dynamicBullets&&(r>=o&&r<=p&&e.classList.add(...`${s.bulletActiveClass}-main`.split(" ")),r===o&&d(e,"prev"),r===p&&d(e,"next"))}));else{const e=r[i];if(e&&e.classList.add(...s.bulletActiveClass.split(" ")),t.isElement&&r.forEach(((e,t)=>{e.setAttribute("part",t===i?"bullet-active":"bullet")})),s.dynamicBullets){const e=r[o],t=r[p];for(let e=o;e<=p;e+=1)r[e]&&r[e].classList.add(...`${s.bulletActiveClass}-main`.split(" "));d(e,"prev"),d(t,"next")}}if(s.dynamicBullets){const i=Math.min(r.length,s.dynamicMainBullets+4),n=(a*i-a)/2-u*a,l=e?"right":"left";r.forEach((e=>{e.style[t.isHorizontal()?l:"top"]=`${n}px`}))}}c.forEach(((e,n)=>{if("fraction"===s.type&&(e.querySelectorAll(ie(s.currentClass)).forEach((e=>{e.textContent=s.formatFractionCurrent(i+1)})),e.querySelectorAll(ie(s.totalClass)).forEach((e=>{e.textContent=s.formatFractionTotal(u)}))),"progressbar"===s.type){let r;r=s.progressbarOpposite?t.isHorizontal()?"vertical":"horizontal":t.isHorizontal()?"horizontal":"vertical";const n=(i+1)/u;let a=1,l=1;"horizontal"===r?a=n:l=n,e.querySelectorAll(ie(s.progressbarFillClass)).forEach((e=>{e.style.transform=`translate3d(0,0,0) scaleX(${a}) scaleY(${l})`,e.style.transitionDuration=`${t.params.speed}ms`}))}"custom"===s.type&&s.renderCustom?(e.innerHTML=s.renderCustom(t,i+1,u),0===n&&r("paginationRender",e)):(0===n&&r("paginationRender",e),r("paginationUpdate",e)),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](s.lockClass)}))}function u(){const e=t.params.pagination;if(o())return;const s=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.grid&&t.params.grid.rows>1?t.slides.length/Math.ceil(t.params.grid.rows):t.slides.length;let i=t.pagination.el;i=x(i);let n="";if("bullets"===e.type){let i=t.params.loop?Math.ceil(s/t.params.slidesPerGroup):t.snapGrid.length;t.params.freeMode&&t.params.freeMode.enabled&&i>s&&(i=s);for(let s=0;s<i;s+=1)e.renderBullet?n+=e.renderBullet.call(t,s,e.bulletClass):n+=`<${e.bulletElement} ${t.isElement?'part="bullet"':""} class="${e.bulletClass}"></${e.bulletElement}>`}"fraction"===e.type&&(n=e.renderFraction?e.renderFraction.call(t,e.currentClass,e.totalClass):`<span class="${e.currentClass}"></span> / <span class="${e.totalClass}"></span>`),"progressbar"===e.type&&(n=e.renderProgressbar?e.renderProgressbar.call(t,e.progressbarFillClass):`<span class="${e.progressbarFillClass}"></span>`),t.pagination.bullets=[],i.forEach((s=>{"custom"!==e.type&&(s.innerHTML=n||""),"bullets"===e.type&&t.pagination.bullets.push(...s.querySelectorAll(ie(e.bulletClass)))})),"custom"!==e.type&&r("paginationRender",i[0])}function m(){t.params.pagination=se(t,t.originalParams.pagination,t.params.pagination,{el:"swiper-pagination"});const e=t.params.pagination;if(!e.el)return;let s;"string"==typeof e.el&&t.isElement&&(s=t.el.querySelector(e.el)),s||"string"!=typeof e.el||(s=[...document.querySelectorAll(e.el)]),s||(s=e.el),s&&0!==s.length&&(t.params.uniqueNavElements&&"string"==typeof e.el&&Array.isArray(s)&&s.length>1&&(s=[...t.el.querySelectorAll(e.el)],s.length>1&&(s=s.find((e=>y(e,".swiper")[0]===t.el)))),Array.isArray(s)&&1===s.length&&(s=s[0]),Object.assign(t.pagination,{el:s}),s=x(s),s.forEach((s=>{"bullets"===e.type&&e.clickable&&s.classList.add(...(e.clickableClass||"").split(" ")),s.classList.add(e.modifierClass+e.type),s.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass),"bullets"===e.type&&e.dynamicBullets&&(s.classList.add(`${e.modifierClass}${e.type}-dynamic`),l=0,e.dynamicMainBullets<1&&(e.dynamicMainBullets=1)),"progressbar"===e.type&&e.progressbarOpposite&&s.classList.add(e.progressbarOppositeClass),e.clickable&&s.addEventListener("click",c),t.enabled||s.classList.add(e.lockClass)})))}function h(){const e=t.params.pagination;if(o())return;let s=t.pagination.el;s&&(s=x(s),s.forEach((s=>{s.classList.remove(e.hiddenClass),s.classList.remove(e.modifierClass+e.type),s.classList.remove(t.isHorizontal()?e.horizontalClass:e.verticalClass),e.clickable&&(s.classList.remove(...(e.clickableClass||"").split(" ")),s.removeEventListener("click",c))}))),t.pagination.bullets&&t.pagination.bullets.forEach((t=>t.classList.remove(...e.bulletActiveClass.split(" "))))}i("changeDirection",(()=>{if(!t.pagination||!t.pagination.el)return;const e=t.params.pagination;let{el:s}=t.pagination;s=x(s),s.forEach((s=>{s.classList.remove(e.horizontalClass,e.verticalClass),s.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass)}))})),i("init",(()=>{!1===t.params.pagination.enabled?f():(m(),u(),p())})),i("activeIndexChange",(()=>{void 0===t.snapIndex&&p()})),i("snapIndexChange",(()=>{p()})),i("snapGridLengthChange",(()=>{u(),p()})),i("destroy",(()=>{h()})),i("enable disable",(()=>{let{el:e}=t.pagination;e&&(e=x(e),e.forEach((e=>e.classList[t.enabled?"remove":"add"](t.params.pagination.lockClass))))})),i("lock unlock",(()=>{p()})),i("click",((e,s)=>{const i=s.target,n=x(t.pagination.el);if(t.params.pagination.el&&t.params.pagination.hideOnClick&&n&&n.length>0&&!i.classList.contains(t.params.pagination.bulletClass)){if(t.navigation&&(t.navigation.nextEl&&i===t.navigation.nextEl||t.navigation.prevEl&&i===t.navigation.prevEl))return;const e=n[0].classList.contains(t.params.pagination.hiddenClass);r(!0===e?"paginationShow":"paginationHide"),n.forEach((e=>e.classList.toggle(t.params.pagination.hiddenClass)))}}));const f=()=>{t.el.classList.add(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=x(e),e.forEach((e=>e.classList.add(t.params.pagination.paginationDisabledClass)))),h()};Object.assign(t.pagination,{enable:()=>{t.el.classList.remove(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=x(e),e.forEach((e=>e.classList.remove(t.params.pagination.paginationDisabledClass)))),m(),u(),p()},disable:f,render:u,update:p,init:m,destroy:h})}],loop:!0,pagination:{el:".swiper-pagination",clickable:!0,renderBullet:function(e,t){return'<span class="'+t+'">'+(e+1)+"</span>"}},navigation:{nextEl:".swiper-button-next",prevEl:".swiper-button-prev"}}),e.addEventListener("click",(()=>{t.classList.toggle("line--hide"),e.classList.toggle("burger--transform"),s.classList.toggle("nav--hide"),i.classList.toggle("no-scroll")})),r.forEach((r=>{r.addEventListener("click",(()=>{t.classList.remove("line--hide"),e.classList.remove("burger--transform"),s.classList.remove("nav--hide"),i.classList.remove("no-scroll")}))}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QkFFdEVwTyxJQUNBcVEsSUFDQXZxQixHQUFRLEVBZVJpZSxVQUNBc00sU0FDQXZxQixTQUNBa2EsT0FDQStJLFdBRUosR0ZqY0NuakIsTUFBTSxFQUVONm1CLFdBQVksQ0FDWC93QixHQUFJLHFCQUNKZ3hCLFdBQVcsRUFDWE0sYUFBYyxTQUFVanFCLEVBQU9ZLEdBQzlCLE1BQU8sZ0JBQWtCQSxFQUFZLE1BQVFaLEVBQVEsR0FBSyxTQUMzRCxHQUlEa2IsV0FBWSxDQUNYQyxPQUFRLHNCQUNSQyxPQUFRLHlCTmRUeG9CLEVBQU9tQixpQkFBaUIsU0FBUyxLQUNoQ2hCLEVBQVcySSxVQUFVbXVCLE9BQU8sY0FDNUJqM0IsRUFBTzhJLFVBQVVtdUIsT0FBTyxxQkFDeEI3MkIsRUFBSTBJLFVBQVVtdUIsT0FBTyxhQUNyQjUyQixFQUFLeUksVUFBVW11QixPQUFPLFlBQVksSUFLbkMzMkIsRUFBUVMsU0FBUWdGLElBQ2ZBLEVBQUc1RSxpQkFBaUIsU0FBUyxLQUM1QmhCLEVBQVcySSxVQUFVb0YsT0FBTyxjQUM1QmxPLEVBQU84SSxVQUFVb0YsT0FBTyxxQkFDeEI5TixFQUFJMEksVUFBVW9GLE9BQU8sYUFDckI3TixFQUFLeUksVUFBVW9GLE9BQU8sWUFBWSxHQUNqQyxHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3VscC13cC0yMDI1Ly4vc3JjL2pzL2pzLWNvbXBvbmVudHMvYnVyZ2VyLnRzIiwid2VicGFjazovL2d1bHAtd3AtMjAyNS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL3Nzci13aW5kb3cuZXNtLm1qcyIsIndlYnBhY2s6Ly9ndWxwLXdwLTIwMjUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC91dGlscy5tanMiLCJ3ZWJwYWNrOi8vZ3VscC13cC0yMDI1Ly4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvc3dpcGVyLWNvcmUubWpzIiwid2VicGFjazovL2d1bHAtd3AtMjAyNS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2NyZWF0ZS1lbGVtZW50LWlmLW5vdC1kZWZpbmVkLm1qcyIsIndlYnBhY2s6Ly9ndWxwLXdwLTIwMjUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9jbGFzc2VzLXRvLXNlbGVjdG9yLm1qcyIsIndlYnBhY2s6Ly9ndWxwLXdwLTIwMjUvLi9zcmMvanMvbWFpbi50cyIsIndlYnBhY2s6Ly9ndWxwLXdwLTIwMjUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvbmF2aWdhdGlvbi5tanMiLCJ3ZWJwYWNrOi8vZ3VscC13cC0yMDI1Ly4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL3BhZ2luYXRpb24ubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGJ1cmdlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5idXJnZXInKTtcclxuY29uc3QgYnVyZ2VyTGluZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5idXJnZXJfX2xpbmUnKTtcclxuY29uc3QgbmF2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbmF2Jyk7XHJcbmNvbnN0IGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XHJcbmNvbnN0IG5hdkl0ZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdoZWFkZXIgbmF2IGxpJyk7XHJcblxyXG5leHBvcnQgY29uc3QgYnVyZ2VyT3BlbiA9ICgpOiB2b2lkID0+IHtcclxuXHRidXJnZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcblx0XHRidXJnZXJMaW5lLmNsYXNzTGlzdC50b2dnbGUoJ2xpbmUtLWhpZGUnKTtcclxuXHRcdGJ1cmdlci5jbGFzc0xpc3QudG9nZ2xlKCdidXJnZXItLXRyYW5zZm9ybScpO1xyXG5cdFx0bmF2LmNsYXNzTGlzdC50b2dnbGUoJ25hdi0taGlkZScpO1xyXG5cdFx0Ym9keS5jbGFzc0xpc3QudG9nZ2xlKCduby1zY3JvbGwnKTtcclxuXHR9KTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBidXJnZXJDbG9zZSA9ICgpOiB2b2lkID0+IHtcclxuXHRuYXZJdGVtLmZvckVhY2goZWwgPT4ge1xyXG5cdFx0ZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcblx0XHRcdGJ1cmdlckxpbmUuY2xhc3NMaXN0LnJlbW92ZSgnbGluZS0taGlkZScpO1xyXG5cdFx0XHRidXJnZXIuY2xhc3NMaXN0LnJlbW92ZSgnYnVyZ2VyLS10cmFuc2Zvcm0nKTtcclxuXHRcdFx0bmF2LmNsYXNzTGlzdC5yZW1vdmUoJ25hdi0taGlkZScpO1xyXG5cdFx0XHRib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ25vLXNjcm9sbCcpO1xyXG5cdFx0fSk7XHJcblx0fSk7XHJcbn07XHJcblxyXG4iLCIvKipcbiAqIFNTUiBXaW5kb3cgNC4wLjJcbiAqIEJldHRlciBoYW5kbGluZyBmb3Igd2luZG93IG9iamVjdCBpbiBTU1IgZW52aXJvbm1lbnRcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2xpbWl0czR3ZWIvc3NyLXdpbmRvd1xuICpcbiAqIENvcHlyaWdodCAyMDIxLCBWbGFkaW1pciBLaGFybGFtcGlkaVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVFxuICpcbiAqIFJlbGVhc2VkIG9uOiBEZWNlbWJlciAxMywgMjAyMVxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuZnVuY3Rpb24gaXNPYmplY3Qob2JqKSB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgJ2NvbnN0cnVjdG9yJyBpbiBvYmogJiYgb2JqLmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XG59XG5mdW5jdGlvbiBleHRlbmQodGFyZ2V0LCBzcmMpIHtcbiAgaWYgKHRhcmdldCA9PT0gdm9pZCAwKSB7XG4gICAgdGFyZ2V0ID0ge307XG4gIH1cbiAgaWYgKHNyYyA9PT0gdm9pZCAwKSB7XG4gICAgc3JjID0ge307XG4gIH1cbiAgT2JqZWN0LmtleXMoc3JjKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgaWYgKHR5cGVvZiB0YXJnZXRba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHRhcmdldFtrZXldID0gc3JjW2tleV07ZWxzZSBpZiAoaXNPYmplY3Qoc3JjW2tleV0pICYmIGlzT2JqZWN0KHRhcmdldFtrZXldKSAmJiBPYmplY3Qua2V5cyhzcmNba2V5XSkubGVuZ3RoID4gMCkge1xuICAgICAgZXh0ZW5kKHRhcmdldFtrZXldLCBzcmNba2V5XSk7XG4gICAgfVxuICB9KTtcbn1cbmNvbnN0IHNzckRvY3VtZW50ID0ge1xuICBib2R5OiB7fSxcbiAgYWRkRXZlbnRMaXN0ZW5lcigpIHt9LFxuICByZW1vdmVFdmVudExpc3RlbmVyKCkge30sXG4gIGFjdGl2ZUVsZW1lbnQ6IHtcbiAgICBibHVyKCkge30sXG4gICAgbm9kZU5hbWU6ICcnXG4gIH0sXG4gIHF1ZXJ5U2VsZWN0b3IoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIHF1ZXJ5U2VsZWN0b3JBbGwoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9LFxuICBnZXRFbGVtZW50QnlJZCgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgY3JlYXRlRXZlbnQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGluaXRFdmVudCgpIHt9XG4gICAgfTtcbiAgfSxcbiAgY3JlYXRlRWxlbWVudCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgY2hpbGROb2RlczogW10sXG4gICAgICBzdHlsZToge30sXG4gICAgICBzZXRBdHRyaWJ1dGUoKSB7fSxcbiAgICAgIGdldEVsZW1lbnRzQnlUYWdOYW1lKCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgY3JlYXRlRWxlbWVudE5TKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSxcbiAgaW1wb3J0Tm9kZSgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgbG9jYXRpb246IHtcbiAgICBoYXNoOiAnJyxcbiAgICBob3N0OiAnJyxcbiAgICBob3N0bmFtZTogJycsXG4gICAgaHJlZjogJycsXG4gICAgb3JpZ2luOiAnJyxcbiAgICBwYXRobmFtZTogJycsXG4gICAgcHJvdG9jb2w6ICcnLFxuICAgIHNlYXJjaDogJydcbiAgfVxufTtcbmZ1bmN0aW9uIGdldERvY3VtZW50KCkge1xuICBjb25zdCBkb2MgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQgOiB7fTtcbiAgZXh0ZW5kKGRvYywgc3NyRG9jdW1lbnQpO1xuICByZXR1cm4gZG9jO1xufVxuY29uc3Qgc3NyV2luZG93ID0ge1xuICBkb2N1bWVudDogc3NyRG9jdW1lbnQsXG4gIG5hdmlnYXRvcjoge1xuICAgIHVzZXJBZ2VudDogJydcbiAgfSxcbiAgbG9jYXRpb246IHtcbiAgICBoYXNoOiAnJyxcbiAgICBob3N0OiAnJyxcbiAgICBob3N0bmFtZTogJycsXG4gICAgaHJlZjogJycsXG4gICAgb3JpZ2luOiAnJyxcbiAgICBwYXRobmFtZTogJycsXG4gICAgcHJvdG9jb2w6ICcnLFxuICAgIHNlYXJjaDogJydcbiAgfSxcbiAgaGlzdG9yeToge1xuICAgIHJlcGxhY2VTdGF0ZSgpIHt9LFxuICAgIHB1c2hTdGF0ZSgpIHt9LFxuICAgIGdvKCkge30sXG4gICAgYmFjaygpIHt9XG4gIH0sXG4gIEN1c3RvbUV2ZW50OiBmdW5jdGlvbiBDdXN0b21FdmVudCgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgYWRkRXZlbnRMaXN0ZW5lcigpIHt9LFxuICByZW1vdmVFdmVudExpc3RlbmVyKCkge30sXG4gIGdldENvbXB1dGVkU3R5bGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGdldFByb3BlcnR5VmFsdWUoKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICBJbWFnZSgpIHt9LFxuICBEYXRlKCkge30sXG4gIHNjcmVlbjoge30sXG4gIHNldFRpbWVvdXQoKSB7fSxcbiAgY2xlYXJUaW1lb3V0KCkge30sXG4gIG1hdGNoTWVkaWEoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9LFxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2FsbGJhY2spIHtcbiAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBzZXRUaW1lb3V0KGNhbGxiYWNrLCAwKTtcbiAgfSxcbiAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoaWQpIHtcbiAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNsZWFyVGltZW91dChpZCk7XG4gIH1cbn07XG5mdW5jdGlvbiBnZXRXaW5kb3coKSB7XG4gIGNvbnN0IHdpbiA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDoge307XG4gIGV4dGVuZCh3aW4sIHNzcldpbmRvdyk7XG4gIHJldHVybiB3aW47XG59XG5cbmV4cG9ydCB7IGdldFdpbmRvdyBhcyBhLCBnZXREb2N1bWVudCBhcyBnIH07XG4iLCJpbXBvcnQgeyBhIGFzIGdldFdpbmRvdywgZyBhcyBnZXREb2N1bWVudCB9IGZyb20gJy4vc3NyLXdpbmRvdy5lc20ubWpzJztcblxuZnVuY3Rpb24gY2xhc3Nlc1RvVG9rZW5zKGNsYXNzZXMpIHtcbiAgaWYgKGNsYXNzZXMgPT09IHZvaWQgMCkge1xuICAgIGNsYXNzZXMgPSAnJztcbiAgfVxuICByZXR1cm4gY2xhc3Nlcy50cmltKCkuc3BsaXQoJyAnKS5maWx0ZXIoYyA9PiAhIWMudHJpbSgpKTtcbn1cblxuZnVuY3Rpb24gZGVsZXRlUHJvcHMob2JqKSB7XG4gIGNvbnN0IG9iamVjdCA9IG9iajtcbiAgT2JqZWN0LmtleXMob2JqZWN0KS5mb3JFYWNoKGtleSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIG9iamVjdFtrZXldID0gbnVsbDtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBubyBnZXR0ZXIgZm9yIG9iamVjdFxuICAgIH1cbiAgICB0cnkge1xuICAgICAgZGVsZXRlIG9iamVjdFtrZXldO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIHNvbWV0aGluZyBnb3Qgd3JvbmdcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gbmV4dFRpY2soY2FsbGJhY2ssIGRlbGF5KSB7XG4gIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7XG4gICAgZGVsYXkgPSAwO1xuICB9XG4gIHJldHVybiBzZXRUaW1lb3V0KGNhbGxiYWNrLCBkZWxheSk7XG59XG5mdW5jdGlvbiBub3coKSB7XG4gIHJldHVybiBEYXRlLm5vdygpO1xufVxuZnVuY3Rpb24gZ2V0Q29tcHV0ZWRTdHlsZShlbCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgbGV0IHN0eWxlO1xuICBpZiAod2luZG93LmdldENvbXB1dGVkU3R5bGUpIHtcbiAgICBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKTtcbiAgfVxuICBpZiAoIXN0eWxlICYmIGVsLmN1cnJlbnRTdHlsZSkge1xuICAgIHN0eWxlID0gZWwuY3VycmVudFN0eWxlO1xuICB9XG4gIGlmICghc3R5bGUpIHtcbiAgICBzdHlsZSA9IGVsLnN0eWxlO1xuICB9XG4gIHJldHVybiBzdHlsZTtcbn1cbmZ1bmN0aW9uIGdldFRyYW5zbGF0ZShlbCwgYXhpcykge1xuICBpZiAoYXhpcyA9PT0gdm9pZCAwKSB7XG4gICAgYXhpcyA9ICd4JztcbiAgfVxuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgbGV0IG1hdHJpeDtcbiAgbGV0IGN1clRyYW5zZm9ybTtcbiAgbGV0IHRyYW5zZm9ybU1hdHJpeDtcbiAgY29uc3QgY3VyU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgaWYgKHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgpIHtcbiAgICBjdXJUcmFuc2Zvcm0gPSBjdXJTdHlsZS50cmFuc2Zvcm0gfHwgY3VyU3R5bGUud2Via2l0VHJhbnNmb3JtO1xuICAgIGlmIChjdXJUcmFuc2Zvcm0uc3BsaXQoJywnKS5sZW5ndGggPiA2KSB7XG4gICAgICBjdXJUcmFuc2Zvcm0gPSBjdXJUcmFuc2Zvcm0uc3BsaXQoJywgJykubWFwKGEgPT4gYS5yZXBsYWNlKCcsJywgJy4nKSkuam9pbignLCAnKTtcbiAgICB9XG4gICAgLy8gU29tZSBvbGQgdmVyc2lvbnMgb2YgV2Via2l0IGNob2tlIHdoZW4gJ25vbmUnIGlzIHBhc3NlZDsgcGFzc1xuICAgIC8vIGVtcHR5IHN0cmluZyBpbnN0ZWFkIGluIHRoaXMgY2FzZVxuICAgIHRyYW5zZm9ybU1hdHJpeCA9IG5ldyB3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KGN1clRyYW5zZm9ybSA9PT0gJ25vbmUnID8gJycgOiBjdXJUcmFuc2Zvcm0pO1xuICB9IGVsc2Uge1xuICAgIHRyYW5zZm9ybU1hdHJpeCA9IGN1clN0eWxlLk1velRyYW5zZm9ybSB8fCBjdXJTdHlsZS5PVHJhbnNmb3JtIHx8IGN1clN0eWxlLk1zVHJhbnNmb3JtIHx8IGN1clN0eWxlLm1zVHJhbnNmb3JtIHx8IGN1clN0eWxlLnRyYW5zZm9ybSB8fCBjdXJTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCd0cmFuc2Zvcm0nKS5yZXBsYWNlKCd0cmFuc2xhdGUoJywgJ21hdHJpeCgxLCAwLCAwLCAxLCcpO1xuICAgIG1hdHJpeCA9IHRyYW5zZm9ybU1hdHJpeC50b1N0cmluZygpLnNwbGl0KCcsJyk7XG4gIH1cbiAgaWYgKGF4aXMgPT09ICd4Jykge1xuICAgIC8vIExhdGVzdCBDaHJvbWUgYW5kIHdlYmtpdHMgRml4XG4gICAgaWYgKHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgpIGN1clRyYW5zZm9ybSA9IHRyYW5zZm9ybU1hdHJpeC5tNDE7XG4gICAgLy8gQ3JhenkgSUUxMCBNYXRyaXhcbiAgICBlbHNlIGlmIChtYXRyaXgubGVuZ3RoID09PSAxNikgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbMTJdKTtcbiAgICAvLyBOb3JtYWwgQnJvd3NlcnNcbiAgICBlbHNlIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzRdKTtcbiAgfVxuICBpZiAoYXhpcyA9PT0gJ3knKSB7XG4gICAgLy8gTGF0ZXN0IENocm9tZSBhbmQgd2Via2l0cyBGaXhcbiAgICBpZiAod2luZG93LldlYktpdENTU01hdHJpeCkgY3VyVHJhbnNmb3JtID0gdHJhbnNmb3JtTWF0cml4Lm00MjtcbiAgICAvLyBDcmF6eSBJRTEwIE1hdHJpeFxuICAgIGVsc2UgaWYgKG1hdHJpeC5sZW5ndGggPT09IDE2KSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFsxM10pO1xuICAgIC8vIE5vcm1hbCBCcm93c2Vyc1xuICAgIGVsc2UgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbNV0pO1xuICB9XG4gIHJldHVybiBjdXJUcmFuc2Zvcm0gfHwgMDtcbn1cbmZ1bmN0aW9uIGlzT2JqZWN0KG8pIHtcbiAgcmV0dXJuIHR5cGVvZiBvID09PSAnb2JqZWN0JyAmJiBvICE9PSBudWxsICYmIG8uY29uc3RydWN0b3IgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKSA9PT0gJ09iamVjdCc7XG59XG5mdW5jdGlvbiBpc05vZGUobm9kZSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuSFRNTEVsZW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudDtcbiAgfVxuICByZXR1cm4gbm9kZSAmJiAobm9kZS5ub2RlVHlwZSA9PT0gMSB8fCBub2RlLm5vZGVUeXBlID09PSAxMSk7XG59XG5mdW5jdGlvbiBleHRlbmQoKSB7XG4gIGNvbnN0IHRvID0gT2JqZWN0KGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSk7XG4gIGNvbnN0IG5vRXh0ZW5kID0gWydfX3Byb3RvX18nLCAnY29uc3RydWN0b3InLCAncHJvdG90eXBlJ107XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgbmV4dFNvdXJjZSA9IGkgPCAwIHx8IGFyZ3VtZW50cy5sZW5ndGggPD0gaSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1tpXTtcbiAgICBpZiAobmV4dFNvdXJjZSAhPT0gdW5kZWZpbmVkICYmIG5leHRTb3VyY2UgIT09IG51bGwgJiYgIWlzTm9kZShuZXh0U291cmNlKSkge1xuICAgICAgY29uc3Qga2V5c0FycmF5ID0gT2JqZWN0LmtleXMoT2JqZWN0KG5leHRTb3VyY2UpKS5maWx0ZXIoa2V5ID0+IG5vRXh0ZW5kLmluZGV4T2Yoa2V5KSA8IDApO1xuICAgICAgZm9yIChsZXQgbmV4dEluZGV4ID0gMCwgbGVuID0ga2V5c0FycmF5Lmxlbmd0aDsgbmV4dEluZGV4IDwgbGVuOyBuZXh0SW5kZXggKz0gMSkge1xuICAgICAgICBjb25zdCBuZXh0S2V5ID0ga2V5c0FycmF5W25leHRJbmRleF07XG4gICAgICAgIGNvbnN0IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG5leHRTb3VyY2UsIG5leHRLZXkpO1xuICAgICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkICYmIGRlc2MuZW51bWVyYWJsZSkge1xuICAgICAgICAgIGlmIChpc09iamVjdCh0b1tuZXh0S2V5XSkgJiYgaXNPYmplY3QobmV4dFNvdXJjZVtuZXh0S2V5XSkpIHtcbiAgICAgICAgICAgIGlmIChuZXh0U291cmNlW25leHRLZXldLl9fc3dpcGVyX18pIHtcbiAgICAgICAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZXh0ZW5kKHRvW25leHRLZXldLCBuZXh0U291cmNlW25leHRLZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKCFpc09iamVjdCh0b1tuZXh0S2V5XSkgJiYgaXNPYmplY3QobmV4dFNvdXJjZVtuZXh0S2V5XSkpIHtcbiAgICAgICAgICAgIHRvW25leHRLZXldID0ge307XG4gICAgICAgICAgICBpZiAobmV4dFNvdXJjZVtuZXh0S2V5XS5fX3N3aXBlcl9fKSB7XG4gICAgICAgICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGV4dGVuZCh0b1tuZXh0S2V5XSwgbmV4dFNvdXJjZVtuZXh0S2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvO1xufVxuZnVuY3Rpb24gc2V0Q1NTUHJvcGVydHkoZWwsIHZhck5hbWUsIHZhclZhbHVlKSB7XG4gIGVsLnN0eWxlLnNldFByb3BlcnR5KHZhck5hbWUsIHZhclZhbHVlKTtcbn1cbmZ1bmN0aW9uIGFuaW1hdGVDU1NNb2RlU2Nyb2xsKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBzd2lwZXIsXG4gICAgdGFyZ2V0UG9zaXRpb24sXG4gICAgc2lkZVxuICB9ID0gX3JlZjtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IHN0YXJ0UG9zaXRpb24gPSAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgbGV0IHN0YXJ0VGltZSA9IG51bGw7XG4gIGxldCB0aW1lO1xuICBjb25zdCBkdXJhdGlvbiA9IHN3aXBlci5wYXJhbXMuc3BlZWQ7XG4gIHN3aXBlci53cmFwcGVyRWwuc3R5bGUuc2Nyb2xsU25hcFR5cGUgPSAnbm9uZSc7XG4gIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShzd2lwZXIuY3NzTW9kZUZyYW1lSUQpO1xuICBjb25zdCBkaXIgPSB0YXJnZXRQb3NpdGlvbiA+IHN0YXJ0UG9zaXRpb24gPyAnbmV4dCcgOiAncHJldic7XG4gIGNvbnN0IGlzT3V0T2ZCb3VuZCA9IChjdXJyZW50LCB0YXJnZXQpID0+IHtcbiAgICByZXR1cm4gZGlyID09PSAnbmV4dCcgJiYgY3VycmVudCA+PSB0YXJnZXQgfHwgZGlyID09PSAncHJldicgJiYgY3VycmVudCA8PSB0YXJnZXQ7XG4gIH07XG4gIGNvbnN0IGFuaW1hdGUgPSAoKSA9PiB7XG4gICAgdGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIGlmIChzdGFydFRpbWUgPT09IG51bGwpIHtcbiAgICAgIHN0YXJ0VGltZSA9IHRpbWU7XG4gICAgfVxuICAgIGNvbnN0IHByb2dyZXNzID0gTWF0aC5tYXgoTWF0aC5taW4oKHRpbWUgLSBzdGFydFRpbWUpIC8gZHVyYXRpb24sIDEpLCAwKTtcbiAgICBjb25zdCBlYXNlUHJvZ3Jlc3MgPSAwLjUgLSBNYXRoLmNvcyhwcm9ncmVzcyAqIE1hdGguUEkpIC8gMjtcbiAgICBsZXQgY3VycmVudFBvc2l0aW9uID0gc3RhcnRQb3NpdGlvbiArIGVhc2VQcm9ncmVzcyAqICh0YXJnZXRQb3NpdGlvbiAtIHN0YXJ0UG9zaXRpb24pO1xuICAgIGlmIChpc091dE9mQm91bmQoY3VycmVudFBvc2l0aW9uLCB0YXJnZXRQb3NpdGlvbikpIHtcbiAgICAgIGN1cnJlbnRQb3NpdGlvbiA9IHRhcmdldFBvc2l0aW9uO1xuICAgIH1cbiAgICBzd2lwZXIud3JhcHBlckVsLnNjcm9sbFRvKHtcbiAgICAgIFtzaWRlXTogY3VycmVudFBvc2l0aW9uXG4gICAgfSk7XG4gICAgaWYgKGlzT3V0T2ZCb3VuZChjdXJyZW50UG9zaXRpb24sIHRhcmdldFBvc2l0aW9uKSkge1xuICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5zY3JvbGxTbmFwVHlwZSA9ICcnO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUub3ZlcmZsb3cgPSAnJztcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zY3JvbGxUbyh7XG4gICAgICAgICAgW3NpZGVdOiBjdXJyZW50UG9zaXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShzd2lwZXIuY3NzTW9kZUZyYW1lSUQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2lwZXIuY3NzTW9kZUZyYW1lSUQgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGUpO1xuICB9O1xuICBhbmltYXRlKCk7XG59XG5mdW5jdGlvbiBnZXRTbGlkZVRyYW5zZm9ybUVsKHNsaWRlRWwpIHtcbiAgcmV0dXJuIHNsaWRlRWwucXVlcnlTZWxlY3RvcignLnN3aXBlci1zbGlkZS10cmFuc2Zvcm0nKSB8fCBzbGlkZUVsLnNoYWRvd1Jvb3QgJiYgc2xpZGVFbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItc2xpZGUtdHJhbnNmb3JtJykgfHwgc2xpZGVFbDtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRDaGlsZHJlbihlbGVtZW50LCBzZWxlY3Rvcikge1xuICBpZiAoc2VsZWN0b3IgPT09IHZvaWQgMCkge1xuICAgIHNlbGVjdG9yID0gJyc7XG4gIH1cbiAgY29uc3QgY2hpbGRyZW4gPSBbLi4uZWxlbWVudC5jaGlsZHJlbl07XG4gIGlmIChlbGVtZW50IGluc3RhbmNlb2YgSFRNTFNsb3RFbGVtZW50KSB7XG4gICAgY2hpbGRyZW4ucHVzaCguLi5lbGVtZW50LmFzc2lnbmVkRWxlbWVudHMoKSk7XG4gIH1cbiAgaWYgKCFzZWxlY3Rvcikge1xuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxuICByZXR1cm4gY2hpbGRyZW4uZmlsdGVyKGVsID0+IGVsLm1hdGNoZXMoc2VsZWN0b3IpKTtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRJc0NoaWxkT2ZTbG90KGVsLCBzbG90KSB7XG4gIC8vIEJyZWFkdGgtZmlyc3Qgc2VhcmNoIHRocm91Z2ggYWxsIHBhcmVudCdzIGNoaWxkcmVuIGFuZCBhc3NpZ25lZCBlbGVtZW50c1xuICBjb25zdCBlbGVtZW50c1F1ZXVlID0gW3Nsb3RdO1xuICB3aGlsZSAoZWxlbWVudHNRdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgY29uc3QgZWxlbWVudFRvQ2hlY2sgPSBlbGVtZW50c1F1ZXVlLnNoaWZ0KCk7XG4gICAgaWYgKGVsID09PSBlbGVtZW50VG9DaGVjaykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGVsZW1lbnRzUXVldWUucHVzaCguLi5lbGVtZW50VG9DaGVjay5jaGlsZHJlbiwgLi4uKGVsZW1lbnRUb0NoZWNrLnNoYWRvd1Jvb3Q/LmNoaWxkcmVuIHx8IFtdKSwgLi4uKGVsZW1lbnRUb0NoZWNrLmFzc2lnbmVkRWxlbWVudHM/LigpIHx8IFtdKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGVsZW1lbnRJc0NoaWxkT2YoZWwsIHBhcmVudCkge1xuICBsZXQgaXNDaGlsZCA9IHBhcmVudC5jb250YWlucyhlbCk7XG4gIGlmICghaXNDaGlsZCAmJiBwYXJlbnQgaW5zdGFuY2VvZiBIVE1MU2xvdEVsZW1lbnQpIHtcbiAgICBjb25zdCBjaGlsZHJlbiA9IFsuLi5wYXJlbnQuYXNzaWduZWRFbGVtZW50cygpXTtcbiAgICBpc0NoaWxkID0gY2hpbGRyZW4uaW5jbHVkZXMoZWwpO1xuICAgIGlmICghaXNDaGlsZCkge1xuICAgICAgaXNDaGlsZCA9IGVsZW1lbnRJc0NoaWxkT2ZTbG90KGVsLCBwYXJlbnQpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaXNDaGlsZDtcbn1cbmZ1bmN0aW9uIHNob3dXYXJuaW5nKHRleHQpIHtcbiAgdHJ5IHtcbiAgICBjb25zb2xlLndhcm4odGV4dCk7XG4gICAgcmV0dXJuO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBlcnJcbiAgfVxufVxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCh0YWcsIGNsYXNzZXMpIHtcbiAgaWYgKGNsYXNzZXMgPT09IHZvaWQgMCkge1xuICAgIGNsYXNzZXMgPSBbXTtcbiAgfVxuICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKTtcbiAgZWwuY2xhc3NMaXN0LmFkZCguLi4oQXJyYXkuaXNBcnJheShjbGFzc2VzKSA/IGNsYXNzZXMgOiBjbGFzc2VzVG9Ub2tlbnMoY2xhc3NlcykpKTtcbiAgcmV0dXJuIGVsO1xufVxuZnVuY3Rpb24gZWxlbWVudE9mZnNldChlbCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICBjb25zdCBib3ggPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgY29uc3QgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gIGNvbnN0IGNsaWVudFRvcCA9IGVsLmNsaWVudFRvcCB8fCBib2R5LmNsaWVudFRvcCB8fCAwO1xuICBjb25zdCBjbGllbnRMZWZ0ID0gZWwuY2xpZW50TGVmdCB8fCBib2R5LmNsaWVudExlZnQgfHwgMDtcbiAgY29uc3Qgc2Nyb2xsVG9wID0gZWwgPT09IHdpbmRvdyA/IHdpbmRvdy5zY3JvbGxZIDogZWwuc2Nyb2xsVG9wO1xuICBjb25zdCBzY3JvbGxMZWZ0ID0gZWwgPT09IHdpbmRvdyA/IHdpbmRvdy5zY3JvbGxYIDogZWwuc2Nyb2xsTGVmdDtcbiAgcmV0dXJuIHtcbiAgICB0b3A6IGJveC50b3AgKyBzY3JvbGxUb3AgLSBjbGllbnRUb3AsXG4gICAgbGVmdDogYm94LmxlZnQgKyBzY3JvbGxMZWZ0IC0gY2xpZW50TGVmdFxuICB9O1xufVxuZnVuY3Rpb24gZWxlbWVudFByZXZBbGwoZWwsIHNlbGVjdG9yKSB7XG4gIGNvbnN0IHByZXZFbHMgPSBbXTtcbiAgd2hpbGUgKGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHtcbiAgICBjb25zdCBwcmV2ID0gZWwucHJldmlvdXNFbGVtZW50U2libGluZzsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgaWYgKHByZXYubWF0Y2hlcyhzZWxlY3RvcikpIHByZXZFbHMucHVzaChwcmV2KTtcbiAgICB9IGVsc2UgcHJldkVscy5wdXNoKHByZXYpO1xuICAgIGVsID0gcHJldjtcbiAgfVxuICByZXR1cm4gcHJldkVscztcbn1cbmZ1bmN0aW9uIGVsZW1lbnROZXh0QWxsKGVsLCBzZWxlY3Rvcikge1xuICBjb25zdCBuZXh0RWxzID0gW107XG4gIHdoaWxlIChlbC5uZXh0RWxlbWVudFNpYmxpbmcpIHtcbiAgICBjb25zdCBuZXh0ID0gZWwubmV4dEVsZW1lbnRTaWJsaW5nOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBpZiAobmV4dC5tYXRjaGVzKHNlbGVjdG9yKSkgbmV4dEVscy5wdXNoKG5leHQpO1xuICAgIH0gZWxzZSBuZXh0RWxzLnB1c2gobmV4dCk7XG4gICAgZWwgPSBuZXh0O1xuICB9XG4gIHJldHVybiBuZXh0RWxzO1xufVxuZnVuY3Rpb24gZWxlbWVudFN0eWxlKGVsLCBwcm9wKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICByZXR1cm4gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpLmdldFByb3BlcnR5VmFsdWUocHJvcCk7XG59XG5mdW5jdGlvbiBlbGVtZW50SW5kZXgoZWwpIHtcbiAgbGV0IGNoaWxkID0gZWw7XG4gIGxldCBpO1xuICBpZiAoY2hpbGQpIHtcbiAgICBpID0gMDtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICB3aGlsZSAoKGNoaWxkID0gY2hpbGQucHJldmlvdXNTaWJsaW5nKSAhPT0gbnVsbCkge1xuICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09PSAxKSBpICs9IDE7XG4gICAgfVxuICAgIHJldHVybiBpO1xuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBlbGVtZW50UGFyZW50cyhlbCwgc2VsZWN0b3IpIHtcbiAgY29uc3QgcGFyZW50cyA9IFtdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIGxldCBwYXJlbnQgPSBlbC5wYXJlbnRFbGVtZW50OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIHdoaWxlIChwYXJlbnQpIHtcbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmIChwYXJlbnQubWF0Y2hlcyhzZWxlY3RvcikpIHBhcmVudHMucHVzaChwYXJlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJlbnRzLnB1c2gocGFyZW50KTtcbiAgICB9XG4gICAgcGFyZW50ID0gcGFyZW50LnBhcmVudEVsZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIHBhcmVudHM7XG59XG5mdW5jdGlvbiBlbGVtZW50VHJhbnNpdGlvbkVuZChlbCwgY2FsbGJhY2spIHtcbiAgZnVuY3Rpb24gZmlyZUNhbGxCYWNrKGUpIHtcbiAgICBpZiAoZS50YXJnZXQgIT09IGVsKSByZXR1cm47XG4gICAgY2FsbGJhY2suY2FsbChlbCwgZSk7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGZpcmVDYWxsQmFjayk7XG4gIH1cbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGZpcmVDYWxsQmFjayk7XG4gIH1cbn1cbmZ1bmN0aW9uIGVsZW1lbnRPdXRlclNpemUoZWwsIHNpemUsIGluY2x1ZGVNYXJnaW5zKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBpZiAoaW5jbHVkZU1hcmdpbnMpIHtcbiAgICByZXR1cm4gZWxbc2l6ZSA9PT0gJ3dpZHRoJyA/ICdvZmZzZXRXaWR0aCcgOiAnb2Zmc2V0SGVpZ2h0J10gKyBwYXJzZUZsb2F0KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHNpemUgPT09ICd3aWR0aCcgPyAnbWFyZ2luLXJpZ2h0JyA6ICdtYXJnaW4tdG9wJykpICsgcGFyc2VGbG9hdCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShzaXplID09PSAnd2lkdGgnID8gJ21hcmdpbi1sZWZ0JyA6ICdtYXJnaW4tYm90dG9tJykpO1xuICB9XG4gIHJldHVybiBlbC5vZmZzZXRXaWR0aDtcbn1cbmZ1bmN0aW9uIG1ha2VFbGVtZW50c0FycmF5KGVsKSB7XG4gIHJldHVybiAoQXJyYXkuaXNBcnJheShlbCkgPyBlbCA6IFtlbF0pLmZpbHRlcihlID0+ICEhZSk7XG59XG5mdW5jdGlvbiBnZXRSb3RhdGVGaXgoc3dpcGVyKSB7XG4gIHJldHVybiB2ID0+IHtcbiAgICBpZiAoTWF0aC5hYnModikgPiAwICYmIHN3aXBlci5icm93c2VyICYmIHN3aXBlci5icm93c2VyLm5lZWQzZEZpeCAmJiBNYXRoLmFicyh2KSAlIDkwID09PSAwKSB7XG4gICAgICByZXR1cm4gdiArIDAuMDAxO1xuICAgIH1cbiAgICByZXR1cm4gdjtcbiAgfTtcbn1cblxuZXhwb3J0IHsgZWxlbWVudFBhcmVudHMgYXMgYSwgZWxlbWVudE9mZnNldCBhcyBiLCBjcmVhdGVFbGVtZW50IGFzIGMsIG5vdyBhcyBkLCBlbGVtZW50Q2hpbGRyZW4gYXMgZSwgZWxlbWVudE91dGVyU2l6ZSBhcyBmLCBnZXRTbGlkZVRyYW5zZm9ybUVsIGFzIGcsIGVsZW1lbnRJbmRleCBhcyBoLCBjbGFzc2VzVG9Ub2tlbnMgYXMgaSwgZ2V0VHJhbnNsYXRlIGFzIGosIGVsZW1lbnRUcmFuc2l0aW9uRW5kIGFzIGssIGlzT2JqZWN0IGFzIGwsIG1ha2VFbGVtZW50c0FycmF5IGFzIG0sIG5leHRUaWNrIGFzIG4sIGdldFJvdGF0ZUZpeCBhcyBvLCBlbGVtZW50U3R5bGUgYXMgcCwgZWxlbWVudE5leHRBbGwgYXMgcSwgZWxlbWVudFByZXZBbGwgYXMgciwgc2V0Q1NTUHJvcGVydHkgYXMgcywgYW5pbWF0ZUNTU01vZGVTY3JvbGwgYXMgdCwgc2hvd1dhcm5pbmcgYXMgdSwgZWxlbWVudElzQ2hpbGRPZiBhcyB2LCBleHRlbmQgYXMgdywgZGVsZXRlUHJvcHMgYXMgeCB9O1xuIiwiaW1wb3J0IHsgYSBhcyBnZXRXaW5kb3csIGcgYXMgZ2V0RG9jdW1lbnQgfSBmcm9tICcuL3Nzci13aW5kb3cuZXNtLm1qcyc7XG5pbXBvcnQgeyBhIGFzIGVsZW1lbnRQYXJlbnRzLCBwIGFzIGVsZW1lbnRTdHlsZSwgZSBhcyBlbGVtZW50Q2hpbGRyZW4sIHMgYXMgc2V0Q1NTUHJvcGVydHksIGYgYXMgZWxlbWVudE91dGVyU2l6ZSwgcSBhcyBlbGVtZW50TmV4dEFsbCwgciBhcyBlbGVtZW50UHJldkFsbCwgaiBhcyBnZXRUcmFuc2xhdGUsIHQgYXMgYW5pbWF0ZUNTU01vZGVTY3JvbGwsIG4gYXMgbmV4dFRpY2ssIHUgYXMgc2hvd1dhcm5pbmcsIGMgYXMgY3JlYXRlRWxlbWVudCwgdiBhcyBlbGVtZW50SXNDaGlsZE9mLCBkIGFzIG5vdywgdyBhcyBleHRlbmQsIGggYXMgZWxlbWVudEluZGV4LCB4IGFzIGRlbGV0ZVByb3BzIH0gZnJvbSAnLi91dGlscy5tanMnO1xuXG5sZXQgc3VwcG9ydDtcbmZ1bmN0aW9uIGNhbGNTdXBwb3J0KCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICByZXR1cm4ge1xuICAgIHNtb290aFNjcm9sbDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiAnc2Nyb2xsQmVoYXZpb3InIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSxcbiAgICB0b3VjaDogISEoJ29udG91Y2hzdGFydCcgaW4gd2luZG93IHx8IHdpbmRvdy5Eb2N1bWVudFRvdWNoICYmIGRvY3VtZW50IGluc3RhbmNlb2Ygd2luZG93LkRvY3VtZW50VG91Y2gpXG4gIH07XG59XG5mdW5jdGlvbiBnZXRTdXBwb3J0KCkge1xuICBpZiAoIXN1cHBvcnQpIHtcbiAgICBzdXBwb3J0ID0gY2FsY1N1cHBvcnQoKTtcbiAgfVxuICByZXR1cm4gc3VwcG9ydDtcbn1cblxubGV0IGRldmljZUNhY2hlZDtcbmZ1bmN0aW9uIGNhbGNEZXZpY2UoX3RlbXApIHtcbiAgbGV0IHtcbiAgICB1c2VyQWdlbnRcbiAgfSA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wO1xuICBjb25zdCBzdXBwb3J0ID0gZ2V0U3VwcG9ydCgpO1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3QgcGxhdGZvcm0gPSB3aW5kb3cubmF2aWdhdG9yLnBsYXRmb3JtO1xuICBjb25zdCB1YSA9IHVzZXJBZ2VudCB8fCB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgY29uc3QgZGV2aWNlID0ge1xuICAgIGlvczogZmFsc2UsXG4gICAgYW5kcm9pZDogZmFsc2VcbiAgfTtcbiAgY29uc3Qgc2NyZWVuV2lkdGggPSB3aW5kb3cuc2NyZWVuLndpZHRoO1xuICBjb25zdCBzY3JlZW5IZWlnaHQgPSB3aW5kb3cuc2NyZWVuLmhlaWdodDtcbiAgY29uc3QgYW5kcm9pZCA9IHVhLm1hdGNoKC8oQW5kcm9pZCk7P1tcXHNcXC9dKyhbXFxkLl0rKT8vKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBsZXQgaXBhZCA9IHVhLm1hdGNoKC8oaVBhZCkuKk9TXFxzKFtcXGRfXSspLyk7XG4gIGNvbnN0IGlwb2QgPSB1YS5tYXRjaCgvKGlQb2QpKC4qT1NcXHMoW1xcZF9dKykpPy8pO1xuICBjb25zdCBpcGhvbmUgPSAhaXBhZCAmJiB1YS5tYXRjaCgvKGlQaG9uZVxcc09TfGlPUylcXHMoW1xcZF9dKykvKTtcbiAgY29uc3Qgd2luZG93cyA9IHBsYXRmb3JtID09PSAnV2luMzInO1xuICBsZXQgbWFjb3MgPSBwbGF0Zm9ybSA9PT0gJ01hY0ludGVsJztcblxuICAvLyBpUGFkT3MgMTMgZml4XG4gIGNvbnN0IGlQYWRTY3JlZW5zID0gWycxMDI0eDEzNjYnLCAnMTM2NngxMDI0JywgJzgzNHgxMTk0JywgJzExOTR4ODM0JywgJzgzNHgxMTEyJywgJzExMTJ4ODM0JywgJzc2OHgxMDI0JywgJzEwMjR4NzY4JywgJzgyMHgxMTgwJywgJzExODB4ODIwJywgJzgxMHgxMDgwJywgJzEwODB4ODEwJ107XG4gIGlmICghaXBhZCAmJiBtYWNvcyAmJiBzdXBwb3J0LnRvdWNoICYmIGlQYWRTY3JlZW5zLmluZGV4T2YoYCR7c2NyZWVuV2lkdGh9eCR7c2NyZWVuSGVpZ2h0fWApID49IDApIHtcbiAgICBpcGFkID0gdWEubWF0Y2goLyhWZXJzaW9uKVxcLyhbXFxkLl0rKS8pO1xuICAgIGlmICghaXBhZCkgaXBhZCA9IFswLCAxLCAnMTNfMF8wJ107XG4gICAgbWFjb3MgPSBmYWxzZTtcbiAgfVxuXG4gIC8vIEFuZHJvaWRcbiAgaWYgKGFuZHJvaWQgJiYgIXdpbmRvd3MpIHtcbiAgICBkZXZpY2Uub3MgPSAnYW5kcm9pZCc7XG4gICAgZGV2aWNlLmFuZHJvaWQgPSB0cnVlO1xuICB9XG4gIGlmIChpcGFkIHx8IGlwaG9uZSB8fCBpcG9kKSB7XG4gICAgZGV2aWNlLm9zID0gJ2lvcyc7XG4gICAgZGV2aWNlLmlvcyA9IHRydWU7XG4gIH1cblxuICAvLyBFeHBvcnQgb2JqZWN0XG4gIHJldHVybiBkZXZpY2U7XG59XG5mdW5jdGlvbiBnZXREZXZpY2Uob3ZlcnJpZGVzKSB7XG4gIGlmIChvdmVycmlkZXMgPT09IHZvaWQgMCkge1xuICAgIG92ZXJyaWRlcyA9IHt9O1xuICB9XG4gIGlmICghZGV2aWNlQ2FjaGVkKSB7XG4gICAgZGV2aWNlQ2FjaGVkID0gY2FsY0RldmljZShvdmVycmlkZXMpO1xuICB9XG4gIHJldHVybiBkZXZpY2VDYWNoZWQ7XG59XG5cbmxldCBicm93c2VyO1xuZnVuY3Rpb24gY2FsY0Jyb3dzZXIoKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBkZXZpY2UgPSBnZXREZXZpY2UoKTtcbiAgbGV0IG5lZWRQZXJzcGVjdGl2ZUZpeCA9IGZhbHNlO1xuICBmdW5jdGlvbiBpc1NhZmFyaSgpIHtcbiAgICBjb25zdCB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgcmV0dXJuIHVhLmluZGV4T2YoJ3NhZmFyaScpID49IDAgJiYgdWEuaW5kZXhPZignY2hyb21lJykgPCAwICYmIHVhLmluZGV4T2YoJ2FuZHJvaWQnKSA8IDA7XG4gIH1cbiAgaWYgKGlzU2FmYXJpKCkpIHtcbiAgICBjb25zdCB1YSA9IFN0cmluZyh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgaWYgKHVhLmluY2x1ZGVzKCdWZXJzaW9uLycpKSB7XG4gICAgICBjb25zdCBbbWFqb3IsIG1pbm9yXSA9IHVhLnNwbGl0KCdWZXJzaW9uLycpWzFdLnNwbGl0KCcgJylbMF0uc3BsaXQoJy4nKS5tYXAobnVtID0+IE51bWJlcihudW0pKTtcbiAgICAgIG5lZWRQZXJzcGVjdGl2ZUZpeCA9IG1ham9yIDwgMTYgfHwgbWFqb3IgPT09IDE2ICYmIG1pbm9yIDwgMjtcbiAgICB9XG4gIH1cbiAgY29uc3QgaXNXZWJWaWV3ID0gLyhpUGhvbmV8aVBvZHxpUGFkKS4qQXBwbGVXZWJLaXQoPyEuKlNhZmFyaSkvaS50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgY29uc3QgaXNTYWZhcmlCcm93c2VyID0gaXNTYWZhcmkoKTtcbiAgY29uc3QgbmVlZDNkRml4ID0gaXNTYWZhcmlCcm93c2VyIHx8IGlzV2ViVmlldyAmJiBkZXZpY2UuaW9zO1xuICByZXR1cm4ge1xuICAgIGlzU2FmYXJpOiBuZWVkUGVyc3BlY3RpdmVGaXggfHwgaXNTYWZhcmlCcm93c2VyLFxuICAgIG5lZWRQZXJzcGVjdGl2ZUZpeCxcbiAgICBuZWVkM2RGaXgsXG4gICAgaXNXZWJWaWV3XG4gIH07XG59XG5mdW5jdGlvbiBnZXRCcm93c2VyKCkge1xuICBpZiAoIWJyb3dzZXIpIHtcbiAgICBicm93c2VyID0gY2FsY0Jyb3dzZXIoKTtcbiAgfVxuICByZXR1cm4gYnJvd3Nlcjtcbn1cblxuZnVuY3Rpb24gUmVzaXplKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBzd2lwZXIsXG4gICAgb24sXG4gICAgZW1pdFxuICB9ID0gX3JlZjtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGxldCBvYnNlcnZlciA9IG51bGw7XG4gIGxldCBhbmltYXRpb25GcmFtZSA9IG51bGw7XG4gIGNvbnN0IHJlc2l6ZUhhbmRsZXIgPSAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm47XG4gICAgZW1pdCgnYmVmb3JlUmVzaXplJyk7XG4gICAgZW1pdCgncmVzaXplJyk7XG4gIH07XG4gIGNvbnN0IGNyZWF0ZU9ic2VydmVyID0gKCkgPT4ge1xuICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5pbml0aWFsaXplZCkgcmV0dXJuO1xuICAgIG9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKGVudHJpZXMgPT4ge1xuICAgICAgYW5pbWF0aW9uRnJhbWUgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgIGhlaWdodFxuICAgICAgICB9ID0gc3dpcGVyO1xuICAgICAgICBsZXQgbmV3V2lkdGggPSB3aWR0aDtcbiAgICAgICAgbGV0IG5ld0hlaWdodCA9IGhlaWdodDtcbiAgICAgICAgZW50cmllcy5mb3JFYWNoKF9yZWYyID0+IHtcbiAgICAgICAgICBsZXQge1xuICAgICAgICAgICAgY29udGVudEJveFNpemUsXG4gICAgICAgICAgICBjb250ZW50UmVjdCxcbiAgICAgICAgICAgIHRhcmdldFxuICAgICAgICAgIH0gPSBfcmVmMjtcbiAgICAgICAgICBpZiAodGFyZ2V0ICYmIHRhcmdldCAhPT0gc3dpcGVyLmVsKSByZXR1cm47XG4gICAgICAgICAgbmV3V2lkdGggPSBjb250ZW50UmVjdCA/IGNvbnRlbnRSZWN0LndpZHRoIDogKGNvbnRlbnRCb3hTaXplWzBdIHx8IGNvbnRlbnRCb3hTaXplKS5pbmxpbmVTaXplO1xuICAgICAgICAgIG5ld0hlaWdodCA9IGNvbnRlbnRSZWN0ID8gY29udGVudFJlY3QuaGVpZ2h0IDogKGNvbnRlbnRCb3hTaXplWzBdIHx8IGNvbnRlbnRCb3hTaXplKS5ibG9ja1NpemU7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAobmV3V2lkdGggIT09IHdpZHRoIHx8IG5ld0hlaWdodCAhPT0gaGVpZ2h0KSB7XG4gICAgICAgICAgcmVzaXplSGFuZGxlcigpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBvYnNlcnZlci5vYnNlcnZlKHN3aXBlci5lbCk7XG4gIH07XG4gIGNvbnN0IHJlbW92ZU9ic2VydmVyID0gKCkgPT4ge1xuICAgIGlmIChhbmltYXRpb25GcmFtZSkge1xuICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKGFuaW1hdGlvbkZyYW1lKTtcbiAgICB9XG4gICAgaWYgKG9ic2VydmVyICYmIG9ic2VydmVyLnVub2JzZXJ2ZSAmJiBzd2lwZXIuZWwpIHtcbiAgICAgIG9ic2VydmVyLnVub2JzZXJ2ZShzd2lwZXIuZWwpO1xuICAgICAgb2JzZXJ2ZXIgPSBudWxsO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgb3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyID0gKCkgPT4ge1xuICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5pbml0aWFsaXplZCkgcmV0dXJuO1xuICAgIGVtaXQoJ29yaWVudGF0aW9uY2hhbmdlJyk7XG4gIH07XG4gIG9uKCdpbml0JywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnJlc2l6ZU9ic2VydmVyICYmIHR5cGVvZiB3aW5kb3cuUmVzaXplT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjcmVhdGVPYnNlcnZlcigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplSGFuZGxlcik7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgb3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyKTtcbiAgfSk7XG4gIG9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgIHJlbW92ZU9ic2VydmVyKCk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZUhhbmRsZXIpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIG9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlcik7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBPYnNlcnZlcihfcmVmKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyLFxuICAgIGV4dGVuZFBhcmFtcyxcbiAgICBvbixcbiAgICBlbWl0XG4gIH0gPSBfcmVmO1xuICBjb25zdCBvYnNlcnZlcnMgPSBbXTtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGF0dGFjaCA9IGZ1bmN0aW9uICh0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIGNvbnN0IE9ic2VydmVyRnVuYyA9IHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyIHx8IHdpbmRvdy5XZWJraXRNdXRhdGlvbk9ic2VydmVyO1xuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE9ic2VydmVyRnVuYyhtdXRhdGlvbnMgPT4ge1xuICAgICAgLy8gVGhlIG9ic2VydmVyVXBkYXRlIGV2ZW50IHNob3VsZCBvbmx5IGJlIHRyaWdnZXJlZFxuICAgICAgLy8gb25jZSBkZXNwaXRlIHRoZSBudW1iZXIgb2YgbXV0YXRpb25zLiAgQWRkaXRpb25hbFxuICAgICAgLy8gdHJpZ2dlcnMgYXJlIHJlZHVuZGFudCBhbmQgYXJlIHZlcnkgY29zdGx5XG4gICAgICBpZiAoc3dpcGVyLl9fcHJldmVudE9ic2VydmVyX18pIHJldHVybjtcbiAgICAgIGlmIChtdXRhdGlvbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGVtaXQoJ29ic2VydmVyVXBkYXRlJywgbXV0YXRpb25zWzBdKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3Qgb2JzZXJ2ZXJVcGRhdGUgPSBmdW5jdGlvbiBvYnNlcnZlclVwZGF0ZSgpIHtcbiAgICAgICAgZW1pdCgnb2JzZXJ2ZXJVcGRhdGUnLCBtdXRhdGlvbnNbMF0pO1xuICAgICAgfTtcbiAgICAgIGlmICh3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUob2JzZXJ2ZXJVcGRhdGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LnNldFRpbWVvdXQob2JzZXJ2ZXJVcGRhdGUsIDApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG9ic2VydmVyLm9ic2VydmUodGFyZ2V0LCB7XG4gICAgICBhdHRyaWJ1dGVzOiB0eXBlb2Ygb3B0aW9ucy5hdHRyaWJ1dGVzID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmF0dHJpYnV0ZXMsXG4gICAgICBjaGlsZExpc3Q6IHN3aXBlci5pc0VsZW1lbnQgfHwgKHR5cGVvZiBvcHRpb25zLmNoaWxkTGlzdCA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogb3B0aW9ucykuY2hpbGRMaXN0LFxuICAgICAgY2hhcmFjdGVyRGF0YTogdHlwZW9mIG9wdGlvbnMuY2hhcmFjdGVyRGF0YSA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogb3B0aW9ucy5jaGFyYWN0ZXJEYXRhXG4gICAgfSk7XG4gICAgb2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpO1xuICB9O1xuICBjb25zdCBpbml0ID0gKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5vYnNlcnZlcikgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLm9ic2VydmVQYXJlbnRzKSB7XG4gICAgICBjb25zdCBjb250YWluZXJQYXJlbnRzID0gZWxlbWVudFBhcmVudHMoc3dpcGVyLmhvc3RFbCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRhaW5lclBhcmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgYXR0YWNoKGNvbnRhaW5lclBhcmVudHNbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBPYnNlcnZlIGNvbnRhaW5lclxuICAgIGF0dGFjaChzd2lwZXIuaG9zdEVsLCB7XG4gICAgICBjaGlsZExpc3Q6IHN3aXBlci5wYXJhbXMub2JzZXJ2ZVNsaWRlQ2hpbGRyZW5cbiAgICB9KTtcblxuICAgIC8vIE9ic2VydmUgd3JhcHBlclxuICAgIGF0dGFjaChzd2lwZXIud3JhcHBlckVsLCB7XG4gICAgICBhdHRyaWJ1dGVzOiBmYWxzZVxuICAgIH0pO1xuICB9O1xuICBjb25zdCBkZXN0cm95ID0gKCkgPT4ge1xuICAgIG9ic2VydmVycy5mb3JFYWNoKG9ic2VydmVyID0+IHtcbiAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICB9KTtcbiAgICBvYnNlcnZlcnMuc3BsaWNlKDAsIG9ic2VydmVycy5sZW5ndGgpO1xuICB9O1xuICBleHRlbmRQYXJhbXMoe1xuICAgIG9ic2VydmVyOiBmYWxzZSxcbiAgICBvYnNlcnZlUGFyZW50czogZmFsc2UsXG4gICAgb2JzZXJ2ZVNsaWRlQ2hpbGRyZW46IGZhbHNlXG4gIH0pO1xuICBvbignaW5pdCcsIGluaXQpO1xuICBvbignZGVzdHJveScsIGRlc3Ryb3kpO1xufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xuXG52YXIgZXZlbnRzRW1pdHRlciA9IHtcbiAgb24oZXZlbnRzLCBoYW5kbGVyLCBwcmlvcml0eSkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmO1xuICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHNlbGY7XG4gICAgY29uc3QgbWV0aG9kID0gcHJpb3JpdHkgPyAndW5zaGlmdCcgOiAncHVzaCc7XG4gICAgZXZlbnRzLnNwbGl0KCcgJykuZm9yRWFjaChldmVudCA9PiB7XG4gICAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSkgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdID0gW107XG4gICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF1bbWV0aG9kXShoYW5kbGVyKTtcbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZjtcbiAgfSxcbiAgb25jZShldmVudHMsIGhhbmRsZXIsIHByaW9yaXR5KSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycyB8fCBzZWxmLmRlc3Ryb3llZCkgcmV0dXJuIHNlbGY7XG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gc2VsZjtcbiAgICBmdW5jdGlvbiBvbmNlSGFuZGxlcigpIHtcbiAgICAgIHNlbGYub2ZmKGV2ZW50cywgb25jZUhhbmRsZXIpO1xuICAgICAgaWYgKG9uY2VIYW5kbGVyLl9fZW1pdHRlclByb3h5KSB7XG4gICAgICAgIGRlbGV0ZSBvbmNlSGFuZGxlci5fX2VtaXR0ZXJQcm94eTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuICAgICAgaGFuZGxlci5hcHBseShzZWxmLCBhcmdzKTtcbiAgICB9XG4gICAgb25jZUhhbmRsZXIuX19lbWl0dGVyUHJveHkgPSBoYW5kbGVyO1xuICAgIHJldHVybiBzZWxmLm9uKGV2ZW50cywgb25jZUhhbmRsZXIsIHByaW9yaXR5KTtcbiAgfSxcbiAgb25BbnkoaGFuZGxlciwgcHJpb3JpdHkpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjtcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHJldHVybiBzZWxmO1xuICAgIGNvbnN0IG1ldGhvZCA9IHByaW9yaXR5ID8gJ3Vuc2hpZnQnIDogJ3B1c2gnO1xuICAgIGlmIChzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5pbmRleE9mKGhhbmRsZXIpIDwgMCkge1xuICAgICAgc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnNbbWV0aG9kXShoYW5kbGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0sXG4gIG9mZkFueShoYW5kbGVyKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycyB8fCBzZWxmLmRlc3Ryb3llZCkgcmV0dXJuIHNlbGY7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0FueUxpc3RlbmVycykgcmV0dXJuIHNlbGY7XG4gICAgY29uc3QgaW5kZXggPSBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5pbmRleE9mKGhhbmRsZXIpO1xuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgICByZXR1cm4gc2VsZjtcbiAgfSxcbiAgb2ZmKGV2ZW50cywgaGFuZGxlcikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMpIHJldHVybiBzZWxmO1xuICAgIGV2ZW50cy5zcGxpdCgnICcpLmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0gPSBbXTtcbiAgICAgIH0gZWxzZSBpZiAoc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5mb3JFYWNoKChldmVudEhhbmRsZXIsIGluZGV4KSA9PiB7XG4gICAgICAgICAgaWYgKGV2ZW50SGFuZGxlciA9PT0gaGFuZGxlciB8fCBldmVudEhhbmRsZXIuX19lbWl0dGVyUHJveHkgJiYgZXZlbnRIYW5kbGVyLl9fZW1pdHRlclByb3h5ID09PSBoYW5kbGVyKSB7XG4gICAgICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzZWxmO1xuICB9LFxuICBlbWl0KCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMpIHJldHVybiBzZWxmO1xuICAgIGxldCBldmVudHM7XG4gICAgbGV0IGRhdGE7XG4gICAgbGV0IGNvbnRleHQ7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycgfHwgQXJyYXkuaXNBcnJheShhcmdzWzBdKSkge1xuICAgICAgZXZlbnRzID0gYXJnc1swXTtcbiAgICAgIGRhdGEgPSBhcmdzLnNsaWNlKDEsIGFyZ3MubGVuZ3RoKTtcbiAgICAgIGNvbnRleHQgPSBzZWxmO1xuICAgIH0gZWxzZSB7XG4gICAgICBldmVudHMgPSBhcmdzWzBdLmV2ZW50cztcbiAgICAgIGRhdGEgPSBhcmdzWzBdLmRhdGE7XG4gICAgICBjb250ZXh0ID0gYXJnc1swXS5jb250ZXh0IHx8IHNlbGY7XG4gICAgfVxuICAgIGRhdGEudW5zaGlmdChjb250ZXh0KTtcbiAgICBjb25zdCBldmVudHNBcnJheSA9IEFycmF5LmlzQXJyYXkoZXZlbnRzKSA/IGV2ZW50cyA6IGV2ZW50cy5zcGxpdCgnICcpO1xuICAgIGV2ZW50c0FycmF5LmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgaWYgKHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzICYmIHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLmxlbmd0aCkge1xuICAgICAgICBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5mb3JFYWNoKGV2ZW50SGFuZGxlciA9PiB7XG4gICAgICAgICAgZXZlbnRIYW5kbGVyLmFwcGx5KGNvbnRleHQsIFtldmVudCwgLi4uZGF0YV0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChzZWxmLmV2ZW50c0xpc3RlbmVycyAmJiBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0pIHtcbiAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLmZvckVhY2goZXZlbnRIYW5kbGVyID0+IHtcbiAgICAgICAgICBldmVudEhhbmRsZXIuYXBwbHkoY29udGV4dCwgZGF0YSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzZWxmO1xuICB9XG59O1xuXG5mdW5jdGlvbiB1cGRhdGVTaXplKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBsZXQgd2lkdGg7XG4gIGxldCBoZWlnaHQ7XG4gIGNvbnN0IGVsID0gc3dpcGVyLmVsO1xuICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMud2lkdGggIT09ICd1bmRlZmluZWQnICYmIHN3aXBlci5wYXJhbXMud2lkdGggIT09IG51bGwpIHtcbiAgICB3aWR0aCA9IHN3aXBlci5wYXJhbXMud2lkdGg7XG4gIH0gZWxzZSB7XG4gICAgd2lkdGggPSBlbC5jbGllbnRXaWR0aDtcbiAgfVxuICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMuaGVpZ2h0ICE9PSAndW5kZWZpbmVkJyAmJiBzd2lwZXIucGFyYW1zLmhlaWdodCAhPT0gbnVsbCkge1xuICAgIGhlaWdodCA9IHN3aXBlci5wYXJhbXMuaGVpZ2h0O1xuICB9IGVsc2Uge1xuICAgIGhlaWdodCA9IGVsLmNsaWVudEhlaWdodDtcbiAgfVxuICBpZiAod2lkdGggPT09IDAgJiYgc3dpcGVyLmlzSG9yaXpvbnRhbCgpIHx8IGhlaWdodCA9PT0gMCAmJiBzd2lwZXIuaXNWZXJ0aWNhbCgpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gU3VidHJhY3QgcGFkZGluZ3NcbiAgd2lkdGggPSB3aWR0aCAtIHBhcnNlSW50KGVsZW1lbnRTdHlsZShlbCwgJ3BhZGRpbmctbGVmdCcpIHx8IDAsIDEwKSAtIHBhcnNlSW50KGVsZW1lbnRTdHlsZShlbCwgJ3BhZGRpbmctcmlnaHQnKSB8fCAwLCAxMCk7XG4gIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KGVsZW1lbnRTdHlsZShlbCwgJ3BhZGRpbmctdG9wJykgfHwgMCwgMTApIC0gcGFyc2VJbnQoZWxlbWVudFN0eWxlKGVsLCAncGFkZGluZy1ib3R0b20nKSB8fCAwLCAxMCk7XG4gIGlmIChOdW1iZXIuaXNOYU4od2lkdGgpKSB3aWR0aCA9IDA7XG4gIGlmIChOdW1iZXIuaXNOYU4oaGVpZ2h0KSkgaGVpZ2h0ID0gMDtcbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgc2l6ZTogc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gd2lkdGggOiBoZWlnaHRcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVNsaWRlcygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgZnVuY3Rpb24gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShub2RlLCBsYWJlbCkge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KG5vZGUuZ2V0UHJvcGVydHlWYWx1ZShzd2lwZXIuZ2V0RGlyZWN0aW9uTGFiZWwobGFiZWwpKSB8fCAwKTtcbiAgfVxuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICBjb25zdCB7XG4gICAgd3JhcHBlckVsLFxuICAgIHNsaWRlc0VsLFxuICAgIHNpemU6IHN3aXBlclNpemUsXG4gICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgd3JvbmdSVExcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgY29uc3QgcHJldmlvdXNTbGlkZXNMZW5ndGggPSBpc1ZpcnR1YWwgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG4gIGNvbnN0IHNsaWRlcyA9IGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApO1xuICBjb25zdCBzbGlkZXNMZW5ndGggPSBpc1ZpcnR1YWwgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc2xpZGVzLmxlbmd0aDtcbiAgbGV0IHNuYXBHcmlkID0gW107XG4gIGNvbnN0IHNsaWRlc0dyaWQgPSBbXTtcbiAgY29uc3Qgc2xpZGVzU2l6ZXNHcmlkID0gW107XG4gIGxldCBvZmZzZXRCZWZvcmUgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlO1xuICBpZiAodHlwZW9mIG9mZnNldEJlZm9yZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9mZnNldEJlZm9yZSA9IHBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmUuY2FsbChzd2lwZXIpO1xuICB9XG4gIGxldCBvZmZzZXRBZnRlciA9IHBhcmFtcy5zbGlkZXNPZmZzZXRBZnRlcjtcbiAgaWYgKHR5cGVvZiBvZmZzZXRBZnRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9mZnNldEFmdGVyID0gcGFyYW1zLnNsaWRlc09mZnNldEFmdGVyLmNhbGwoc3dpcGVyKTtcbiAgfVxuICBjb25zdCBwcmV2aW91c1NuYXBHcmlkTGVuZ3RoID0gc3dpcGVyLnNuYXBHcmlkLmxlbmd0aDtcbiAgY29uc3QgcHJldmlvdXNTbGlkZXNHcmlkTGVuZ3RoID0gc3dpcGVyLnNsaWRlc0dyaWQubGVuZ3RoO1xuICBsZXQgc3BhY2VCZXR3ZWVuID0gcGFyYW1zLnNwYWNlQmV0d2VlbjtcbiAgbGV0IHNsaWRlUG9zaXRpb24gPSAtb2Zmc2V0QmVmb3JlO1xuICBsZXQgcHJldlNsaWRlU2l6ZSA9IDA7XG4gIGxldCBpbmRleCA9IDA7XG4gIGlmICh0eXBlb2Ygc3dpcGVyU2l6ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHR5cGVvZiBzcGFjZUJldHdlZW4gPT09ICdzdHJpbmcnICYmIHNwYWNlQmV0d2Vlbi5pbmRleE9mKCclJykgPj0gMCkge1xuICAgIHNwYWNlQmV0d2VlbiA9IHBhcnNlRmxvYXQoc3BhY2VCZXR3ZWVuLnJlcGxhY2UoJyUnLCAnJykpIC8gMTAwICogc3dpcGVyU2l6ZTtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygc3BhY2VCZXR3ZWVuID09PSAnc3RyaW5nJykge1xuICAgIHNwYWNlQmV0d2VlbiA9IHBhcnNlRmxvYXQoc3BhY2VCZXR3ZWVuKTtcbiAgfVxuICBzd2lwZXIudmlydHVhbFNpemUgPSAtc3BhY2VCZXR3ZWVuO1xuXG4gIC8vIHJlc2V0IG1hcmdpbnNcbiAgc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgaWYgKHJ0bCkge1xuICAgICAgc2xpZGVFbC5zdHlsZS5tYXJnaW5MZWZ0ID0gJyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsaWRlRWwuc3R5bGUubWFyZ2luUmlnaHQgPSAnJztcbiAgICB9XG4gICAgc2xpZGVFbC5zdHlsZS5tYXJnaW5Cb3R0b20gPSAnJztcbiAgICBzbGlkZUVsLnN0eWxlLm1hcmdpblRvcCA9ICcnO1xuICB9KTtcblxuICAvLyByZXNldCBjc3NNb2RlIG9mZnNldHNcbiAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBwYXJhbXMuY3NzTW9kZSkge1xuICAgIHNldENTU1Byb3BlcnR5KHdyYXBwZXJFbCwgJy0tc3dpcGVyLWNlbnRlcmVkLW9mZnNldC1iZWZvcmUnLCAnJyk7XG4gICAgc2V0Q1NTUHJvcGVydHkod3JhcHBlckVsLCAnLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWFmdGVyJywgJycpO1xuICB9XG4gIGNvbnN0IGdyaWRFbmFibGVkID0gcGFyYW1zLmdyaWQgJiYgcGFyYW1zLmdyaWQucm93cyA+IDEgJiYgc3dpcGVyLmdyaWQ7XG4gIGlmIChncmlkRW5hYmxlZCkge1xuICAgIHN3aXBlci5ncmlkLmluaXRTbGlkZXMoc2xpZGVzKTtcbiAgfSBlbHNlIGlmIChzd2lwZXIuZ3JpZCkge1xuICAgIHN3aXBlci5ncmlkLnVuc2V0U2xpZGVzKCk7XG4gIH1cblxuICAvLyBDYWxjIHNsaWRlc1xuICBsZXQgc2xpZGVTaXplO1xuICBjb25zdCBzaG91bGRSZXNldFNsaWRlU2l6ZSA9IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgJiYgcGFyYW1zLmJyZWFrcG9pbnRzICYmIE9iamVjdC5rZXlzKHBhcmFtcy5icmVha3BvaW50cykuZmlsdGVyKGtleSA9PiB7XG4gICAgcmV0dXJuIHR5cGVvZiBwYXJhbXMuYnJlYWtwb2ludHNba2V5XS5zbGlkZXNQZXJWaWV3ICE9PSAndW5kZWZpbmVkJztcbiAgfSkubGVuZ3RoID4gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNMZW5ndGg7IGkgKz0gMSkge1xuICAgIHNsaWRlU2l6ZSA9IDA7XG4gICAgbGV0IHNsaWRlO1xuICAgIGlmIChzbGlkZXNbaV0pIHNsaWRlID0gc2xpZGVzW2ldO1xuICAgIGlmIChncmlkRW5hYmxlZCkge1xuICAgICAgc3dpcGVyLmdyaWQudXBkYXRlU2xpZGUoaSwgc2xpZGUsIHNsaWRlcyk7XG4gICAgfVxuICAgIGlmIChzbGlkZXNbaV0gJiYgZWxlbWVudFN0eWxlKHNsaWRlLCAnZGlzcGxheScpID09PSAnbm9uZScpIGNvbnRpbnVlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJykge1xuICAgICAgaWYgKHNob3VsZFJlc2V0U2xpZGVTaXplKSB7XG4gICAgICAgIHNsaWRlc1tpXS5zdHlsZVtzd2lwZXIuZ2V0RGlyZWN0aW9uTGFiZWwoJ3dpZHRoJyldID0gYGA7XG4gICAgICB9XG4gICAgICBjb25zdCBzbGlkZVN0eWxlcyA9IGdldENvbXB1dGVkU3R5bGUoc2xpZGUpO1xuICAgICAgY29uc3QgY3VycmVudFRyYW5zZm9ybSA9IHNsaWRlLnN0eWxlLnRyYW5zZm9ybTtcbiAgICAgIGNvbnN0IGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0gPSBzbGlkZS5zdHlsZS53ZWJraXRUcmFuc2Zvcm07XG4gICAgICBpZiAoY3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZS5zdHlsZS50cmFuc2Zvcm0gPSAnbm9uZSc7XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFdlYktpdFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZS5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSAnbm9uZSc7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykge1xuICAgICAgICBzbGlkZVNpemUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBlbGVtZW50T3V0ZXJTaXplKHNsaWRlLCAnd2lkdGgnLCB0cnVlKSA6IGVsZW1lbnRPdXRlclNpemUoc2xpZGUsICdoZWlnaHQnLCB0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICBjb25zdCB3aWR0aCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICd3aWR0aCcpO1xuICAgICAgICBjb25zdCBwYWRkaW5nTGVmdCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICdwYWRkaW5nLWxlZnQnKTtcbiAgICAgICAgY29uc3QgcGFkZGluZ1JpZ2h0ID0gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShzbGlkZVN0eWxlcywgJ3BhZGRpbmctcmlnaHQnKTtcbiAgICAgICAgY29uc3QgbWFyZ2luTGVmdCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICdtYXJnaW4tbGVmdCcpO1xuICAgICAgICBjb25zdCBtYXJnaW5SaWdodCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICdtYXJnaW4tcmlnaHQnKTtcbiAgICAgICAgY29uc3QgYm94U2l6aW5nID0gc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnYm94LXNpemluZycpO1xuICAgICAgICBpZiAoYm94U2l6aW5nICYmIGJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnKSB7XG4gICAgICAgICAgc2xpZGVTaXplID0gd2lkdGggKyBtYXJnaW5MZWZ0ICsgbWFyZ2luUmlnaHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgY2xpZW50V2lkdGgsXG4gICAgICAgICAgICBvZmZzZXRXaWR0aFxuICAgICAgICAgIH0gPSBzbGlkZTtcbiAgICAgICAgICBzbGlkZVNpemUgPSB3aWR0aCArIHBhZGRpbmdMZWZ0ICsgcGFkZGluZ1JpZ2h0ICsgbWFyZ2luTGVmdCArIG1hcmdpblJpZ2h0ICsgKG9mZnNldFdpZHRoIC0gY2xpZW50V2lkdGgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZS5zdHlsZS50cmFuc2Zvcm0gPSBjdXJyZW50VHJhbnNmb3JtO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGUuc3R5bGUud2Via2l0VHJhbnNmb3JtID0gY3VycmVudFdlYktpdFRyYW5zZm9ybTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVNpemUgPSBNYXRoLmZsb29yKHNsaWRlU2l6ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsaWRlU2l6ZSA9IChzd2lwZXJTaXplIC0gKHBhcmFtcy5zbGlkZXNQZXJWaWV3IC0gMSkgKiBzcGFjZUJldHdlZW4pIC8gcGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVTaXplID0gTWF0aC5mbG9vcihzbGlkZVNpemUpO1xuICAgICAgaWYgKHNsaWRlc1tpXSkge1xuICAgICAgICBzbGlkZXNbaV0uc3R5bGVbc3dpcGVyLmdldERpcmVjdGlvbkxhYmVsKCd3aWR0aCcpXSA9IGAke3NsaWRlU2l6ZX1weGA7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzbGlkZXNbaV0pIHtcbiAgICAgIHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemUgPSBzbGlkZVNpemU7XG4gICAgfVxuICAgIHNsaWRlc1NpemVzR3JpZC5wdXNoKHNsaWRlU2l6ZSk7XG4gICAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gKyBzbGlkZVNpemUgLyAyICsgcHJldlNsaWRlU2l6ZSAvIDIgKyBzcGFjZUJldHdlZW47XG4gICAgICBpZiAocHJldlNsaWRlU2l6ZSA9PT0gMCAmJiBpICE9PSAwKSBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiAtIHN3aXBlclNpemUgLyAyIC0gc3BhY2VCZXR3ZWVuO1xuICAgICAgaWYgKGkgPT09IDApIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uIC0gc3dpcGVyU2l6ZSAvIDIgLSBzcGFjZUJldHdlZW47XG4gICAgICBpZiAoTWF0aC5hYnMoc2xpZGVQb3NpdGlvbikgPCAxIC8gMTAwMCkgc2xpZGVQb3NpdGlvbiA9IDA7XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVQb3NpdGlvbiA9IE1hdGguZmxvb3Ioc2xpZGVQb3NpdGlvbik7XG4gICAgICBpZiAoaW5kZXggJSBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgPT09IDApIHNuYXBHcmlkLnB1c2goc2xpZGVQb3NpdGlvbik7XG4gICAgICBzbGlkZXNHcmlkLnB1c2goc2xpZGVQb3NpdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVBvc2l0aW9uID0gTWF0aC5mbG9vcihzbGlkZVBvc2l0aW9uKTtcbiAgICAgIGlmICgoaW5kZXggLSBNYXRoLm1pbihzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCwgaW5kZXgpKSAlIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXAgPT09IDApIHNuYXBHcmlkLnB1c2goc2xpZGVQb3NpdGlvbik7XG4gICAgICBzbGlkZXNHcmlkLnB1c2goc2xpZGVQb3NpdGlvbik7XG4gICAgICBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiArIHNsaWRlU2l6ZSArIHNwYWNlQmV0d2VlbjtcbiAgICB9XG4gICAgc3dpcGVyLnZpcnR1YWxTaXplICs9IHNsaWRlU2l6ZSArIHNwYWNlQmV0d2VlbjtcbiAgICBwcmV2U2xpZGVTaXplID0gc2xpZGVTaXplO1xuICAgIGluZGV4ICs9IDE7XG4gIH1cbiAgc3dpcGVyLnZpcnR1YWxTaXplID0gTWF0aC5tYXgoc3dpcGVyLnZpcnR1YWxTaXplLCBzd2lwZXJTaXplKSArIG9mZnNldEFmdGVyO1xuICBpZiAocnRsICYmIHdyb25nUlRMICYmIChwYXJhbXMuZWZmZWN0ID09PSAnc2xpZGUnIHx8IHBhcmFtcy5lZmZlY3QgPT09ICdjb3ZlcmZsb3cnKSkge1xuICAgIHdyYXBwZXJFbC5zdHlsZS53aWR0aCA9IGAke3N3aXBlci52aXJ0dWFsU2l6ZSArIHNwYWNlQmV0d2Vlbn1weGA7XG4gIH1cbiAgaWYgKHBhcmFtcy5zZXRXcmFwcGVyU2l6ZSkge1xuICAgIHdyYXBwZXJFbC5zdHlsZVtzd2lwZXIuZ2V0RGlyZWN0aW9uTGFiZWwoJ3dpZHRoJyldID0gYCR7c3dpcGVyLnZpcnR1YWxTaXplICsgc3BhY2VCZXR3ZWVufXB4YDtcbiAgfVxuICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICBzd2lwZXIuZ3JpZC51cGRhdGVXcmFwcGVyU2l6ZShzbGlkZVNpemUsIHNuYXBHcmlkKTtcbiAgfVxuXG4gIC8vIFJlbW92ZSBsYXN0IGdyaWQgZWxlbWVudHMgZGVwZW5kaW5nIG9uIHdpZHRoXG4gIGlmICghcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgY29uc3QgbmV3U2xpZGVzR3JpZCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc25hcEdyaWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGxldCBzbGlkZXNHcmlkSXRlbSA9IHNuYXBHcmlkW2ldO1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlc0dyaWRJdGVtID0gTWF0aC5mbG9vcihzbGlkZXNHcmlkSXRlbSk7XG4gICAgICBpZiAoc25hcEdyaWRbaV0gPD0gc3dpcGVyLnZpcnR1YWxTaXplIC0gc3dpcGVyU2l6ZSkge1xuICAgICAgICBuZXdTbGlkZXNHcmlkLnB1c2goc2xpZGVzR3JpZEl0ZW0pO1xuICAgICAgfVxuICAgIH1cbiAgICBzbmFwR3JpZCA9IG5ld1NsaWRlc0dyaWQ7XG4gICAgaWYgKE1hdGguZmxvb3Ioc3dpcGVyLnZpcnR1YWxTaXplIC0gc3dpcGVyU2l6ZSkgLSBNYXRoLmZsb29yKHNuYXBHcmlkW3NuYXBHcmlkLmxlbmd0aCAtIDFdKSA+IDEpIHtcbiAgICAgIHNuYXBHcmlkLnB1c2goc3dpcGVyLnZpcnR1YWxTaXplIC0gc3dpcGVyU2l6ZSk7XG4gICAgfVxuICB9XG4gIGlmIChpc1ZpcnR1YWwgJiYgcGFyYW1zLmxvb3ApIHtcbiAgICBjb25zdCBzaXplID0gc2xpZGVzU2l6ZXNHcmlkWzBdICsgc3BhY2VCZXR3ZWVuO1xuICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyR3JvdXAgPiAxKSB7XG4gICAgICBjb25zdCBncm91cHMgPSBNYXRoLmNlaWwoKHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZSArIHN3aXBlci52aXJ0dWFsLnNsaWRlc0FmdGVyKSAvIHBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gICAgICBjb25zdCBncm91cFNpemUgPSBzaXplICogcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBncm91cHM7IGkgKz0gMSkge1xuICAgICAgICBzbmFwR3JpZC5wdXNoKHNuYXBHcmlkW3NuYXBHcmlkLmxlbmd0aCAtIDFdICsgZ3JvdXBTaXplKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmUgKyBzd2lwZXIudmlydHVhbC5zbGlkZXNBZnRlcjsgaSArPSAxKSB7XG4gICAgICBpZiAocGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAxKSB7XG4gICAgICAgIHNuYXBHcmlkLnB1c2goc25hcEdyaWRbc25hcEdyaWQubGVuZ3RoIC0gMV0gKyBzaXplKTtcbiAgICAgIH1cbiAgICAgIHNsaWRlc0dyaWQucHVzaChzbGlkZXNHcmlkW3NsaWRlc0dyaWQubGVuZ3RoIC0gMV0gKyBzaXplKTtcbiAgICAgIHN3aXBlci52aXJ0dWFsU2l6ZSArPSBzaXplO1xuICAgIH1cbiAgfVxuICBpZiAoc25hcEdyaWQubGVuZ3RoID09PSAwKSBzbmFwR3JpZCA9IFswXTtcbiAgaWYgKHNwYWNlQmV0d2VlbiAhPT0gMCkge1xuICAgIGNvbnN0IGtleSA9IHN3aXBlci5pc0hvcml6b250YWwoKSAmJiBydGwgPyAnbWFyZ2luTGVmdCcgOiBzd2lwZXIuZ2V0RGlyZWN0aW9uTGFiZWwoJ21hcmdpblJpZ2h0Jyk7XG4gICAgc2xpZGVzLmZpbHRlcigoXywgc2xpZGVJbmRleCkgPT4ge1xuICAgICAgaWYgKCFwYXJhbXMuY3NzTW9kZSB8fCBwYXJhbXMubG9vcCkgcmV0dXJuIHRydWU7XG4gICAgICBpZiAoc2xpZGVJbmRleCA9PT0gc2xpZGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSkuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgIHNsaWRlRWwuc3R5bGVba2V5XSA9IGAke3NwYWNlQmV0d2Vlbn1weGA7XG4gICAgfSk7XG4gIH1cbiAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBwYXJhbXMuY2VudGVyZWRTbGlkZXNCb3VuZHMpIHtcbiAgICBsZXQgYWxsU2xpZGVzU2l6ZSA9IDA7XG4gICAgc2xpZGVzU2l6ZXNHcmlkLmZvckVhY2goc2xpZGVTaXplVmFsdWUgPT4ge1xuICAgICAgYWxsU2xpZGVzU2l6ZSArPSBzbGlkZVNpemVWYWx1ZSArIChzcGFjZUJldHdlZW4gfHwgMCk7XG4gICAgfSk7XG4gICAgYWxsU2xpZGVzU2l6ZSAtPSBzcGFjZUJldHdlZW47XG4gICAgY29uc3QgbWF4U25hcCA9IGFsbFNsaWRlc1NpemUgPiBzd2lwZXJTaXplID8gYWxsU2xpZGVzU2l6ZSAtIHN3aXBlclNpemUgOiAwO1xuICAgIHNuYXBHcmlkID0gc25hcEdyaWQubWFwKHNuYXAgPT4ge1xuICAgICAgaWYgKHNuYXAgPD0gMCkgcmV0dXJuIC1vZmZzZXRCZWZvcmU7XG4gICAgICBpZiAoc25hcCA+IG1heFNuYXApIHJldHVybiBtYXhTbmFwICsgb2Zmc2V0QWZ0ZXI7XG4gICAgICByZXR1cm4gc25hcDtcbiAgICB9KTtcbiAgfVxuICBpZiAocGFyYW1zLmNlbnRlckluc3VmZmljaWVudFNsaWRlcykge1xuICAgIGxldCBhbGxTbGlkZXNTaXplID0gMDtcbiAgICBzbGlkZXNTaXplc0dyaWQuZm9yRWFjaChzbGlkZVNpemVWYWx1ZSA9PiB7XG4gICAgICBhbGxTbGlkZXNTaXplICs9IHNsaWRlU2l6ZVZhbHVlICsgKHNwYWNlQmV0d2VlbiB8fCAwKTtcbiAgICB9KTtcbiAgICBhbGxTbGlkZXNTaXplIC09IHNwYWNlQmV0d2VlbjtcbiAgICBjb25zdCBvZmZzZXRTaXplID0gKHBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmUgfHwgMCkgKyAocGFyYW1zLnNsaWRlc09mZnNldEFmdGVyIHx8IDApO1xuICAgIGlmIChhbGxTbGlkZXNTaXplICsgb2Zmc2V0U2l6ZSA8IHN3aXBlclNpemUpIHtcbiAgICAgIGNvbnN0IGFsbFNsaWRlc09mZnNldCA9IChzd2lwZXJTaXplIC0gYWxsU2xpZGVzU2l6ZSAtIG9mZnNldFNpemUpIC8gMjtcbiAgICAgIHNuYXBHcmlkLmZvckVhY2goKHNuYXAsIHNuYXBJbmRleCkgPT4ge1xuICAgICAgICBzbmFwR3JpZFtzbmFwSW5kZXhdID0gc25hcCAtIGFsbFNsaWRlc09mZnNldDtcbiAgICAgIH0pO1xuICAgICAgc2xpZGVzR3JpZC5mb3JFYWNoKChzbmFwLCBzbmFwSW5kZXgpID0+IHtcbiAgICAgICAgc2xpZGVzR3JpZFtzbmFwSW5kZXhdID0gc25hcCArIGFsbFNsaWRlc09mZnNldDtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgIHNsaWRlcyxcbiAgICBzbmFwR3JpZCxcbiAgICBzbGlkZXNHcmlkLFxuICAgIHNsaWRlc1NpemVzR3JpZFxuICB9KTtcbiAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBwYXJhbXMuY3NzTW9kZSAmJiAhcGFyYW1zLmNlbnRlcmVkU2xpZGVzQm91bmRzKSB7XG4gICAgc2V0Q1NTUHJvcGVydHkod3JhcHBlckVsLCAnLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWJlZm9yZScsIGAkey1zbmFwR3JpZFswXX1weGApO1xuICAgIHNldENTU1Byb3BlcnR5KHdyYXBwZXJFbCwgJy0tc3dpcGVyLWNlbnRlcmVkLW9mZnNldC1hZnRlcicsIGAke3N3aXBlci5zaXplIC8gMiAtIHNsaWRlc1NpemVzR3JpZFtzbGlkZXNTaXplc0dyaWQubGVuZ3RoIC0gMV0gLyAyfXB4YCk7XG4gICAgY29uc3QgYWRkVG9TbmFwR3JpZCA9IC1zd2lwZXIuc25hcEdyaWRbMF07XG4gICAgY29uc3QgYWRkVG9TbGlkZXNHcmlkID0gLXN3aXBlci5zbGlkZXNHcmlkWzBdO1xuICAgIHN3aXBlci5zbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZC5tYXAodiA9PiB2ICsgYWRkVG9TbmFwR3JpZCk7XG4gICAgc3dpcGVyLnNsaWRlc0dyaWQgPSBzd2lwZXIuc2xpZGVzR3JpZC5tYXAodiA9PiB2ICsgYWRkVG9TbGlkZXNHcmlkKTtcbiAgfVxuICBpZiAoc2xpZGVzTGVuZ3RoICE9PSBwcmV2aW91c1NsaWRlc0xlbmd0aCkge1xuICAgIHN3aXBlci5lbWl0KCdzbGlkZXNMZW5ndGhDaGFuZ2UnKTtcbiAgfVxuICBpZiAoc25hcEdyaWQubGVuZ3RoICE9PSBwcmV2aW91c1NuYXBHcmlkTGVuZ3RoKSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdykgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTtcbiAgICBzd2lwZXIuZW1pdCgnc25hcEdyaWRMZW5ndGhDaGFuZ2UnKTtcbiAgfVxuICBpZiAoc2xpZGVzR3JpZC5sZW5ndGggIT09IHByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCkge1xuICAgIHN3aXBlci5lbWl0KCdzbGlkZXNHcmlkTGVuZ3RoQ2hhbmdlJyk7XG4gIH1cbiAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICB9XG4gIHN3aXBlci5lbWl0KCdzbGlkZXNVcGRhdGVkJyk7XG4gIGlmICghaXNWaXJ0dWFsICYmICFwYXJhbXMuY3NzTW9kZSAmJiAocGFyYW1zLmVmZmVjdCA9PT0gJ3NsaWRlJyB8fCBwYXJhbXMuZWZmZWN0ID09PSAnZmFkZScpKSB7XG4gICAgY29uc3QgYmFja0ZhY2VIaWRkZW5DbGFzcyA9IGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWJhY2tmYWNlLWhpZGRlbmA7XG4gICAgY29uc3QgaGFzQ2xhc3NCYWNrZmFjZUNsYXNzQWRkZWQgPSBzd2lwZXIuZWwuY2xhc3NMaXN0LmNvbnRhaW5zKGJhY2tGYWNlSGlkZGVuQ2xhc3MpO1xuICAgIGlmIChzbGlkZXNMZW5ndGggPD0gcGFyYW1zLm1heEJhY2tmYWNlSGlkZGVuU2xpZGVzKSB7XG4gICAgICBpZiAoIWhhc0NsYXNzQmFja2ZhY2VDbGFzc0FkZGVkKSBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZChiYWNrRmFjZUhpZGRlbkNsYXNzKTtcbiAgICB9IGVsc2UgaWYgKGhhc0NsYXNzQmFja2ZhY2VDbGFzc0FkZGVkKSB7XG4gICAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LnJlbW92ZShiYWNrRmFjZUhpZGRlbkNsYXNzKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQXV0b0hlaWdodChzcGVlZCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBhY3RpdmVTbGlkZXMgPSBbXTtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIGxldCBuZXdIZWlnaHQgPSAwO1xuICBsZXQgaTtcbiAgaWYgKHR5cGVvZiBzcGVlZCA9PT0gJ251bWJlcicpIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gIH0gZWxzZSBpZiAoc3BlZWQgPT09IHRydWUpIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzd2lwZXIucGFyYW1zLnNwZWVkKTtcbiAgfVxuICBjb25zdCBnZXRTbGlkZUJ5SW5kZXggPSBpbmRleCA9PiB7XG4gICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgcmV0dXJuIHN3aXBlci5zbGlkZXNbc3dpcGVyLmdldFNsaWRlSW5kZXhCeURhdGEoaW5kZXgpXTtcbiAgICB9XG4gICAgcmV0dXJuIHN3aXBlci5zbGlkZXNbaW5kZXhdO1xuICB9O1xuICAvLyBGaW5kIHNsaWRlcyBjdXJyZW50bHkgaW4gdmlld1xuICBpZiAoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycgJiYgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAoc3dpcGVyLnZpc2libGVTbGlkZXMgfHwgW10pLmZvckVhY2goc2xpZGUgPT4ge1xuICAgICAgICBhY3RpdmVTbGlkZXMucHVzaChzbGlkZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMDsgaSA8IE1hdGguY2VpbChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcpOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXggKyBpO1xuICAgICAgICBpZiAoaW5kZXggPiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAmJiAhaXNWaXJ0dWFsKSBicmVhaztcbiAgICAgICAgYWN0aXZlU2xpZGVzLnB1c2goZ2V0U2xpZGVCeUluZGV4KGluZGV4KSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGFjdGl2ZVNsaWRlcy5wdXNoKGdldFNsaWRlQnlJbmRleChzd2lwZXIuYWN0aXZlSW5kZXgpKTtcbiAgfVxuXG4gIC8vIEZpbmQgbmV3IGhlaWdodCBmcm9tIGhpZ2hlc3Qgc2xpZGUgaW4gdmlld1xuICBmb3IgKGkgPSAwOyBpIDwgYWN0aXZlU2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHR5cGVvZiBhY3RpdmVTbGlkZXNbaV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zdCBoZWlnaHQgPSBhY3RpdmVTbGlkZXNbaV0ub2Zmc2V0SGVpZ2h0O1xuICAgICAgbmV3SGVpZ2h0ID0gaGVpZ2h0ID4gbmV3SGVpZ2h0ID8gaGVpZ2h0IDogbmV3SGVpZ2h0O1xuICAgIH1cbiAgfVxuXG4gIC8vIFVwZGF0ZSBIZWlnaHRcbiAgaWYgKG5ld0hlaWdodCB8fCBuZXdIZWlnaHQgPT09IDApIHN3aXBlci53cmFwcGVyRWwuc3R5bGUuaGVpZ2h0ID0gYCR7bmV3SGVpZ2h0fXB4YDtcbn1cblxuZnVuY3Rpb24gdXBkYXRlU2xpZGVzT2Zmc2V0KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgY29uc3QgbWludXNPZmZzZXQgPSBzd2lwZXIuaXNFbGVtZW50ID8gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gc3dpcGVyLndyYXBwZXJFbC5vZmZzZXRMZWZ0IDogc3dpcGVyLndyYXBwZXJFbC5vZmZzZXRUb3AgOiAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHNsaWRlc1tpXS5zd2lwZXJTbGlkZU9mZnNldCA9IChzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBzbGlkZXNbaV0ub2Zmc2V0TGVmdCA6IHNsaWRlc1tpXS5vZmZzZXRUb3ApIC0gbWludXNPZmZzZXQgLSBzd2lwZXIuY3NzT3ZlcmZsb3dBZGp1c3RtZW50KCk7XG4gIH1cbn1cblxuY29uc3QgdG9nZ2xlU2xpZGVDbGFzc2VzJDEgPSAoc2xpZGVFbCwgY29uZGl0aW9uLCBjbGFzc05hbWUpID0+IHtcbiAgaWYgKGNvbmRpdGlvbiAmJiAhc2xpZGVFbC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSkge1xuICAgIHNsaWRlRWwuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICB9IGVsc2UgaWYgKCFjb25kaXRpb24gJiYgc2xpZGVFbC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSkge1xuICAgIHNsaWRlRWwuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xuICB9XG59O1xuZnVuY3Rpb24gdXBkYXRlU2xpZGVzUHJvZ3Jlc3ModHJhbnNsYXRlKSB7XG4gIGlmICh0cmFuc2xhdGUgPT09IHZvaWQgMCkge1xuICAgIHRyYW5zbGF0ZSA9IHRoaXMgJiYgdGhpcy50cmFuc2xhdGUgfHwgMDtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICBjb25zdCB7XG4gICAgc2xpZGVzLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHNuYXBHcmlkXG4gIH0gPSBzd2lwZXI7XG4gIGlmIChzbGlkZXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gIGlmICh0eXBlb2Ygc2xpZGVzWzBdLnN3aXBlclNsaWRlT2Zmc2V0ID09PSAndW5kZWZpbmVkJykgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICBsZXQgb2Zmc2V0Q2VudGVyID0gLXRyYW5zbGF0ZTtcbiAgaWYgKHJ0bCkgb2Zmc2V0Q2VudGVyID0gdHJhbnNsYXRlO1xuICBzd2lwZXIudmlzaWJsZVNsaWRlc0luZGV4ZXMgPSBbXTtcbiAgc3dpcGVyLnZpc2libGVTbGlkZXMgPSBbXTtcbiAgbGV0IHNwYWNlQmV0d2VlbiA9IHBhcmFtcy5zcGFjZUJldHdlZW47XG4gIGlmICh0eXBlb2Ygc3BhY2VCZXR3ZWVuID09PSAnc3RyaW5nJyAmJiBzcGFjZUJldHdlZW4uaW5kZXhPZignJScpID49IDApIHtcbiAgICBzcGFjZUJldHdlZW4gPSBwYXJzZUZsb2F0KHNwYWNlQmV0d2Vlbi5yZXBsYWNlKCclJywgJycpKSAvIDEwMCAqIHN3aXBlci5zaXplO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBzcGFjZUJldHdlZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgc3BhY2VCZXR3ZWVuID0gcGFyc2VGbG9hdChzcGFjZUJldHdlZW4pO1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3Qgc2xpZGUgPSBzbGlkZXNbaV07XG4gICAgbGV0IHNsaWRlT2Zmc2V0ID0gc2xpZGUuc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgaWYgKHBhcmFtcy5jc3NNb2RlICYmIHBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgc2xpZGVPZmZzZXQgLT0gc2xpZGVzWzBdLnN3aXBlclNsaWRlT2Zmc2V0O1xuICAgIH1cbiAgICBjb25zdCBzbGlkZVByb2dyZXNzID0gKG9mZnNldENlbnRlciArIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgPyBzd2lwZXIubWluVHJhbnNsYXRlKCkgOiAwKSAtIHNsaWRlT2Zmc2V0KSAvIChzbGlkZS5zd2lwZXJTbGlkZVNpemUgKyBzcGFjZUJldHdlZW4pO1xuICAgIGNvbnN0IG9yaWdpbmFsU2xpZGVQcm9ncmVzcyA9IChvZmZzZXRDZW50ZXIgLSBzbmFwR3JpZFswXSArIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgPyBzd2lwZXIubWluVHJhbnNsYXRlKCkgOiAwKSAtIHNsaWRlT2Zmc2V0KSAvIChzbGlkZS5zd2lwZXJTbGlkZVNpemUgKyBzcGFjZUJldHdlZW4pO1xuICAgIGNvbnN0IHNsaWRlQmVmb3JlID0gLShvZmZzZXRDZW50ZXIgLSBzbGlkZU9mZnNldCk7XG4gICAgY29uc3Qgc2xpZGVBZnRlciA9IHNsaWRlQmVmb3JlICsgc3dpcGVyLnNsaWRlc1NpemVzR3JpZFtpXTtcbiAgICBjb25zdCBpc0Z1bGx5VmlzaWJsZSA9IHNsaWRlQmVmb3JlID49IDAgJiYgc2xpZGVCZWZvcmUgPD0gc3dpcGVyLnNpemUgLSBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW2ldO1xuICAgIGNvbnN0IGlzVmlzaWJsZSA9IHNsaWRlQmVmb3JlID49IDAgJiYgc2xpZGVCZWZvcmUgPCBzd2lwZXIuc2l6ZSAtIDEgfHwgc2xpZGVBZnRlciA+IDEgJiYgc2xpZGVBZnRlciA8PSBzd2lwZXIuc2l6ZSB8fCBzbGlkZUJlZm9yZSA8PSAwICYmIHNsaWRlQWZ0ZXIgPj0gc3dpcGVyLnNpemU7XG4gICAgaWYgKGlzVmlzaWJsZSkge1xuICAgICAgc3dpcGVyLnZpc2libGVTbGlkZXMucHVzaChzbGlkZSk7XG4gICAgICBzd2lwZXIudmlzaWJsZVNsaWRlc0luZGV4ZXMucHVzaChpKTtcbiAgICB9XG4gICAgdG9nZ2xlU2xpZGVDbGFzc2VzJDEoc2xpZGUsIGlzVmlzaWJsZSwgcGFyYW1zLnNsaWRlVmlzaWJsZUNsYXNzKTtcbiAgICB0b2dnbGVTbGlkZUNsYXNzZXMkMShzbGlkZSwgaXNGdWxseVZpc2libGUsIHBhcmFtcy5zbGlkZUZ1bGx5VmlzaWJsZUNsYXNzKTtcbiAgICBzbGlkZS5wcm9ncmVzcyA9IHJ0bCA/IC1zbGlkZVByb2dyZXNzIDogc2xpZGVQcm9ncmVzcztcbiAgICBzbGlkZS5vcmlnaW5hbFByb2dyZXNzID0gcnRsID8gLW9yaWdpbmFsU2xpZGVQcm9ncmVzcyA6IG9yaWdpbmFsU2xpZGVQcm9ncmVzcztcbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVQcm9ncmVzcyh0cmFuc2xhdGUpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKHR5cGVvZiB0cmFuc2xhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc3QgbXVsdGlwbGllciA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyAtMSA6IDE7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgdHJhbnNsYXRlID0gc3dpcGVyICYmIHN3aXBlci50cmFuc2xhdGUgJiYgc3dpcGVyLnRyYW5zbGF0ZSAqIG11bHRpcGxpZXIgfHwgMDtcbiAgfVxuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICBjb25zdCB0cmFuc2xhdGVzRGlmZiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgbGV0IHtcbiAgICBwcm9ncmVzcyxcbiAgICBpc0JlZ2lubmluZyxcbiAgICBpc0VuZCxcbiAgICBwcm9ncmVzc0xvb3BcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3Qgd2FzQmVnaW5uaW5nID0gaXNCZWdpbm5pbmc7XG4gIGNvbnN0IHdhc0VuZCA9IGlzRW5kO1xuICBpZiAodHJhbnNsYXRlc0RpZmYgPT09IDApIHtcbiAgICBwcm9ncmVzcyA9IDA7XG4gICAgaXNCZWdpbm5pbmcgPSB0cnVlO1xuICAgIGlzRW5kID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBwcm9ncmVzcyA9ICh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gdHJhbnNsYXRlc0RpZmY7XG4gICAgY29uc3QgaXNCZWdpbm5pbmdSb3VuZGVkID0gTWF0aC5hYnModHJhbnNsYXRlIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSA8IDE7XG4gICAgY29uc3QgaXNFbmRSb3VuZGVkID0gTWF0aC5hYnModHJhbnNsYXRlIC0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSA8IDE7XG4gICAgaXNCZWdpbm5pbmcgPSBpc0JlZ2lubmluZ1JvdW5kZWQgfHwgcHJvZ3Jlc3MgPD0gMDtcbiAgICBpc0VuZCA9IGlzRW5kUm91bmRlZCB8fCBwcm9ncmVzcyA+PSAxO1xuICAgIGlmIChpc0JlZ2lubmluZ1JvdW5kZWQpIHByb2dyZXNzID0gMDtcbiAgICBpZiAoaXNFbmRSb3VuZGVkKSBwcm9ncmVzcyA9IDE7XG4gIH1cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgY29uc3QgZmlyc3RTbGlkZUluZGV4ID0gc3dpcGVyLmdldFNsaWRlSW5kZXhCeURhdGEoMCk7XG4gICAgY29uc3QgbGFzdFNsaWRlSW5kZXggPSBzd2lwZXIuZ2V0U2xpZGVJbmRleEJ5RGF0YShzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEpO1xuICAgIGNvbnN0IGZpcnN0U2xpZGVUcmFuc2xhdGUgPSBzd2lwZXIuc2xpZGVzR3JpZFtmaXJzdFNsaWRlSW5kZXhdO1xuICAgIGNvbnN0IGxhc3RTbGlkZVRyYW5zbGF0ZSA9IHN3aXBlci5zbGlkZXNHcmlkW2xhc3RTbGlkZUluZGV4XTtcbiAgICBjb25zdCB0cmFuc2xhdGVNYXggPSBzd2lwZXIuc2xpZGVzR3JpZFtzd2lwZXIuc2xpZGVzR3JpZC5sZW5ndGggLSAxXTtcbiAgICBjb25zdCB0cmFuc2xhdGVBYnMgPSBNYXRoLmFicyh0cmFuc2xhdGUpO1xuICAgIGlmICh0cmFuc2xhdGVBYnMgPj0gZmlyc3RTbGlkZVRyYW5zbGF0ZSkge1xuICAgICAgcHJvZ3Jlc3NMb29wID0gKHRyYW5zbGF0ZUFicyAtIGZpcnN0U2xpZGVUcmFuc2xhdGUpIC8gdHJhbnNsYXRlTWF4O1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9ncmVzc0xvb3AgPSAodHJhbnNsYXRlQWJzICsgdHJhbnNsYXRlTWF4IC0gbGFzdFNsaWRlVHJhbnNsYXRlKSAvIHRyYW5zbGF0ZU1heDtcbiAgICB9XG4gICAgaWYgKHByb2dyZXNzTG9vcCA+IDEpIHByb2dyZXNzTG9vcCAtPSAxO1xuICB9XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgcHJvZ3Jlc3MsXG4gICAgcHJvZ3Jlc3NMb29wLFxuICAgIGlzQmVnaW5uaW5nLFxuICAgIGlzRW5kXG4gIH0pO1xuICBpZiAocGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgfHwgcGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHBhcmFtcy5hdXRvSGVpZ2h0KSBzd2lwZXIudXBkYXRlU2xpZGVzUHJvZ3Jlc3ModHJhbnNsYXRlKTtcbiAgaWYgKGlzQmVnaW5uaW5nICYmICF3YXNCZWdpbm5pbmcpIHtcbiAgICBzd2lwZXIuZW1pdCgncmVhY2hCZWdpbm5pbmcgdG9FZGdlJyk7XG4gIH1cbiAgaWYgKGlzRW5kICYmICF3YXNFbmQpIHtcbiAgICBzd2lwZXIuZW1pdCgncmVhY2hFbmQgdG9FZGdlJyk7XG4gIH1cbiAgaWYgKHdhc0JlZ2lubmluZyAmJiAhaXNCZWdpbm5pbmcgfHwgd2FzRW5kICYmICFpc0VuZCkge1xuICAgIHN3aXBlci5lbWl0KCdmcm9tRWRnZScpO1xuICB9XG4gIHN3aXBlci5lbWl0KCdwcm9ncmVzcycsIHByb2dyZXNzKTtcbn1cblxuY29uc3QgdG9nZ2xlU2xpZGVDbGFzc2VzID0gKHNsaWRlRWwsIGNvbmRpdGlvbiwgY2xhc3NOYW1lKSA9PiB7XG4gIGlmIChjb25kaXRpb24gJiYgIXNsaWRlRWwuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSkpIHtcbiAgICBzbGlkZUVsLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgfSBlbHNlIGlmICghY29uZGl0aW9uICYmIHNsaWRlRWwuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSkpIHtcbiAgICBzbGlkZUVsLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgfVxufTtcbmZ1bmN0aW9uIHVwZGF0ZVNsaWRlc0NsYXNzZXMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBzbGlkZXMsXG4gICAgcGFyYW1zLFxuICAgIHNsaWRlc0VsLFxuICAgIGFjdGl2ZUluZGV4XG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIGNvbnN0IGdyaWRFbmFibGVkID0gc3dpcGVyLmdyaWQgJiYgcGFyYW1zLmdyaWQgJiYgcGFyYW1zLmdyaWQucm93cyA+IDE7XG4gIGNvbnN0IGdldEZpbHRlcmVkU2xpZGUgPSBzZWxlY3RvciA9PiB7XG4gICAgcmV0dXJuIGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSR7c2VsZWN0b3J9LCBzd2lwZXItc2xpZGUke3NlbGVjdG9yfWApWzBdO1xuICB9O1xuICBsZXQgYWN0aXZlU2xpZGU7XG4gIGxldCBwcmV2U2xpZGU7XG4gIGxldCBuZXh0U2xpZGU7XG4gIGlmIChpc1ZpcnR1YWwpIHtcbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIGxldCBzbGlkZUluZGV4ID0gYWN0aXZlSW5kZXggLSBzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmU7XG4gICAgICBpZiAoc2xpZGVJbmRleCA8IDApIHNsaWRlSW5kZXggPSBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoICsgc2xpZGVJbmRleDtcbiAgICAgIGlmIChzbGlkZUluZGV4ID49IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGgpIHNsaWRlSW5kZXggLT0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aDtcbiAgICAgIGFjdGl2ZVNsaWRlID0gZ2V0RmlsdGVyZWRTbGlkZShgW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtzbGlkZUluZGV4fVwiXWApO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY3RpdmVTbGlkZSA9IGdldEZpbHRlcmVkU2xpZGUoYFtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7YWN0aXZlSW5kZXh9XCJdYCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChncmlkRW5hYmxlZCkge1xuICAgICAgYWN0aXZlU2xpZGUgPSBzbGlkZXMuZmluZChzbGlkZUVsID0+IHNsaWRlRWwuY29sdW1uID09PSBhY3RpdmVJbmRleCk7XG4gICAgICBuZXh0U2xpZGUgPSBzbGlkZXMuZmluZChzbGlkZUVsID0+IHNsaWRlRWwuY29sdW1uID09PSBhY3RpdmVJbmRleCArIDEpO1xuICAgICAgcHJldlNsaWRlID0gc2xpZGVzLmZpbmQoc2xpZGVFbCA9PiBzbGlkZUVsLmNvbHVtbiA9PT0gYWN0aXZlSW5kZXggLSAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWN0aXZlU2xpZGUgPSBzbGlkZXNbYWN0aXZlSW5kZXhdO1xuICAgIH1cbiAgfVxuICBpZiAoYWN0aXZlU2xpZGUpIHtcbiAgICBpZiAoIWdyaWRFbmFibGVkKSB7XG4gICAgICAvLyBOZXh0IFNsaWRlXG4gICAgICBuZXh0U2xpZGUgPSBlbGVtZW50TmV4dEFsbChhY3RpdmVTbGlkZSwgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYClbMF07XG4gICAgICBpZiAocGFyYW1zLmxvb3AgJiYgIW5leHRTbGlkZSkge1xuICAgICAgICBuZXh0U2xpZGUgPSBzbGlkZXNbMF07XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXYgU2xpZGVcbiAgICAgIHByZXZTbGlkZSA9IGVsZW1lbnRQcmV2QWxsKGFjdGl2ZVNsaWRlLCBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKVswXTtcbiAgICAgIGlmIChwYXJhbXMubG9vcCAmJiAhcHJldlNsaWRlID09PSAwKSB7XG4gICAgICAgIHByZXZTbGlkZSA9IHNsaWRlc1tzbGlkZXMubGVuZ3RoIC0gMV07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgIHRvZ2dsZVNsaWRlQ2xhc3NlcyhzbGlkZUVsLCBzbGlkZUVsID09PSBhY3RpdmVTbGlkZSwgcGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MpO1xuICAgIHRvZ2dsZVNsaWRlQ2xhc3NlcyhzbGlkZUVsLCBzbGlkZUVsID09PSBuZXh0U2xpZGUsIHBhcmFtcy5zbGlkZU5leHRDbGFzcyk7XG4gICAgdG9nZ2xlU2xpZGVDbGFzc2VzKHNsaWRlRWwsIHNsaWRlRWwgPT09IHByZXZTbGlkZSwgcGFyYW1zLnNsaWRlUHJldkNsYXNzKTtcbiAgfSk7XG4gIHN3aXBlci5lbWl0U2xpZGVzQ2xhc3NlcygpO1xufVxuXG5jb25zdCBwcm9jZXNzTGF6eVByZWxvYWRlciA9IChzd2lwZXIsIGltYWdlRWwpID0+IHtcbiAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLnBhcmFtcykgcmV0dXJuO1xuICBjb25zdCBzbGlkZVNlbGVjdG9yID0gKCkgPT4gc3dpcGVyLmlzRWxlbWVudCA/IGBzd2lwZXItc2xpZGVgIDogYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31gO1xuICBjb25zdCBzbGlkZUVsID0gaW1hZ2VFbC5jbG9zZXN0KHNsaWRlU2VsZWN0b3IoKSk7XG4gIGlmIChzbGlkZUVsKSB7XG4gICAgbGV0IGxhenlFbCA9IHNsaWRlRWwucXVlcnlTZWxlY3RvcihgLiR7c3dpcGVyLnBhcmFtcy5sYXp5UHJlbG9hZGVyQ2xhc3N9YCk7XG4gICAgaWYgKCFsYXp5RWwgJiYgc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgaWYgKHNsaWRlRWwuc2hhZG93Um9vdCkge1xuICAgICAgICBsYXp5RWwgPSBzbGlkZUVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihgLiR7c3dpcGVyLnBhcmFtcy5sYXp5UHJlbG9hZGVyQ2xhc3N9YCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBpbml0IGxhdGVyXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgaWYgKHNsaWRlRWwuc2hhZG93Um9vdCkge1xuICAgICAgICAgICAgbGF6eUVsID0gc2xpZGVFbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoYC4ke3N3aXBlci5wYXJhbXMubGF6eVByZWxvYWRlckNsYXNzfWApO1xuICAgICAgICAgICAgaWYgKGxhenlFbCkgbGF6eUVsLnJlbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChsYXp5RWwpIGxhenlFbC5yZW1vdmUoKTtcbiAgfVxufTtcbmNvbnN0IHVubGF6eSA9IChzd2lwZXIsIGluZGV4KSA9PiB7XG4gIGlmICghc3dpcGVyLnNsaWRlc1tpbmRleF0pIHJldHVybjtcbiAgY29uc3QgaW1hZ2VFbCA9IHN3aXBlci5zbGlkZXNbaW5kZXhdLnF1ZXJ5U2VsZWN0b3IoJ1tsb2FkaW5nPVwibGF6eVwiXScpO1xuICBpZiAoaW1hZ2VFbCkgaW1hZ2VFbC5yZW1vdmVBdHRyaWJ1dGUoJ2xvYWRpbmcnKTtcbn07XG5jb25zdCBwcmVsb2FkID0gc3dpcGVyID0+IHtcbiAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLnBhcmFtcykgcmV0dXJuO1xuICBsZXQgYW1vdW50ID0gc3dpcGVyLnBhcmFtcy5sYXp5UHJlbG9hZFByZXZOZXh0O1xuICBjb25zdCBsZW4gPSBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgaWYgKCFsZW4gfHwgIWFtb3VudCB8fCBhbW91bnQgPCAwKSByZXR1cm47XG4gIGFtb3VudCA9IE1hdGgubWluKGFtb3VudCwgbGVuKTtcbiAgY29uc3Qgc2xpZGVzUGVyVmlldyA9IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nID8gc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCkgOiBNYXRoLmNlaWwoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3KTtcbiAgY29uc3QgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gIGlmIChzd2lwZXIucGFyYW1zLmdyaWQgJiYgc3dpcGVyLnBhcmFtcy5ncmlkLnJvd3MgPiAxKSB7XG4gICAgY29uc3QgYWN0aXZlQ29sdW1uID0gYWN0aXZlSW5kZXg7XG4gICAgY29uc3QgcHJlbG9hZENvbHVtbnMgPSBbYWN0aXZlQ29sdW1uIC0gYW1vdW50XTtcbiAgICBwcmVsb2FkQ29sdW1ucy5wdXNoKC4uLkFycmF5LmZyb20oe1xuICAgICAgbGVuZ3RoOiBhbW91bnRcbiAgICB9KS5tYXAoKF8sIGkpID0+IHtcbiAgICAgIHJldHVybiBhY3RpdmVDb2x1bW4gKyBzbGlkZXNQZXJWaWV3ICsgaTtcbiAgICB9KSk7XG4gICAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKChzbGlkZUVsLCBpKSA9PiB7XG4gICAgICBpZiAocHJlbG9hZENvbHVtbnMuaW5jbHVkZXMoc2xpZGVFbC5jb2x1bW4pKSB1bmxhenkoc3dpcGVyLCBpKTtcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3Qgc2xpZGVJbmRleExhc3RJblZpZXcgPSBhY3RpdmVJbmRleCArIHNsaWRlc1BlclZpZXcgLSAxO1xuICBpZiAoc3dpcGVyLnBhcmFtcy5yZXdpbmQgfHwgc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4IC0gYW1vdW50OyBpIDw9IHNsaWRlSW5kZXhMYXN0SW5WaWV3ICsgYW1vdW50OyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IHJlYWxJbmRleCA9IChpICUgbGVuICsgbGVuKSAlIGxlbjtcbiAgICAgIGlmIChyZWFsSW5kZXggPCBhY3RpdmVJbmRleCB8fCByZWFsSW5kZXggPiBzbGlkZUluZGV4TGFzdEluVmlldykgdW5sYXp5KHN3aXBlciwgcmVhbEluZGV4KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yIChsZXQgaSA9IE1hdGgubWF4KGFjdGl2ZUluZGV4IC0gYW1vdW50LCAwKTsgaSA8PSBNYXRoLm1pbihzbGlkZUluZGV4TGFzdEluVmlldyArIGFtb3VudCwgbGVuIC0gMSk7IGkgKz0gMSkge1xuICAgICAgaWYgKGkgIT09IGFjdGl2ZUluZGV4ICYmIChpID4gc2xpZGVJbmRleExhc3RJblZpZXcgfHwgaSA8IGFjdGl2ZUluZGV4KSkge1xuICAgICAgICB1bmxhenkoc3dpcGVyLCBpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldEFjdGl2ZUluZGV4QnlUcmFuc2xhdGUoc3dpcGVyKSB7XG4gIGNvbnN0IHtcbiAgICBzbGlkZXNHcmlkLFxuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBjb25zdCB0cmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICBsZXQgYWN0aXZlSW5kZXg7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh0eXBlb2Ygc2xpZGVzR3JpZFtpICsgMV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0gJiYgdHJhbnNsYXRlIDwgc2xpZGVzR3JpZFtpICsgMV0gLSAoc2xpZGVzR3JpZFtpICsgMV0gLSBzbGlkZXNHcmlkW2ldKSAvIDIpIHtcbiAgICAgICAgYWN0aXZlSW5kZXggPSBpO1xuICAgICAgfSBlbHNlIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSAmJiB0cmFuc2xhdGUgPCBzbGlkZXNHcmlkW2kgKyAxXSkge1xuICAgICAgICBhY3RpdmVJbmRleCA9IGkgKyAxO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0pIHtcbiAgICAgIGFjdGl2ZUluZGV4ID0gaTtcbiAgICB9XG4gIH1cbiAgLy8gTm9ybWFsaXplIHNsaWRlSW5kZXhcbiAgaWYgKHBhcmFtcy5ub3JtYWxpemVTbGlkZUluZGV4KSB7XG4gICAgaWYgKGFjdGl2ZUluZGV4IDwgMCB8fCB0eXBlb2YgYWN0aXZlSW5kZXggPT09ICd1bmRlZmluZWQnKSBhY3RpdmVJbmRleCA9IDA7XG4gIH1cbiAgcmV0dXJuIGFjdGl2ZUluZGV4O1xufVxuZnVuY3Rpb24gdXBkYXRlQWN0aXZlSW5kZXgobmV3QWN0aXZlSW5kZXgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgdHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgY29uc3Qge1xuICAgIHNuYXBHcmlkLFxuICAgIHBhcmFtcyxcbiAgICBhY3RpdmVJbmRleDogcHJldmlvdXNJbmRleCxcbiAgICByZWFsSW5kZXg6IHByZXZpb3VzUmVhbEluZGV4LFxuICAgIHNuYXBJbmRleDogcHJldmlvdXNTbmFwSW5kZXhcbiAgfSA9IHN3aXBlcjtcbiAgbGV0IGFjdGl2ZUluZGV4ID0gbmV3QWN0aXZlSW5kZXg7XG4gIGxldCBzbmFwSW5kZXg7XG4gIGNvbnN0IGdldFZpcnR1YWxSZWFsSW5kZXggPSBhSW5kZXggPT4ge1xuICAgIGxldCByZWFsSW5kZXggPSBhSW5kZXggLSBzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmU7XG4gICAgaWYgKHJlYWxJbmRleCA8IDApIHtcbiAgICAgIHJlYWxJbmRleCA9IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggKyByZWFsSW5kZXg7XG4gICAgfVxuICAgIGlmIChyZWFsSW5kZXggPj0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCkge1xuICAgICAgcmVhbEluZGV4IC09IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiByZWFsSW5kZXg7XG4gIH07XG4gIGlmICh0eXBlb2YgYWN0aXZlSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgYWN0aXZlSW5kZXggPSBnZXRBY3RpdmVJbmRleEJ5VHJhbnNsYXRlKHN3aXBlcik7XG4gIH1cbiAgaWYgKHNuYXBHcmlkLmluZGV4T2YodHJhbnNsYXRlKSA+PSAwKSB7XG4gICAgc25hcEluZGV4ID0gc25hcEdyaWQuaW5kZXhPZih0cmFuc2xhdGUpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHNraXAgPSBNYXRoLm1pbihwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBhY3RpdmVJbmRleCk7XG4gICAgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKGFjdGl2ZUluZGV4IC0gc2tpcCkgLyBwYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICB9XG4gIGlmIChzbmFwSW5kZXggPj0gc25hcEdyaWQubGVuZ3RoKSBzbmFwSW5kZXggPSBzbmFwR3JpZC5sZW5ndGggLSAxO1xuICBpZiAoYWN0aXZlSW5kZXggPT09IHByZXZpb3VzSW5kZXggJiYgIXN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgIGlmIChzbmFwSW5kZXggIT09IHByZXZpb3VzU25hcEluZGV4KSB7XG4gICAgICBzd2lwZXIuc25hcEluZGV4ID0gc25hcEluZGV4O1xuICAgICAgc3dpcGVyLmVtaXQoJ3NuYXBJbmRleENoYW5nZScpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGFjdGl2ZUluZGV4ID09PSBwcmV2aW91c0luZGV4ICYmIHN3aXBlci5wYXJhbXMubG9vcCAmJiBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgIHN3aXBlci5yZWFsSW5kZXggPSBnZXRWaXJ0dWFsUmVhbEluZGV4KGFjdGl2ZUluZGV4KTtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgZ3JpZEVuYWJsZWQgPSBzd2lwZXIuZ3JpZCAmJiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMTtcblxuICAvLyBHZXQgcmVhbCBpbmRleFxuICBsZXQgcmVhbEluZGV4O1xuICBpZiAoc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiBwYXJhbXMubG9vcCkge1xuICAgIHJlYWxJbmRleCA9IGdldFZpcnR1YWxSZWFsSW5kZXgoYWN0aXZlSW5kZXgpO1xuICB9IGVsc2UgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgY29uc3QgZmlyc3RTbGlkZUluQ29sdW1uID0gc3dpcGVyLnNsaWRlcy5maW5kKHNsaWRlRWwgPT4gc2xpZGVFbC5jb2x1bW4gPT09IGFjdGl2ZUluZGV4KTtcbiAgICBsZXQgYWN0aXZlU2xpZGVJbmRleCA9IHBhcnNlSW50KGZpcnN0U2xpZGVJbkNvbHVtbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICBpZiAoTnVtYmVyLmlzTmFOKGFjdGl2ZVNsaWRlSW5kZXgpKSB7XG4gICAgICBhY3RpdmVTbGlkZUluZGV4ID0gTWF0aC5tYXgoc3dpcGVyLnNsaWRlcy5pbmRleE9mKGZpcnN0U2xpZGVJbkNvbHVtbiksIDApO1xuICAgIH1cbiAgICByZWFsSW5kZXggPSBNYXRoLmZsb29yKGFjdGl2ZVNsaWRlSW5kZXggLyBwYXJhbXMuZ3JpZC5yb3dzKTtcbiAgfSBlbHNlIGlmIChzd2lwZXIuc2xpZGVzW2FjdGl2ZUluZGV4XSkge1xuICAgIGNvbnN0IHNsaWRlSW5kZXggPSBzd2lwZXIuc2xpZGVzW2FjdGl2ZUluZGV4XS5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG4gICAgaWYgKHNsaWRlSW5kZXgpIHtcbiAgICAgIHJlYWxJbmRleCA9IHBhcnNlSW50KHNsaWRlSW5kZXgsIDEwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVhbEluZGV4ID0gYWN0aXZlSW5kZXg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJlYWxJbmRleCA9IGFjdGl2ZUluZGV4O1xuICB9XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgcHJldmlvdXNTbmFwSW5kZXgsXG4gICAgc25hcEluZGV4LFxuICAgIHByZXZpb3VzUmVhbEluZGV4LFxuICAgIHJlYWxJbmRleCxcbiAgICBwcmV2aW91c0luZGV4LFxuICAgIGFjdGl2ZUluZGV4XG4gIH0pO1xuICBpZiAoc3dpcGVyLmluaXRpYWxpemVkKSB7XG4gICAgcHJlbG9hZChzd2lwZXIpO1xuICB9XG4gIHN3aXBlci5lbWl0KCdhY3RpdmVJbmRleENoYW5nZScpO1xuICBzd2lwZXIuZW1pdCgnc25hcEluZGV4Q2hhbmdlJyk7XG4gIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQgfHwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQpIHtcbiAgICBpZiAocHJldmlvdXNSZWFsSW5kZXggIT09IHJlYWxJbmRleCkge1xuICAgICAgc3dpcGVyLmVtaXQoJ3JlYWxJbmRleENoYW5nZScpO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVDaGFuZ2UnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDbGlja2VkU2xpZGUoZWwsIHBhdGgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgbGV0IHNsaWRlID0gZWwuY2xvc2VzdChgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKTtcbiAgaWYgKCFzbGlkZSAmJiBzd2lwZXIuaXNFbGVtZW50ICYmIHBhdGggJiYgcGF0aC5sZW5ndGggPiAxICYmIHBhdGguaW5jbHVkZXMoZWwpKSB7XG4gICAgWy4uLnBhdGguc2xpY2UocGF0aC5pbmRleE9mKGVsKSArIDEsIHBhdGgubGVuZ3RoKV0uZm9yRWFjaChwYXRoRWwgPT4ge1xuICAgICAgaWYgKCFzbGlkZSAmJiBwYXRoRWwubWF0Y2hlcyAmJiBwYXRoRWwubWF0Y2hlcyhgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKSkge1xuICAgICAgICBzbGlkZSA9IHBhdGhFbDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBsZXQgc2xpZGVGb3VuZCA9IGZhbHNlO1xuICBsZXQgc2xpZGVJbmRleDtcbiAgaWYgKHNsaWRlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzd2lwZXIuc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoc3dpcGVyLnNsaWRlc1tpXSA9PT0gc2xpZGUpIHtcbiAgICAgICAgc2xpZGVGb3VuZCA9IHRydWU7XG4gICAgICAgIHNsaWRlSW5kZXggPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHNsaWRlICYmIHNsaWRlRm91bmQpIHtcbiAgICBzd2lwZXIuY2xpY2tlZFNsaWRlID0gc2xpZGU7XG4gICAgaWYgKHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgICBzd2lwZXIuY2xpY2tlZEluZGV4ID0gcGFyc2VJbnQoc2xpZGUuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5jbGlja2VkSW5kZXggPSBzbGlkZUluZGV4O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuY2xpY2tlZFNsaWRlID0gdW5kZWZpbmVkO1xuICAgIHN3aXBlci5jbGlja2VkSW5kZXggPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwYXJhbXMuc2xpZGVUb0NsaWNrZWRTbGlkZSAmJiBzd2lwZXIuY2xpY2tlZEluZGV4ICE9PSB1bmRlZmluZWQgJiYgc3dpcGVyLmNsaWNrZWRJbmRleCAhPT0gc3dpcGVyLmFjdGl2ZUluZGV4KSB7XG4gICAgc3dpcGVyLnNsaWRlVG9DbGlja2VkU2xpZGUoKTtcbiAgfVxufVxuXG52YXIgdXBkYXRlID0ge1xuICB1cGRhdGVTaXplLFxuICB1cGRhdGVTbGlkZXMsXG4gIHVwZGF0ZUF1dG9IZWlnaHQsXG4gIHVwZGF0ZVNsaWRlc09mZnNldCxcbiAgdXBkYXRlU2xpZGVzUHJvZ3Jlc3MsXG4gIHVwZGF0ZVByb2dyZXNzLFxuICB1cGRhdGVTbGlkZXNDbGFzc2VzLFxuICB1cGRhdGVBY3RpdmVJbmRleCxcbiAgdXBkYXRlQ2xpY2tlZFNsaWRlXG59O1xuXG5mdW5jdGlvbiBnZXRTd2lwZXJUcmFuc2xhdGUoYXhpcykge1xuICBpZiAoYXhpcyA9PT0gdm9pZCAwKSB7XG4gICAgYXhpcyA9IHRoaXMuaXNIb3Jpem9udGFsKCkgPyAneCcgOiAneSc7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICB0cmFuc2xhdGUsXG4gICAgd3JhcHBlckVsXG4gIH0gPSBzd2lwZXI7XG4gIGlmIChwYXJhbXMudmlydHVhbFRyYW5zbGF0ZSkge1xuICAgIHJldHVybiBydGwgPyAtdHJhbnNsYXRlIDogdHJhbnNsYXRlO1xuICB9XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHJldHVybiB0cmFuc2xhdGU7XG4gIH1cbiAgbGV0IGN1cnJlbnRUcmFuc2xhdGUgPSBnZXRUcmFuc2xhdGUod3JhcHBlckVsLCBheGlzKTtcbiAgY3VycmVudFRyYW5zbGF0ZSArPSBzd2lwZXIuY3NzT3ZlcmZsb3dBZGp1c3RtZW50KCk7XG4gIGlmIChydGwpIGN1cnJlbnRUcmFuc2xhdGUgPSAtY3VycmVudFRyYW5zbGF0ZTtcbiAgcmV0dXJuIGN1cnJlbnRUcmFuc2xhdGUgfHwgMDtcbn1cblxuZnVuY3Rpb24gc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICBwYXJhbXMsXG4gICAgd3JhcHBlckVsLFxuICAgIHByb2dyZXNzXG4gIH0gPSBzd2lwZXI7XG4gIGxldCB4ID0gMDtcbiAgbGV0IHkgPSAwO1xuICBjb25zdCB6ID0gMDtcbiAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgIHggPSBydGwgPyAtdHJhbnNsYXRlIDogdHJhbnNsYXRlO1xuICB9IGVsc2Uge1xuICAgIHkgPSB0cmFuc2xhdGU7XG4gIH1cbiAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHtcbiAgICB4ID0gTWF0aC5mbG9vcih4KTtcbiAgICB5ID0gTWF0aC5mbG9vcih5KTtcbiAgfVxuICBzd2lwZXIucHJldmlvdXNUcmFuc2xhdGUgPSBzd2lwZXIudHJhbnNsYXRlO1xuICBzd2lwZXIudHJhbnNsYXRlID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8geCA6IHk7XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHdyYXBwZXJFbFtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnc2Nyb2xsTGVmdCcgOiAnc2Nyb2xsVG9wJ10gPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAteCA6IC15O1xuICB9IGVsc2UgaWYgKCFwYXJhbXMudmlydHVhbFRyYW5zbGF0ZSkge1xuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHggLT0gc3dpcGVyLmNzc092ZXJmbG93QWRqdXN0bWVudCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB5IC09IHN3aXBlci5jc3NPdmVyZmxvd0FkanVzdG1lbnQoKTtcbiAgICB9XG4gICAgd3JhcHBlckVsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgke3h9cHgsICR7eX1weCwgJHt6fXB4KWA7XG4gIH1cblxuICAvLyBDaGVjayBpZiB3ZSBuZWVkIHRvIHVwZGF0ZSBwcm9ncmVzc1xuICBsZXQgbmV3UHJvZ3Jlc3M7XG4gIGNvbnN0IHRyYW5zbGF0ZXNEaWZmID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICBpZiAodHJhbnNsYXRlc0RpZmYgPT09IDApIHtcbiAgICBuZXdQcm9ncmVzcyA9IDA7XG4gIH0gZWxzZSB7XG4gICAgbmV3UHJvZ3Jlc3MgPSAodHJhbnNsYXRlIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAvIHRyYW5zbGF0ZXNEaWZmO1xuICB9XG4gIGlmIChuZXdQcm9ncmVzcyAhPT0gcHJvZ3Jlc3MpIHtcbiAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3ModHJhbnNsYXRlKTtcbiAgfVxuICBzd2lwZXIuZW1pdCgnc2V0VHJhbnNsYXRlJywgc3dpcGVyLnRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKTtcbn1cblxuZnVuY3Rpb24gbWluVHJhbnNsYXRlKCkge1xuICByZXR1cm4gLXRoaXMuc25hcEdyaWRbMF07XG59XG5cbmZ1bmN0aW9uIG1heFRyYW5zbGF0ZSgpIHtcbiAgcmV0dXJuIC10aGlzLnNuYXBHcmlkW3RoaXMuc25hcEdyaWQubGVuZ3RoIC0gMV07XG59XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZVRvKHRyYW5zbGF0ZSwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgdHJhbnNsYXRlQm91bmRzLCBpbnRlcm5hbCkge1xuICBpZiAodHJhbnNsYXRlID09PSB2b2lkIDApIHtcbiAgICB0cmFuc2xhdGUgPSAwO1xuICB9XG4gIGlmIChzcGVlZCA9PT0gdm9pZCAwKSB7XG4gICAgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZDtcbiAgfVxuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG4gIGlmICh0cmFuc2xhdGVCb3VuZHMgPT09IHZvaWQgMCkge1xuICAgIHRyYW5zbGF0ZUJvdW5kcyA9IHRydWU7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICB3cmFwcGVyRWxcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKHN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLnByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBtaW5UcmFuc2xhdGUgPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gIGNvbnN0IG1heFRyYW5zbGF0ZSA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKTtcbiAgbGV0IG5ld1RyYW5zbGF0ZTtcbiAgaWYgKHRyYW5zbGF0ZUJvdW5kcyAmJiB0cmFuc2xhdGUgPiBtaW5UcmFuc2xhdGUpIG5ld1RyYW5zbGF0ZSA9IG1pblRyYW5zbGF0ZTtlbHNlIGlmICh0cmFuc2xhdGVCb3VuZHMgJiYgdHJhbnNsYXRlIDwgbWF4VHJhbnNsYXRlKSBuZXdUcmFuc2xhdGUgPSBtYXhUcmFuc2xhdGU7ZWxzZSBuZXdUcmFuc2xhdGUgPSB0cmFuc2xhdGU7XG5cbiAgLy8gVXBkYXRlIHByb2dyZXNzXG4gIHN3aXBlci51cGRhdGVQcm9ncmVzcyhuZXdUcmFuc2xhdGUpO1xuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICBjb25zdCBpc0ggPSBzd2lwZXIuaXNIb3Jpem9udGFsKCk7XG4gICAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgICB3cmFwcGVyRWxbaXNIID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gLW5ld1RyYW5zbGF0ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFzd2lwZXIuc3VwcG9ydC5zbW9vdGhTY3JvbGwpIHtcbiAgICAgICAgYW5pbWF0ZUNTU01vZGVTY3JvbGwoe1xuICAgICAgICAgIHN3aXBlcixcbiAgICAgICAgICB0YXJnZXRQb3NpdGlvbjogLW5ld1RyYW5zbGF0ZSxcbiAgICAgICAgICBzaWRlOiBpc0ggPyAnbGVmdCcgOiAndG9wJ1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB3cmFwcGVyRWwuc2Nyb2xsVG8oe1xuICAgICAgICBbaXNIID8gJ2xlZnQnIDogJ3RvcCddOiAtbmV3VHJhbnNsYXRlLFxuICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCdcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1RyYW5zbGF0ZSk7XG4gICAgaWYgKHJ1bkNhbGxiYWNrcykge1xuICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVRyYW5zaXRpb25TdGFydCcsIHNwZWVkLCBpbnRlcm5hbCk7XG4gICAgICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvbkVuZCcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuICAgIGlmIChydW5DYWxsYmFja3MpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdiZWZvcmVUcmFuc2l0aW9uU3RhcnQnLCBzcGVlZCwgaW50ZXJuYWwpO1xuICAgICAgc3dpcGVyLmVtaXQoJ3RyYW5zaXRpb25TdGFydCcpO1xuICAgIH1cbiAgICBpZiAoIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgIHN3aXBlci5hbmltYXRpbmcgPSB0cnVlO1xuICAgICAgaWYgKCFzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKSB7XG4gICAgICAgIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKGUpIHtcbiAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgICAgaWYgKGUudGFyZ2V0ICE9PSB0aGlzKSByZXR1cm47XG4gICAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICAgICAgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IG51bGw7XG4gICAgICAgICAgZGVsZXRlIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQ7XG4gICAgICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IGZhbHNlO1xuICAgICAgICAgIGlmIChydW5DYWxsYmFja3MpIHtcbiAgICAgICAgICAgIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uRW5kJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgc3dpcGVyLndyYXBwZXJFbC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG52YXIgdHJhbnNsYXRlID0ge1xuICBnZXRUcmFuc2xhdGU6IGdldFN3aXBlclRyYW5zbGF0ZSxcbiAgc2V0VHJhbnNsYXRlLFxuICBtaW5UcmFuc2xhdGUsXG4gIG1heFRyYW5zbGF0ZSxcbiAgdHJhbnNsYXRlVG9cbn07XG5cbmZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24sIGJ5Q29udHJvbGxlcikge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoIXN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb259bXNgO1xuICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUudHJhbnNpdGlvbkRlbGF5ID0gZHVyYXRpb24gPT09IDAgPyBgMG1zYCA6ICcnO1xuICB9XG4gIHN3aXBlci5lbWl0KCdzZXRUcmFuc2l0aW9uJywgZHVyYXRpb24sIGJ5Q29udHJvbGxlcik7XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25FbWl0KF9yZWYpIHtcbiAgbGV0IHtcbiAgICBzd2lwZXIsXG4gICAgcnVuQ2FsbGJhY2tzLFxuICAgIGRpcmVjdGlvbixcbiAgICBzdGVwXG4gIH0gPSBfcmVmO1xuICBjb25zdCB7XG4gICAgYWN0aXZlSW5kZXgsXG4gICAgcHJldmlvdXNJbmRleFxuICB9ID0gc3dpcGVyO1xuICBsZXQgZGlyID0gZGlyZWN0aW9uO1xuICBpZiAoIWRpcikge1xuICAgIGlmIChhY3RpdmVJbmRleCA+IHByZXZpb3VzSW5kZXgpIGRpciA9ICduZXh0JztlbHNlIGlmIChhY3RpdmVJbmRleCA8IHByZXZpb3VzSW5kZXgpIGRpciA9ICdwcmV2JztlbHNlIGRpciA9ICdyZXNldCc7XG4gIH1cbiAgc3dpcGVyLmVtaXQoYHRyYW5zaXRpb24ke3N0ZXB9YCk7XG4gIGlmIChydW5DYWxsYmFja3MgJiYgYWN0aXZlSW5kZXggIT09IHByZXZpb3VzSW5kZXgpIHtcbiAgICBpZiAoZGlyID09PSAncmVzZXQnKSB7XG4gICAgICBzd2lwZXIuZW1pdChgc2xpZGVSZXNldFRyYW5zaXRpb24ke3N0ZXB9YCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KGBzbGlkZUNoYW5nZVRyYW5zaXRpb24ke3N0ZXB9YCk7XG4gICAgaWYgKGRpciA9PT0gJ25leHQnKSB7XG4gICAgICBzd2lwZXIuZW1pdChgc2xpZGVOZXh0VHJhbnNpdGlvbiR7c3RlcH1gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmVtaXQoYHNsaWRlUHJldlRyYW5zaXRpb24ke3N0ZXB9YCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbikge1xuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG4gIGlmIChwYXJhbXMuYXV0b0hlaWdodCkge1xuICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gIH1cbiAgdHJhbnNpdGlvbkVtaXQoe1xuICAgIHN3aXBlcixcbiAgICBydW5DYWxsYmFja3MsXG4gICAgZGlyZWN0aW9uLFxuICAgIHN0ZXA6ICdTdGFydCdcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pIHtcbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zXG4gIH0gPSBzd2lwZXI7XG4gIHN3aXBlci5hbmltYXRpbmcgPSBmYWxzZTtcbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG4gIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuICB0cmFuc2l0aW9uRW1pdCh7XG4gICAgc3dpcGVyLFxuICAgIHJ1bkNhbGxiYWNrcyxcbiAgICBkaXJlY3Rpb24sXG4gICAgc3RlcDogJ0VuZCdcbiAgfSk7XG59XG5cbnZhciB0cmFuc2l0aW9uID0ge1xuICBzZXRUcmFuc2l0aW9uLFxuICB0cmFuc2l0aW9uU3RhcnQsXG4gIHRyYW5zaXRpb25FbmRcbn07XG5cbmZ1bmN0aW9uIHNsaWRlVG8oaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsLCBpbml0aWFsKSB7XG4gIGlmIChpbmRleCA9PT0gdm9pZCAwKSB7XG4gICAgaW5kZXggPSAwO1xuICB9XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgaWYgKHR5cGVvZiBpbmRleCA9PT0gJ3N0cmluZycpIHtcbiAgICBpbmRleCA9IHBhcnNlSW50KGluZGV4LCAxMCk7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgbGV0IHNsaWRlSW5kZXggPSBpbmRleDtcbiAgaWYgKHNsaWRlSW5kZXggPCAwKSBzbGlkZUluZGV4ID0gMDtcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBzbmFwR3JpZCxcbiAgICBzbGlkZXNHcmlkLFxuICAgIHByZXZpb3VzSW5kZXgsXG4gICAgYWN0aXZlSW5kZXgsXG4gICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgd3JhcHBlckVsLFxuICAgIGVuYWJsZWRcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkICYmICFpbnRlcm5hbCAmJiAhaW5pdGlhbCB8fCBzd2lwZXIuZGVzdHJveWVkIHx8IHN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLnByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodHlwZW9mIHNwZWVkID09PSAndW5kZWZpbmVkJykge1xuICAgIHNwZWVkID0gc3dpcGVyLnBhcmFtcy5zcGVlZDtcbiAgfVxuICBjb25zdCBza2lwID0gTWF0aC5taW4oc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIHNsaWRlSW5kZXgpO1xuICBsZXQgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKHNsaWRlSW5kZXggLSBza2lwKSAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICBpZiAoc25hcEluZGV4ID49IHNuYXBHcmlkLmxlbmd0aCkgc25hcEluZGV4ID0gc25hcEdyaWQubGVuZ3RoIC0gMTtcbiAgY29uc3QgdHJhbnNsYXRlID0gLXNuYXBHcmlkW3NuYXBJbmRleF07XG4gIC8vIE5vcm1hbGl6ZSBzbGlkZUluZGV4XG4gIGlmIChwYXJhbXMubm9ybWFsaXplU2xpZGVJbmRleCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3Qgbm9ybWFsaXplZFRyYW5zbGF0ZSA9IC1NYXRoLmZsb29yKHRyYW5zbGF0ZSAqIDEwMCk7XG4gICAgICBjb25zdCBub3JtYWxpemVkR3JpZCA9IE1hdGguZmxvb3Ioc2xpZGVzR3JpZFtpXSAqIDEwMCk7XG4gICAgICBjb25zdCBub3JtYWxpemVkR3JpZE5leHQgPSBNYXRoLmZsb29yKHNsaWRlc0dyaWRbaSArIDFdICogMTAwKTtcbiAgICAgIGlmICh0eXBlb2Ygc2xpZGVzR3JpZFtpICsgMV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmIChub3JtYWxpemVkVHJhbnNsYXRlID49IG5vcm1hbGl6ZWRHcmlkICYmIG5vcm1hbGl6ZWRUcmFuc2xhdGUgPCBub3JtYWxpemVkR3JpZE5leHQgLSAobm9ybWFsaXplZEdyaWROZXh0IC0gbm9ybWFsaXplZEdyaWQpIC8gMikge1xuICAgICAgICAgIHNsaWRlSW5kZXggPSBpO1xuICAgICAgICB9IGVsc2UgaWYgKG5vcm1hbGl6ZWRUcmFuc2xhdGUgPj0gbm9ybWFsaXplZEdyaWQgJiYgbm9ybWFsaXplZFRyYW5zbGF0ZSA8IG5vcm1hbGl6ZWRHcmlkTmV4dCkge1xuICAgICAgICAgIHNsaWRlSW5kZXggPSBpICsgMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChub3JtYWxpemVkVHJhbnNsYXRlID49IG5vcm1hbGl6ZWRHcmlkKSB7XG4gICAgICAgIHNsaWRlSW5kZXggPSBpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBEaXJlY3Rpb25zIGxvY2tzXG4gIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQgJiYgc2xpZGVJbmRleCAhPT0gYWN0aXZlSW5kZXgpIHtcbiAgICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlTmV4dCAmJiAocnRsID8gdHJhbnNsYXRlID4gc3dpcGVyLnRyYW5zbGF0ZSAmJiB0cmFuc2xhdGUgPiBzd2lwZXIubWluVHJhbnNsYXRlKCkgOiB0cmFuc2xhdGUgPCBzd2lwZXIudHJhbnNsYXRlICYmIHRyYW5zbGF0ZSA8IHN3aXBlci5taW5UcmFuc2xhdGUoKSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgdHJhbnNsYXRlID4gc3dpcGVyLnRyYW5zbGF0ZSAmJiB0cmFuc2xhdGUgPiBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgIGlmICgoYWN0aXZlSW5kZXggfHwgMCkgIT09IHNsaWRlSW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoc2xpZGVJbmRleCAhPT0gKHByZXZpb3VzSW5kZXggfHwgMCkgJiYgcnVuQ2FsbGJhY2tzKSB7XG4gICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVNsaWRlQ2hhbmdlU3RhcnQnKTtcbiAgfVxuXG4gIC8vIFVwZGF0ZSBwcm9ncmVzc1xuICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3ModHJhbnNsYXRlKTtcbiAgbGV0IGRpcmVjdGlvbjtcbiAgaWYgKHNsaWRlSW5kZXggPiBhY3RpdmVJbmRleCkgZGlyZWN0aW9uID0gJ25leHQnO2Vsc2UgaWYgKHNsaWRlSW5kZXggPCBhY3RpdmVJbmRleCkgZGlyZWN0aW9uID0gJ3ByZXYnO2Vsc2UgZGlyZWN0aW9uID0gJ3Jlc2V0JztcblxuICAvLyBpbml0aWFsIHZpcnR1YWxcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIGNvbnN0IGlzSW5pdGlhbFZpcnR1YWwgPSBpc1ZpcnR1YWwgJiYgaW5pdGlhbDtcbiAgLy8gVXBkYXRlIEluZGV4XG4gIGlmICghaXNJbml0aWFsVmlydHVhbCAmJiAocnRsICYmIC10cmFuc2xhdGUgPT09IHN3aXBlci50cmFuc2xhdGUgfHwgIXJ0bCAmJiB0cmFuc2xhdGUgPT09IHN3aXBlci50cmFuc2xhdGUpKSB7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KHNsaWRlSW5kZXgpO1xuICAgIC8vIFVwZGF0ZSBIZWlnaHRcbiAgICBpZiAocGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgfVxuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgaWYgKHBhcmFtcy5lZmZlY3QgIT09ICdzbGlkZScpIHtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgICB9XG4gICAgaWYgKGRpcmVjdGlvbiAhPT0gJ3Jlc2V0Jykge1xuICAgICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICBjb25zdCBpc0ggPSBzd2lwZXIuaXNIb3Jpem9udGFsKCk7XG4gICAgY29uc3QgdCA9IHJ0bCA/IHRyYW5zbGF0ZSA6IC10cmFuc2xhdGU7XG4gICAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUuc2Nyb2xsU25hcFR5cGUgPSAnbm9uZSc7XG4gICAgICAgIHN3aXBlci5faW1tZWRpYXRlVmlydHVhbCA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNWaXJ0dWFsICYmICFzd2lwZXIuX2Nzc01vZGVWaXJ0dWFsSW5pdGlhbFNldCAmJiBzd2lwZXIucGFyYW1zLmluaXRpYWxTbGlkZSA+IDApIHtcbiAgICAgICAgc3dpcGVyLl9jc3NNb2RlVmlydHVhbEluaXRpYWxTZXQgPSB0cnVlO1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIHdyYXBwZXJFbFtpc0ggPyAnc2Nyb2xsTGVmdCcgOiAnc2Nyb2xsVG9wJ10gPSB0O1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdyYXBwZXJFbFtpc0ggPyAnc2Nyb2xsTGVmdCcgOiAnc2Nyb2xsVG9wJ10gPSB0O1xuICAgICAgfVxuICAgICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUuc2Nyb2xsU25hcFR5cGUgPSAnJztcbiAgICAgICAgICBzd2lwZXIuX2ltbWVkaWF0ZVZpcnR1YWwgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghc3dpcGVyLnN1cHBvcnQuc21vb3RoU2Nyb2xsKSB7XG4gICAgICAgIGFuaW1hdGVDU1NNb2RlU2Nyb2xsKHtcbiAgICAgICAgICBzd2lwZXIsXG4gICAgICAgICAgdGFyZ2V0UG9zaXRpb246IHQsXG4gICAgICAgICAgc2lkZTogaXNIID8gJ2xlZnQnIDogJ3RvcCdcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgd3JhcHBlckVsLnNjcm9sbFRvKHtcbiAgICAgICAgW2lzSCA/ICdsZWZ0JyA6ICd0b3AnXTogdCxcbiAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgc3dpcGVyLnNldFRyYW5zaXRpb24oc3BlZWQpO1xuICBzd2lwZXIuc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSk7XG4gIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleChzbGlkZUluZGV4KTtcbiAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgc3dpcGVyLmVtaXQoJ2JlZm9yZVRyYW5zaXRpb25TdGFydCcsIHNwZWVkLCBpbnRlcm5hbCk7XG4gIHN3aXBlci50cmFuc2l0aW9uU3RhcnQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICBzd2lwZXIudHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gIH0gZWxzZSBpZiAoIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTtcbiAgICBpZiAoIXN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCkge1xuICAgICAgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gdHJhbnNpdGlvbkVuZChlKSB7XG4gICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgaWYgKGUudGFyZ2V0ICE9PSB0aGlzKSByZXR1cm47XG4gICAgICAgIHN3aXBlci53cmFwcGVyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICAgIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IG51bGw7XG4gICAgICAgIGRlbGV0ZSBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQ7XG4gICAgICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICAgIH07XG4gICAgfVxuICAgIHN3aXBlci53cmFwcGVyRWwuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHNsaWRlVG9Mb29wKGluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCkge1xuICBpZiAoaW5kZXggPT09IHZvaWQgMCkge1xuICAgIGluZGV4ID0gMDtcbiAgfVxuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG4gIGlmICh0eXBlb2YgaW5kZXggPT09ICdzdHJpbmcnKSB7XG4gICAgY29uc3QgaW5kZXhBc051bWJlciA9IHBhcnNlSW50KGluZGV4LCAxMCk7XG4gICAgaW5kZXggPSBpbmRleEFzTnVtYmVyO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmIChzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gIGlmICh0eXBlb2Ygc3BlZWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgc3BlZWQgPSBzd2lwZXIucGFyYW1zLnNwZWVkO1xuICB9XG4gIGNvbnN0IGdyaWRFbmFibGVkID0gc3dpcGVyLmdyaWQgJiYgc3dpcGVyLnBhcmFtcy5ncmlkICYmIHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzID4gMTtcbiAgbGV0IG5ld0luZGV4ID0gaW5kZXg7XG4gIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgbmV3SW5kZXggPSBuZXdJbmRleCArIHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHRhcmdldFNsaWRlSW5kZXg7XG4gICAgICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICAgICAgY29uc3Qgc2xpZGVJbmRleCA9IG5ld0luZGV4ICogc3dpcGVyLnBhcmFtcy5ncmlkLnJvd3M7XG4gICAgICAgIHRhcmdldFNsaWRlSW5kZXggPSBzd2lwZXIuc2xpZGVzLmZpbmQoc2xpZGVFbCA9PiBzbGlkZUVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSAqIDEgPT09IHNsaWRlSW5kZXgpLmNvbHVtbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFNsaWRlSW5kZXggPSBzd2lwZXIuZ2V0U2xpZGVJbmRleEJ5RGF0YShuZXdJbmRleCk7XG4gICAgICB9XG4gICAgICBjb25zdCBjb2xzID0gZ3JpZEVuYWJsZWQgPyBNYXRoLmNlaWwoc3dpcGVyLnNsaWRlcy5sZW5ndGggLyBzd2lwZXIucGFyYW1zLmdyaWQucm93cykgOiBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgY2VudGVyZWRTbGlkZXNcbiAgICAgIH0gPSBzd2lwZXIucGFyYW1zO1xuICAgICAgbGV0IHNsaWRlc1BlclZpZXcgPSBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gICAgICBpZiAoc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nKSB7XG4gICAgICAgIHNsaWRlc1BlclZpZXcgPSBzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsaWRlc1BlclZpZXcgPSBNYXRoLmNlaWwocGFyc2VGbG9hdChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcsIDEwKSk7XG4gICAgICAgIGlmIChjZW50ZXJlZFNsaWRlcyAmJiBzbGlkZXNQZXJWaWV3ICUgMiA9PT0gMCkge1xuICAgICAgICAgIHNsaWRlc1BlclZpZXcgPSBzbGlkZXNQZXJWaWV3ICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGV0IG5lZWRMb29wRml4ID0gY29scyAtIHRhcmdldFNsaWRlSW5kZXggPCBzbGlkZXNQZXJWaWV3O1xuICAgICAgaWYgKGNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgIG5lZWRMb29wRml4ID0gbmVlZExvb3BGaXggfHwgdGFyZ2V0U2xpZGVJbmRleCA8IE1hdGguY2VpbChzbGlkZXNQZXJWaWV3IC8gMik7XG4gICAgICB9XG4gICAgICBpZiAoaW50ZXJuYWwgJiYgY2VudGVyZWRTbGlkZXMgJiYgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycgJiYgIWdyaWRFbmFibGVkKSB7XG4gICAgICAgIG5lZWRMb29wRml4ID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExvb3BGaXgpIHtcbiAgICAgICAgY29uc3QgZGlyZWN0aW9uID0gY2VudGVyZWRTbGlkZXMgPyB0YXJnZXRTbGlkZUluZGV4IDwgc3dpcGVyLmFjdGl2ZUluZGV4ID8gJ3ByZXYnIDogJ25leHQnIDogdGFyZ2V0U2xpZGVJbmRleCAtIHN3aXBlci5hY3RpdmVJbmRleCAtIDEgPCBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPyAnbmV4dCcgOiAncHJldic7XG4gICAgICAgIHN3aXBlci5sb29wRml4KHtcbiAgICAgICAgICBkaXJlY3Rpb24sXG4gICAgICAgICAgc2xpZGVUbzogdHJ1ZSxcbiAgICAgICAgICBhY3RpdmVTbGlkZUluZGV4OiBkaXJlY3Rpb24gPT09ICduZXh0JyA/IHRhcmdldFNsaWRlSW5kZXggKyAxIDogdGFyZ2V0U2xpZGVJbmRleCAtIGNvbHMgKyAxLFxuICAgICAgICAgIHNsaWRlUmVhbEluZGV4OiBkaXJlY3Rpb24gPT09ICduZXh0JyA/IHN3aXBlci5yZWFsSW5kZXggOiB1bmRlZmluZWRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICAgICAgY29uc3Qgc2xpZGVJbmRleCA9IG5ld0luZGV4ICogc3dpcGVyLnBhcmFtcy5ncmlkLnJvd3M7XG4gICAgICAgIG5ld0luZGV4ID0gc3dpcGVyLnNsaWRlcy5maW5kKHNsaWRlRWwgPT4gc2xpZGVFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgKiAxID09PSBzbGlkZUluZGV4KS5jb2x1bW47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdJbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4QnlEYXRhKG5ld0luZGV4KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICBzd2lwZXIuc2xpZGVUbyhuZXdJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xuICB9KTtcbiAgcmV0dXJuIHN3aXBlcjtcbn1cblxuLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5mdW5jdGlvbiBzbGlkZU5leHQoc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpIHtcbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgZW5hYmxlZCxcbiAgICBwYXJhbXMsXG4gICAgYW5pbWF0aW5nXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghZW5hYmxlZCB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm4gc3dpcGVyO1xuICBpZiAodHlwZW9mIHNwZWVkID09PSAndW5kZWZpbmVkJykge1xuICAgIHNwZWVkID0gc3dpcGVyLnBhcmFtcy5zcGVlZDtcbiAgfVxuICBsZXQgcGVyR3JvdXAgPSBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMSAmJiBwYXJhbXMuc2xpZGVzUGVyR3JvdXBBdXRvKSB7XG4gICAgcGVyR3JvdXAgPSBNYXRoLm1heChzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoJ2N1cnJlbnQnLCB0cnVlKSwgMSk7XG4gIH1cbiAgY29uc3QgaW5jcmVtZW50ID0gc3dpcGVyLmFjdGl2ZUluZGV4IDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCA/IDEgOiBwZXJHcm91cDtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgaWYgKGFuaW1hdGluZyAmJiAhaXNWaXJ0dWFsICYmIHBhcmFtcy5sb29wUHJldmVudHNTbGlkaW5nKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpcGVyLmxvb3BGaXgoe1xuICAgICAgZGlyZWN0aW9uOiAnbmV4dCdcbiAgICB9KTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBzd2lwZXIuX2NsaWVudExlZnQgPSBzd2lwZXIud3JhcHBlckVsLmNsaWVudExlZnQ7XG4gICAgaWYgKHN3aXBlci5hY3RpdmVJbmRleCA9PT0gc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxICYmIHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXggKyBpbmNyZW1lbnQsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIGlmIChwYXJhbXMucmV3aW5kICYmIHN3aXBlci5pc0VuZCkge1xuICAgIHJldHVybiBzd2lwZXIuc2xpZGVUbygwLCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG4gIH1cbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCArIGluY3JlbWVudCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufVxuXG4vKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbmZ1bmN0aW9uIHNsaWRlUHJldihzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCkge1xuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgc25hcEdyaWQsXG4gICAgc2xpZGVzR3JpZCxcbiAgICBydGxUcmFuc2xhdGUsXG4gICAgZW5hYmxlZCxcbiAgICBhbmltYXRpbmdcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybiBzd2lwZXI7XG4gIGlmICh0eXBlb2Ygc3BlZWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgc3BlZWQgPSBzd2lwZXIucGFyYW1zLnNwZWVkO1xuICB9XG4gIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGlmIChhbmltYXRpbmcgJiYgIWlzVmlydHVhbCAmJiBwYXJhbXMubG9vcFByZXZlbnRzU2xpZGluZykgcmV0dXJuIGZhbHNlO1xuICAgIHN3aXBlci5sb29wRml4KHtcbiAgICAgIGRpcmVjdGlvbjogJ3ByZXYnXG4gICAgfSk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgc3dpcGVyLl9jbGllbnRMZWZ0ID0gc3dpcGVyLndyYXBwZXJFbC5jbGllbnRMZWZ0O1xuICB9XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IHJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgZnVuY3Rpb24gbm9ybWFsaXplKHZhbCkge1xuICAgIGlmICh2YWwgPCAwKSByZXR1cm4gLU1hdGguZmxvb3IoTWF0aC5hYnModmFsKSk7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IodmFsKTtcbiAgfVxuICBjb25zdCBub3JtYWxpemVkVHJhbnNsYXRlID0gbm9ybWFsaXplKHRyYW5zbGF0ZSk7XG4gIGNvbnN0IG5vcm1hbGl6ZWRTbmFwR3JpZCA9IHNuYXBHcmlkLm1hcCh2YWwgPT4gbm9ybWFsaXplKHZhbCkpO1xuICBsZXQgcHJldlNuYXAgPSBzbmFwR3JpZFtub3JtYWxpemVkU25hcEdyaWQuaW5kZXhPZihub3JtYWxpemVkVHJhbnNsYXRlKSAtIDFdO1xuICBpZiAodHlwZW9mIHByZXZTbmFwID09PSAndW5kZWZpbmVkJyAmJiBwYXJhbXMuY3NzTW9kZSkge1xuICAgIGxldCBwcmV2U25hcEluZGV4O1xuICAgIHNuYXBHcmlkLmZvckVhY2goKHNuYXAsIHNuYXBJbmRleCkgPT4ge1xuICAgICAgaWYgKG5vcm1hbGl6ZWRUcmFuc2xhdGUgPj0gc25hcCkge1xuICAgICAgICAvLyBwcmV2U25hcCA9IHNuYXA7XG4gICAgICAgIHByZXZTbmFwSW5kZXggPSBzbmFwSW5kZXg7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHR5cGVvZiBwcmV2U25hcEluZGV4ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcHJldlNuYXAgPSBzbmFwR3JpZFtwcmV2U25hcEluZGV4ID4gMCA/IHByZXZTbmFwSW5kZXggLSAxIDogcHJldlNuYXBJbmRleF07XG4gICAgfVxuICB9XG4gIGxldCBwcmV2SW5kZXggPSAwO1xuICBpZiAodHlwZW9mIHByZXZTbmFwICE9PSAndW5kZWZpbmVkJykge1xuICAgIHByZXZJbmRleCA9IHNsaWRlc0dyaWQuaW5kZXhPZihwcmV2U25hcCk7XG4gICAgaWYgKHByZXZJbmRleCA8IDApIHByZXZJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCAtIDE7XG4gICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgJiYgcGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAxICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cEF1dG8pIHtcbiAgICAgIHByZXZJbmRleCA9IHByZXZJbmRleCAtIHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygncHJldmlvdXMnLCB0cnVlKSArIDE7XG4gICAgICBwcmV2SW5kZXggPSBNYXRoLm1heChwcmV2SW5kZXgsIDApO1xuICAgIH1cbiAgfVxuICBpZiAocGFyYW1zLnJld2luZCAmJiBzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICBjb25zdCBsYXN0SW5kZXggPSBzd2lwZXIucGFyYW1zLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgJiYgc3dpcGVyLnZpcnR1YWwgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIC0gMSA6IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMTtcbiAgICByZXR1cm4gc3dpcGVyLnNsaWRlVG8obGFzdEluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG4gIH0gZWxzZSBpZiAocGFyYW1zLmxvb3AgJiYgc3dpcGVyLmFjdGl2ZUluZGV4ID09PSAwICYmIHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHByZXZJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xuICAgIH0pO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBzd2lwZXIuc2xpZGVUbyhwcmV2SW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn1cblxuLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5mdW5jdGlvbiBzbGlkZVJlc2V0KHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgaWYgKHR5cGVvZiBzcGVlZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBzcGVlZCA9IHN3aXBlci5wYXJhbXMuc3BlZWQ7XG4gIH1cbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufVxuXG4vKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbmZ1bmN0aW9uIHNsaWRlVG9DbG9zZXN0KHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsLCB0aHJlc2hvbGQpIHtcbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBpZiAodGhyZXNob2xkID09PSB2b2lkIDApIHtcbiAgICB0aHJlc2hvbGQgPSAwLjU7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgaWYgKHR5cGVvZiBzcGVlZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBzcGVlZCA9IHN3aXBlci5wYXJhbXMuc3BlZWQ7XG4gIH1cbiAgbGV0IGluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICBjb25zdCBza2lwID0gTWF0aC5taW4oc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIGluZGV4KTtcbiAgY29uc3Qgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKGluZGV4IC0gc2tpcCkgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgY29uc3QgdHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgaWYgKHRyYW5zbGF0ZSA+PSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4XSkge1xuICAgIC8vIFRoZSBjdXJyZW50IHRyYW5zbGF0ZSBpcyBvbiBvciBhZnRlciB0aGUgY3VycmVudCBzbmFwIGluZGV4LCBzbyB0aGUgY2hvaWNlXG4gICAgLy8gaXMgYmV0d2VlbiB0aGUgY3VycmVudCBpbmRleCBhbmQgdGhlIG9uZSBhZnRlciBpdC5cbiAgICBjb25zdCBjdXJyZW50U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXhdO1xuICAgIGNvbnN0IG5leHRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleCArIDFdO1xuICAgIGlmICh0cmFuc2xhdGUgLSBjdXJyZW50U25hcCA+IChuZXh0U25hcCAtIGN1cnJlbnRTbmFwKSAqIHRocmVzaG9sZCkge1xuICAgICAgaW5kZXggKz0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gVGhlIGN1cnJlbnQgdHJhbnNsYXRlIGlzIGJlZm9yZSB0aGUgY3VycmVudCBzbmFwIGluZGV4LCBzbyB0aGUgY2hvaWNlXG4gICAgLy8gaXMgYmV0d2VlbiB0aGUgY3VycmVudCBpbmRleCBhbmQgdGhlIG9uZSBiZWZvcmUgaXQuXG4gICAgY29uc3QgcHJldlNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4IC0gMV07XG4gICAgY29uc3QgY3VycmVudFNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4XTtcbiAgICBpZiAodHJhbnNsYXRlIC0gcHJldlNuYXAgPD0gKGN1cnJlbnRTbmFwIC0gcHJldlNuYXApICogdGhyZXNob2xkKSB7XG4gICAgICBpbmRleCAtPSBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgIH1cbiAgfVxuICBpbmRleCA9IE1hdGgubWF4KGluZGV4LCAwKTtcbiAgaW5kZXggPSBNYXRoLm1pbihpbmRleCwgc3dpcGVyLnNsaWRlc0dyaWQubGVuZ3RoIC0gMSk7XG4gIHJldHVybiBzd2lwZXIuc2xpZGVUbyhpbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufVxuXG5mdW5jdGlvbiBzbGlkZVRvQ2xpY2tlZFNsaWRlKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHNsaWRlc0VsXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IHNsaWRlc1BlclZpZXcgPSBwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nID8gc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCkgOiBwYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgbGV0IHNsaWRlVG9JbmRleCA9IHN3aXBlci5jbGlja2VkSW5kZXg7XG4gIGxldCByZWFsSW5kZXg7XG4gIGNvbnN0IHNsaWRlU2VsZWN0b3IgPSBzd2lwZXIuaXNFbGVtZW50ID8gYHN3aXBlci1zbGlkZWAgOiBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9YDtcbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgaWYgKHN3aXBlci5hbmltYXRpbmcpIHJldHVybjtcbiAgICByZWFsSW5kZXggPSBwYXJzZUludChzd2lwZXIuY2xpY2tlZFNsaWRlLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xuICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIGlmIChzbGlkZVRvSW5kZXggPCBzd2lwZXIubG9vcGVkU2xpZGVzIC0gc2xpZGVzUGVyVmlldyAvIDIgfHwgc2xpZGVUb0luZGV4ID4gc3dpcGVyLnNsaWRlcy5sZW5ndGggLSBzd2lwZXIubG9vcGVkU2xpZGVzICsgc2xpZGVzUGVyVmlldyAvIDIpIHtcbiAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgc2xpZGVUb0luZGV4ID0gc3dpcGVyLmdldFNsaWRlSW5kZXgoZWxlbWVudENoaWxkcmVuKHNsaWRlc0VsLCBgJHtzbGlkZVNlbGVjdG9yfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7cmVhbEluZGV4fVwiXWApWzBdKTtcbiAgICAgICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNsaWRlVG9JbmRleCA+IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gc2xpZGVzUGVyVmlldykge1xuICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgIHNsaWRlVG9JbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4KGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYCR7c2xpZGVTZWxlY3Rvcn1bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3JlYWxJbmRleH1cIl1gKVswXSk7XG4gICAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgfVxufVxuXG52YXIgc2xpZGUgPSB7XG4gIHNsaWRlVG8sXG4gIHNsaWRlVG9Mb29wLFxuICBzbGlkZU5leHQsXG4gIHNsaWRlUHJldixcbiAgc2xpZGVSZXNldCxcbiAgc2xpZGVUb0Nsb3Nlc3QsXG4gIHNsaWRlVG9DbGlja2VkU2xpZGVcbn07XG5cbmZ1bmN0aW9uIGxvb3BDcmVhdGUoc2xpZGVSZWFsSW5kZXgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBzbGlkZXNFbFxuICB9ID0gc3dpcGVyO1xuICBpZiAoIXBhcmFtcy5sb29wIHx8IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSByZXR1cm47XG4gIGNvbnN0IGluaXRTbGlkZXMgPSAoKSA9PiB7XG4gICAgY29uc3Qgc2xpZGVzID0gZWxlbWVudENoaWxkcmVuKHNsaWRlc0VsLCBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKTtcbiAgICBzbGlkZXMuZm9yRWFjaCgoZWwsIGluZGV4KSA9PiB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JywgaW5kZXgpO1xuICAgIH0pO1xuICB9O1xuICBjb25zdCBncmlkRW5hYmxlZCA9IHN3aXBlci5ncmlkICYmIHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxO1xuICBjb25zdCBzbGlkZXNQZXJHcm91cCA9IHBhcmFtcy5zbGlkZXNQZXJHcm91cCAqIChncmlkRW5hYmxlZCA/IHBhcmFtcy5ncmlkLnJvd3MgOiAxKTtcbiAgY29uc3Qgc2hvdWxkRmlsbEdyb3VwID0gc3dpcGVyLnNsaWRlcy5sZW5ndGggJSBzbGlkZXNQZXJHcm91cCAhPT0gMDtcbiAgY29uc3Qgc2hvdWxkRmlsbEdyaWQgPSBncmlkRW5hYmxlZCAmJiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAlIHBhcmFtcy5ncmlkLnJvd3MgIT09IDA7XG4gIGNvbnN0IGFkZEJsYW5rU2xpZGVzID0gYW1vdW50T2ZTbGlkZXMgPT4ge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYW1vdW50T2ZTbGlkZXM7IGkgKz0gMSkge1xuICAgICAgY29uc3Qgc2xpZGVFbCA9IHN3aXBlci5pc0VsZW1lbnQgPyBjcmVhdGVFbGVtZW50KCdzd2lwZXItc2xpZGUnLCBbcGFyYW1zLnNsaWRlQmxhbmtDbGFzc10pIDogY3JlYXRlRWxlbWVudCgnZGl2JywgW3BhcmFtcy5zbGlkZUNsYXNzLCBwYXJhbXMuc2xpZGVCbGFua0NsYXNzXSk7XG4gICAgICBzd2lwZXIuc2xpZGVzRWwuYXBwZW5kKHNsaWRlRWwpO1xuICAgIH1cbiAgfTtcbiAgaWYgKHNob3VsZEZpbGxHcm91cCkge1xuICAgIGlmIChwYXJhbXMubG9vcEFkZEJsYW5rU2xpZGVzKSB7XG4gICAgICBjb25zdCBzbGlkZXNUb0FkZCA9IHNsaWRlc1Blckdyb3VwIC0gc3dpcGVyLnNsaWRlcy5sZW5ndGggJSBzbGlkZXNQZXJHcm91cDtcbiAgICAgIGFkZEJsYW5rU2xpZGVzKHNsaWRlc1RvQWRkKTtcbiAgICAgIHN3aXBlci5yZWNhbGNTbGlkZXMoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvd1dhcm5pbmcoJ1N3aXBlciBMb29wIFdhcm5pbmc6IFRoZSBudW1iZXIgb2Ygc2xpZGVzIGlzIG5vdCBldmVuIHRvIHNsaWRlc1Blckdyb3VwLCBsb29wIG1vZGUgbWF5IG5vdCBmdW5jdGlvbiBwcm9wZXJseS4gWW91IG5lZWQgdG8gYWRkIG1vcmUgc2xpZGVzIChvciBtYWtlIGR1cGxpY2F0ZXMsIG9yIGVtcHR5IHNsaWRlcyknKTtcbiAgICB9XG4gICAgaW5pdFNsaWRlcygpO1xuICB9IGVsc2UgaWYgKHNob3VsZEZpbGxHcmlkKSB7XG4gICAgaWYgKHBhcmFtcy5sb29wQWRkQmxhbmtTbGlkZXMpIHtcbiAgICAgIGNvbnN0IHNsaWRlc1RvQWRkID0gcGFyYW1zLmdyaWQucm93cyAtIHN3aXBlci5zbGlkZXMubGVuZ3RoICUgcGFyYW1zLmdyaWQucm93cztcbiAgICAgIGFkZEJsYW5rU2xpZGVzKHNsaWRlc1RvQWRkKTtcbiAgICAgIHN3aXBlci5yZWNhbGNTbGlkZXMoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvd1dhcm5pbmcoJ1N3aXBlciBMb29wIFdhcm5pbmc6IFRoZSBudW1iZXIgb2Ygc2xpZGVzIGlzIG5vdCBldmVuIHRvIGdyaWQucm93cywgbG9vcCBtb2RlIG1heSBub3QgZnVuY3Rpb24gcHJvcGVybHkuIFlvdSBuZWVkIHRvIGFkZCBtb3JlIHNsaWRlcyAob3IgbWFrZSBkdXBsaWNhdGVzLCBvciBlbXB0eSBzbGlkZXMpJyk7XG4gICAgfVxuICAgIGluaXRTbGlkZXMoKTtcbiAgfSBlbHNlIHtcbiAgICBpbml0U2xpZGVzKCk7XG4gIH1cbiAgc3dpcGVyLmxvb3BGaXgoe1xuICAgIHNsaWRlUmVhbEluZGV4LFxuICAgIGRpcmVjdGlvbjogcGFyYW1zLmNlbnRlcmVkU2xpZGVzID8gdW5kZWZpbmVkIDogJ25leHQnXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBsb29wRml4KF90ZW1wKSB7XG4gIGxldCB7XG4gICAgc2xpZGVSZWFsSW5kZXgsXG4gICAgc2xpZGVUbyA9IHRydWUsXG4gICAgZGlyZWN0aW9uLFxuICAgIHNldFRyYW5zbGF0ZSxcbiAgICBhY3RpdmVTbGlkZUluZGV4LFxuICAgIGJ5Q29udHJvbGxlcixcbiAgICBieU1vdXNld2hlZWxcbiAgfSA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wO1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoIXN3aXBlci5wYXJhbXMubG9vcCkgcmV0dXJuO1xuICBzd2lwZXIuZW1pdCgnYmVmb3JlTG9vcEZpeCcpO1xuICBjb25zdCB7XG4gICAgc2xpZGVzLFxuICAgIGFsbG93U2xpZGVQcmV2LFxuICAgIGFsbG93U2xpZGVOZXh0LFxuICAgIHNsaWRlc0VsLFxuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBjb25zdCB7XG4gICAgY2VudGVyZWRTbGlkZXNcbiAgfSA9IHBhcmFtcztcbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gdHJ1ZTtcbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gdHJ1ZTtcbiAgaWYgKHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICBpZiAoc2xpZGVUbykge1xuICAgICAgaWYgKCFwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgc3dpcGVyLnNuYXBJbmRleCA9PT0gMCkge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBzd2lwZXIuc25hcEluZGV4IDwgcGFyYW1zLnNsaWRlc1BlclZpZXcpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCArIHN3aXBlci5zbmFwSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAoc3dpcGVyLnNuYXBJbmRleCA9PT0gc3dpcGVyLnNuYXBHcmlkLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnZpcnR1YWwuc2xpZGVzQmVmb3JlLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IGFsbG93U2xpZGVQcmV2O1xuICAgIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IGFsbG93U2xpZGVOZXh0O1xuICAgIHN3aXBlci5lbWl0KCdsb29wRml4Jyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCBzbGlkZXNQZXJWaWV3ID0gcGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gIGlmIChzbGlkZXNQZXJWaWV3ID09PSAnYXV0bycpIHtcbiAgICBzbGlkZXNQZXJWaWV3ID0gc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCk7XG4gIH0gZWxzZSB7XG4gICAgc2xpZGVzUGVyVmlldyA9IE1hdGguY2VpbChwYXJzZUZsb2F0KHBhcmFtcy5zbGlkZXNQZXJWaWV3LCAxMCkpO1xuICAgIGlmIChjZW50ZXJlZFNsaWRlcyAmJiBzbGlkZXNQZXJWaWV3ICUgMiA9PT0gMCkge1xuICAgICAgc2xpZGVzUGVyVmlldyA9IHNsaWRlc1BlclZpZXcgKyAxO1xuICAgIH1cbiAgfVxuICBjb25zdCBzbGlkZXNQZXJHcm91cCA9IHBhcmFtcy5zbGlkZXNQZXJHcm91cEF1dG8gPyBzbGlkZXNQZXJWaWV3IDogcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICBsZXQgbG9vcGVkU2xpZGVzID0gc2xpZGVzUGVyR3JvdXA7XG4gIGlmIChsb29wZWRTbGlkZXMgJSBzbGlkZXNQZXJHcm91cCAhPT0gMCkge1xuICAgIGxvb3BlZFNsaWRlcyArPSBzbGlkZXNQZXJHcm91cCAtIGxvb3BlZFNsaWRlcyAlIHNsaWRlc1Blckdyb3VwO1xuICB9XG4gIGxvb3BlZFNsaWRlcyArPSBwYXJhbXMubG9vcEFkZGl0aW9uYWxTbGlkZXM7XG4gIHN3aXBlci5sb29wZWRTbGlkZXMgPSBsb29wZWRTbGlkZXM7XG4gIGNvbnN0IGdyaWRFbmFibGVkID0gc3dpcGVyLmdyaWQgJiYgcGFyYW1zLmdyaWQgJiYgcGFyYW1zLmdyaWQucm93cyA+IDE7XG4gIGlmIChzbGlkZXMubGVuZ3RoIDwgc2xpZGVzUGVyVmlldyArIGxvb3BlZFNsaWRlcykge1xuICAgIHNob3dXYXJuaW5nKCdTd2lwZXIgTG9vcCBXYXJuaW5nOiBUaGUgbnVtYmVyIG9mIHNsaWRlcyBpcyBub3QgZW5vdWdoIGZvciBsb29wIG1vZGUsIGl0IHdpbGwgYmUgZGlzYWJsZWQgYW5kIG5vdCBmdW5jdGlvbiBwcm9wZXJseS4gWW91IG5lZWQgdG8gYWRkIG1vcmUgc2xpZGVzIChvciBtYWtlIGR1cGxpY2F0ZXMpIG9yIGxvd2VyIHRoZSB2YWx1ZXMgb2Ygc2xpZGVzUGVyVmlldyBhbmQgc2xpZGVzUGVyR3JvdXAgcGFyYW1ldGVycycpO1xuICB9IGVsc2UgaWYgKGdyaWRFbmFibGVkICYmIHBhcmFtcy5ncmlkLmZpbGwgPT09ICdyb3cnKSB7XG4gICAgc2hvd1dhcm5pbmcoJ1N3aXBlciBMb29wIFdhcm5pbmc6IExvb3AgbW9kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGdyaWQuZmlsbCA9IGByb3dgJyk7XG4gIH1cbiAgY29uc3QgcHJlcGVuZFNsaWRlc0luZGV4ZXMgPSBbXTtcbiAgY29uc3QgYXBwZW5kU2xpZGVzSW5kZXhlcyA9IFtdO1xuICBsZXQgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gIGlmICh0eXBlb2YgYWN0aXZlU2xpZGVJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBhY3RpdmVTbGlkZUluZGV4ID0gc3dpcGVyLmdldFNsaWRlSW5kZXgoc2xpZGVzLmZpbmQoZWwgPT4gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKHBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzKSkpO1xuICB9IGVsc2Uge1xuICAgIGFjdGl2ZUluZGV4ID0gYWN0aXZlU2xpZGVJbmRleDtcbiAgfVxuICBjb25zdCBpc05leHQgPSBkaXJlY3Rpb24gPT09ICduZXh0JyB8fCAhZGlyZWN0aW9uO1xuICBjb25zdCBpc1ByZXYgPSBkaXJlY3Rpb24gPT09ICdwcmV2JyB8fCAhZGlyZWN0aW9uO1xuICBsZXQgc2xpZGVzUHJlcGVuZGVkID0gMDtcbiAgbGV0IHNsaWRlc0FwcGVuZGVkID0gMDtcbiAgY29uc3QgY29scyA9IGdyaWRFbmFibGVkID8gTWF0aC5jZWlsKHNsaWRlcy5sZW5ndGggLyBwYXJhbXMuZ3JpZC5yb3dzKSA6IHNsaWRlcy5sZW5ndGg7XG4gIGNvbnN0IGFjdGl2ZUNvbEluZGV4ID0gZ3JpZEVuYWJsZWQgPyBzbGlkZXNbYWN0aXZlU2xpZGVJbmRleF0uY29sdW1uIDogYWN0aXZlU2xpZGVJbmRleDtcbiAgY29uc3QgYWN0aXZlQ29sSW5kZXhXaXRoU2hpZnQgPSBhY3RpdmVDb2xJbmRleCArIChjZW50ZXJlZFNsaWRlcyAmJiB0eXBlb2Ygc2V0VHJhbnNsYXRlID09PSAndW5kZWZpbmVkJyA/IC1zbGlkZXNQZXJWaWV3IC8gMiArIDAuNSA6IDApO1xuICAvLyBwcmVwZW5kIGxhc3Qgc2xpZGVzIGJlZm9yZSBzdGFydFxuICBpZiAoYWN0aXZlQ29sSW5kZXhXaXRoU2hpZnQgPCBsb29wZWRTbGlkZXMpIHtcbiAgICBzbGlkZXNQcmVwZW5kZWQgPSBNYXRoLm1heChsb29wZWRTbGlkZXMgLSBhY3RpdmVDb2xJbmRleFdpdGhTaGlmdCwgc2xpZGVzUGVyR3JvdXApO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbG9vcGVkU2xpZGVzIC0gYWN0aXZlQ29sSW5kZXhXaXRoU2hpZnQ7IGkgKz0gMSkge1xuICAgICAgY29uc3QgaW5kZXggPSBpIC0gTWF0aC5mbG9vcihpIC8gY29scykgKiBjb2xzO1xuICAgICAgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgICAgIGNvbnN0IGNvbEluZGV4VG9QcmVwZW5kID0gY29scyAtIGluZGV4IC0gMTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHNsaWRlcy5sZW5ndGggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICAgIGlmIChzbGlkZXNbaV0uY29sdW1uID09PSBjb2xJbmRleFRvUHJlcGVuZCkgcHJlcGVuZFNsaWRlc0luZGV4ZXMucHVzaChpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzbGlkZXMuZm9yRWFjaCgoc2xpZGUsIHNsaWRlSW5kZXgpID0+IHtcbiAgICAgICAgLy8gICBpZiAoc2xpZGUuY29sdW1uID09PSBjb2xJbmRleFRvUHJlcGVuZCkgcHJlcGVuZFNsaWRlc0luZGV4ZXMucHVzaChzbGlkZUluZGV4KTtcbiAgICAgICAgLy8gfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcmVwZW5kU2xpZGVzSW5kZXhlcy5wdXNoKGNvbHMgLSBpbmRleCAtIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChhY3RpdmVDb2xJbmRleFdpdGhTaGlmdCArIHNsaWRlc1BlclZpZXcgPiBjb2xzIC0gbG9vcGVkU2xpZGVzKSB7XG4gICAgc2xpZGVzQXBwZW5kZWQgPSBNYXRoLm1heChhY3RpdmVDb2xJbmRleFdpdGhTaGlmdCAtIChjb2xzIC0gbG9vcGVkU2xpZGVzICogMiksIHNsaWRlc1Blckdyb3VwKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlc0FwcGVuZGVkOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IGluZGV4ID0gaSAtIE1hdGguZmxvb3IoaSAvIGNvbHMpICogY29scztcbiAgICAgIGlmIChncmlkRW5hYmxlZCkge1xuICAgICAgICBzbGlkZXMuZm9yRWFjaCgoc2xpZGUsIHNsaWRlSW5kZXgpID0+IHtcbiAgICAgICAgICBpZiAoc2xpZGUuY29sdW1uID09PSBpbmRleCkgYXBwZW5kU2xpZGVzSW5kZXhlcy5wdXNoKHNsaWRlSW5kZXgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFwcGVuZFNsaWRlc0luZGV4ZXMucHVzaChpbmRleCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fID0gdHJ1ZTtcbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICBzd2lwZXIuX19wcmV2ZW50T2JzZXJ2ZXJfXyA9IGZhbHNlO1xuICB9KTtcbiAgaWYgKGlzUHJldikge1xuICAgIHByZXBlbmRTbGlkZXNJbmRleGVzLmZvckVhY2goaW5kZXggPT4ge1xuICAgICAgc2xpZGVzW2luZGV4XS5zd2lwZXJMb29wTW92ZURPTSA9IHRydWU7XG4gICAgICBzbGlkZXNFbC5wcmVwZW5kKHNsaWRlc1tpbmRleF0pO1xuICAgICAgc2xpZGVzW2luZGV4XS5zd2lwZXJMb29wTW92ZURPTSA9IGZhbHNlO1xuICAgIH0pO1xuICB9XG4gIGlmIChpc05leHQpIHtcbiAgICBhcHBlbmRTbGlkZXNJbmRleGVzLmZvckVhY2goaW5kZXggPT4ge1xuICAgICAgc2xpZGVzW2luZGV4XS5zd2lwZXJMb29wTW92ZURPTSA9IHRydWU7XG4gICAgICBzbGlkZXNFbC5hcHBlbmQoc2xpZGVzW2luZGV4XSk7XG4gICAgICBzbGlkZXNbaW5kZXhdLnN3aXBlckxvb3BNb3ZlRE9NID0gZmFsc2U7XG4gICAgfSk7XG4gIH1cbiAgc3dpcGVyLnJlY2FsY1NsaWRlcygpO1xuICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJykge1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgfSBlbHNlIGlmIChncmlkRW5hYmxlZCAmJiAocHJlcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoID4gMCAmJiBpc1ByZXYgfHwgYXBwZW5kU2xpZGVzSW5kZXhlcy5sZW5ndGggPiAwICYmIGlzTmV4dCkpIHtcbiAgICBzd2lwZXIuc2xpZGVzLmZvckVhY2goKHNsaWRlLCBzbGlkZUluZGV4KSA9PiB7XG4gICAgICBzd2lwZXIuZ3JpZC51cGRhdGVTbGlkZShzbGlkZUluZGV4LCBzbGlkZSwgc3dpcGVyLnNsaWRlcyk7XG4gICAgfSk7XG4gIH1cbiAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICB9XG4gIGlmIChzbGlkZVRvKSB7XG4gICAgaWYgKHByZXBlbmRTbGlkZXNJbmRleGVzLmxlbmd0aCA+IDAgJiYgaXNQcmV2KSB7XG4gICAgICBpZiAodHlwZW9mIHNsaWRlUmVhbEluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zdCBjdXJyZW50U2xpZGVUcmFuc2xhdGUgPSBzd2lwZXIuc2xpZGVzR3JpZFthY3RpdmVJbmRleF07XG4gICAgICAgIGNvbnN0IG5ld1NsaWRlVHJhbnNsYXRlID0gc3dpcGVyLnNsaWRlc0dyaWRbYWN0aXZlSW5kZXggKyBzbGlkZXNQcmVwZW5kZWRdO1xuICAgICAgICBjb25zdCBkaWZmID0gbmV3U2xpZGVUcmFuc2xhdGUgLSBjdXJyZW50U2xpZGVUcmFuc2xhdGU7XG4gICAgICAgIGlmIChieU1vdXNld2hlZWwpIHtcbiAgICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHN3aXBlci50cmFuc2xhdGUgLSBkaWZmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhhY3RpdmVJbmRleCArIE1hdGguY2VpbChzbGlkZXNQcmVwZW5kZWQpLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgaWYgKHNldFRyYW5zbGF0ZSkge1xuICAgICAgICAgICAgc3dpcGVyLnRvdWNoRXZlbnRzRGF0YS5zdGFydFRyYW5zbGF0ZSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGEuc3RhcnRUcmFuc2xhdGUgLSBkaWZmO1xuICAgICAgICAgICAgc3dpcGVyLnRvdWNoRXZlbnRzRGF0YS5jdXJyZW50VHJhbnNsYXRlID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YS5jdXJyZW50VHJhbnNsYXRlIC0gZGlmZjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzZXRUcmFuc2xhdGUpIHtcbiAgICAgICAgICBjb25zdCBzaGlmdCA9IGdyaWRFbmFibGVkID8gcHJlcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoIC8gcGFyYW1zLmdyaWQucm93cyA6IHByZXBlbmRTbGlkZXNJbmRleGVzLmxlbmd0aDtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXggKyBzaGlmdCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgIHN3aXBlci50b3VjaEV2ZW50c0RhdGEuY3VycmVudFRyYW5zbGF0ZSA9IHN3aXBlci50cmFuc2xhdGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGFwcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoID4gMCAmJiBpc05leHQpIHtcbiAgICAgIGlmICh0eXBlb2Ygc2xpZGVSZWFsSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRTbGlkZVRyYW5zbGF0ZSA9IHN3aXBlci5zbGlkZXNHcmlkW2FjdGl2ZUluZGV4XTtcbiAgICAgICAgY29uc3QgbmV3U2xpZGVUcmFuc2xhdGUgPSBzd2lwZXIuc2xpZGVzR3JpZFthY3RpdmVJbmRleCAtIHNsaWRlc0FwcGVuZGVkXTtcbiAgICAgICAgY29uc3QgZGlmZiA9IG5ld1NsaWRlVHJhbnNsYXRlIC0gY3VycmVudFNsaWRlVHJhbnNsYXRlO1xuICAgICAgICBpZiAoYnlNb3VzZXdoZWVsKSB7XG4gICAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShzd2lwZXIudHJhbnNsYXRlIC0gZGlmZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oYWN0aXZlSW5kZXggLSBzbGlkZXNBcHBlbmRlZCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgIGlmIChzZXRUcmFuc2xhdGUpIHtcbiAgICAgICAgICAgIHN3aXBlci50b3VjaEV2ZW50c0RhdGEuc3RhcnRUcmFuc2xhdGUgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhLnN0YXJ0VHJhbnNsYXRlIC0gZGlmZjtcbiAgICAgICAgICAgIHN3aXBlci50b3VjaEV2ZW50c0RhdGEuY3VycmVudFRyYW5zbGF0ZSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGEuY3VycmVudFRyYW5zbGF0ZSAtIGRpZmY7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBzaGlmdCA9IGdyaWRFbmFibGVkID8gYXBwZW5kU2xpZGVzSW5kZXhlcy5sZW5ndGggLyBwYXJhbXMuZ3JpZC5yb3dzIDogYXBwZW5kU2xpZGVzSW5kZXhlcy5sZW5ndGg7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCAtIHNoaWZ0LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IGFsbG93U2xpZGVQcmV2O1xuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSBhbGxvd1NsaWRlTmV4dDtcbiAgaWYgKHN3aXBlci5jb250cm9sbGVyICYmIHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wgJiYgIWJ5Q29udHJvbGxlcikge1xuICAgIGNvbnN0IGxvb3BQYXJhbXMgPSB7XG4gICAgICBzbGlkZVJlYWxJbmRleCxcbiAgICAgIGRpcmVjdGlvbixcbiAgICAgIHNldFRyYW5zbGF0ZSxcbiAgICAgIGFjdGl2ZVNsaWRlSW5kZXgsXG4gICAgICBieUNvbnRyb2xsZXI6IHRydWVcbiAgICB9O1xuICAgIGlmIChBcnJheS5pc0FycmF5KHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpKSB7XG4gICAgICBzd2lwZXIuY29udHJvbGxlci5jb250cm9sLmZvckVhY2goYyA9PiB7XG4gICAgICAgIGlmICghYy5kZXN0cm95ZWQgJiYgYy5wYXJhbXMubG9vcCkgYy5sb29wRml4KHtcbiAgICAgICAgICAuLi5sb29wUGFyYW1zLFxuICAgICAgICAgIHNsaWRlVG86IGMucGFyYW1zLnNsaWRlc1BlclZpZXcgPT09IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID8gc2xpZGVUbyA6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChzd2lwZXIuY29udHJvbGxlci5jb250cm9sIGluc3RhbmNlb2Ygc3dpcGVyLmNvbnN0cnVjdG9yICYmIHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wucGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wubG9vcEZpeCh7XG4gICAgICAgIC4uLmxvb3BQYXJhbXMsXG4gICAgICAgIHNsaWRlVG86IHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wucGFyYW1zLnNsaWRlc1BlclZpZXcgPT09IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID8gc2xpZGVUbyA6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ2xvb3BGaXgnKTtcbn1cblxuZnVuY3Rpb24gbG9vcERlc3Ryb3koKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgc2xpZGVzRWxcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFwYXJhbXMubG9vcCB8fCBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkgcmV0dXJuO1xuICBzd2lwZXIucmVjYWxjU2xpZGVzKCk7XG4gIGNvbnN0IG5ld1NsaWRlc09yZGVyID0gW107XG4gIHN3aXBlci5zbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICBjb25zdCBpbmRleCA9IHR5cGVvZiBzbGlkZUVsLnN3aXBlclNsaWRlSW5kZXggPT09ICd1bmRlZmluZWQnID8gc2xpZGVFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgKiAxIDogc2xpZGVFbC5zd2lwZXJTbGlkZUluZGV4O1xuICAgIG5ld1NsaWRlc09yZGVyW2luZGV4XSA9IHNsaWRlRWw7XG4gIH0pO1xuICBzd2lwZXIuc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgc2xpZGVFbC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG4gIH0pO1xuICBuZXdTbGlkZXNPcmRlci5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgIHNsaWRlc0VsLmFwcGVuZChzbGlkZUVsKTtcbiAgfSk7XG4gIHN3aXBlci5yZWNhbGNTbGlkZXMoKTtcbiAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnJlYWxJbmRleCwgMCk7XG59XG5cbnZhciBsb29wID0ge1xuICBsb29wQ3JlYXRlLFxuICBsb29wRml4LFxuICBsb29wRGVzdHJveVxufTtcblxuZnVuY3Rpb24gc2V0R3JhYkN1cnNvcihtb3ZpbmcpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKCFzd2lwZXIucGFyYW1zLnNpbXVsYXRlVG91Y2ggfHwgc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCB8fCBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHJldHVybjtcbiAgY29uc3QgZWwgPSBzd2lwZXIucGFyYW1zLnRvdWNoRXZlbnRzVGFyZ2V0ID09PSAnY29udGFpbmVyJyA/IHN3aXBlci5lbCA6IHN3aXBlci53cmFwcGVyRWw7XG4gIGlmIChzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgc3dpcGVyLl9fcHJldmVudE9ic2VydmVyX18gPSB0cnVlO1xuICB9XG4gIGVsLnN0eWxlLmN1cnNvciA9ICdtb3ZlJztcbiAgZWwuc3R5bGUuY3Vyc29yID0gbW92aW5nID8gJ2dyYWJiaW5nJyA6ICdncmFiJztcbiAgaWYgKHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgc3dpcGVyLl9fcHJldmVudE9ic2VydmVyX18gPSBmYWxzZTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1bnNldEdyYWJDdXJzb3IoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmlzTG9ja2VkIHx8IHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoc3dpcGVyLmlzRWxlbWVudCkge1xuICAgIHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fID0gdHJ1ZTtcbiAgfVxuICBzd2lwZXJbc3dpcGVyLnBhcmFtcy50b3VjaEV2ZW50c1RhcmdldCA9PT0gJ2NvbnRhaW5lcicgPyAnZWwnIDogJ3dyYXBwZXJFbCddLnN0eWxlLmN1cnNvciA9ICcnO1xuICBpZiAoc3dpcGVyLmlzRWxlbWVudCkge1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBzd2lwZXIuX19wcmV2ZW50T2JzZXJ2ZXJfXyA9IGZhbHNlO1xuICAgIH0pO1xuICB9XG59XG5cbnZhciBncmFiQ3Vyc29yID0ge1xuICBzZXRHcmFiQ3Vyc29yLFxuICB1bnNldEdyYWJDdXJzb3Jcbn07XG5cbi8vIE1vZGlmaWVkIGZyb20gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTQ1MjA1NTQvY3VzdG9tLWVsZW1lbnQtZ2V0cm9vdG5vZGUtY2xvc2VzdC1mdW5jdGlvbi1jcm9zc2luZy1tdWx0aXBsZS1wYXJlbnQtc2hhZG93ZFxuZnVuY3Rpb24gY2xvc2VzdEVsZW1lbnQoc2VsZWN0b3IsIGJhc2UpIHtcbiAgaWYgKGJhc2UgPT09IHZvaWQgMCkge1xuICAgIGJhc2UgPSB0aGlzO1xuICB9XG4gIGZ1bmN0aW9uIF9fY2xvc2VzdEZyb20oZWwpIHtcbiAgICBpZiAoIWVsIHx8IGVsID09PSBnZXREb2N1bWVudCgpIHx8IGVsID09PSBnZXRXaW5kb3coKSkgcmV0dXJuIG51bGw7XG4gICAgaWYgKGVsLmFzc2lnbmVkU2xvdCkgZWwgPSBlbC5hc3NpZ25lZFNsb3Q7XG4gICAgY29uc3QgZm91bmQgPSBlbC5jbG9zZXN0KHNlbGVjdG9yKTtcbiAgICBpZiAoIWZvdW5kICYmICFlbC5nZXRSb290Tm9kZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBmb3VuZCB8fCBfX2Nsb3Nlc3RGcm9tKGVsLmdldFJvb3ROb2RlKCkuaG9zdCk7XG4gIH1cbiAgcmV0dXJuIF9fY2xvc2VzdEZyb20oYmFzZSk7XG59XG5mdW5jdGlvbiBwcmV2ZW50RWRnZVN3aXBlKHN3aXBlciwgZXZlbnQsIHN0YXJ0WCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3Qge1xuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBjb25zdCBlZGdlU3dpcGVEZXRlY3Rpb24gPSBwYXJhbXMuZWRnZVN3aXBlRGV0ZWN0aW9uO1xuICBjb25zdCBlZGdlU3dpcGVUaHJlc2hvbGQgPSBwYXJhbXMuZWRnZVN3aXBlVGhyZXNob2xkO1xuICBpZiAoZWRnZVN3aXBlRGV0ZWN0aW9uICYmIChzdGFydFggPD0gZWRnZVN3aXBlVGhyZXNob2xkIHx8IHN0YXJ0WCA+PSB3aW5kb3cuaW5uZXJXaWR0aCAtIGVkZ2VTd2lwZVRocmVzaG9sZCkpIHtcbiAgICBpZiAoZWRnZVN3aXBlRGV0ZWN0aW9uID09PSAncHJldmVudCcpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gb25Ub3VjaFN0YXJ0KGV2ZW50KSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgbGV0IGUgPSBldmVudDtcbiAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcbiAgY29uc3QgZGF0YSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG4gIGlmIChlLnR5cGUgPT09ICdwb2ludGVyZG93bicpIHtcbiAgICBpZiAoZGF0YS5wb2ludGVySWQgIT09IG51bGwgJiYgZGF0YS5wb2ludGVySWQgIT09IGUucG9pbnRlcklkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRhdGEucG9pbnRlcklkID0gZS5wb2ludGVySWQ7XG4gIH0gZWxzZSBpZiAoZS50eXBlID09PSAndG91Y2hzdGFydCcgJiYgZS50YXJnZXRUb3VjaGVzLmxlbmd0aCA9PT0gMSkge1xuICAgIGRhdGEudG91Y2hJZCA9IGUudGFyZ2V0VG91Y2hlc1swXS5pZGVudGlmaWVyO1xuICB9XG4gIGlmIChlLnR5cGUgPT09ICd0b3VjaHN0YXJ0Jykge1xuICAgIC8vIGRvbid0IHByb2NlZWQgdG91Y2ggZXZlbnRcbiAgICBwcmV2ZW50RWRnZVN3aXBlKHN3aXBlciwgZSwgZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYKTtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICB0b3VjaGVzLFxuICAgIGVuYWJsZWRcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm47XG4gIGlmICghcGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgZS5wb2ludGVyVHlwZSA9PT0gJ21vdXNlJykgcmV0dXJuO1xuICBpZiAoc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMuY3NzTW9kZSAmJiBwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wRml4KCk7XG4gIH1cbiAgbGV0IHRhcmdldEVsID0gZS50YXJnZXQ7XG4gIGlmIChwYXJhbXMudG91Y2hFdmVudHNUYXJnZXQgPT09ICd3cmFwcGVyJykge1xuICAgIGlmICghZWxlbWVudElzQ2hpbGRPZih0YXJnZXRFbCwgc3dpcGVyLndyYXBwZXJFbCkpIHJldHVybjtcbiAgfVxuICBpZiAoJ3doaWNoJyBpbiBlICYmIGUud2hpY2ggPT09IDMpIHJldHVybjtcbiAgaWYgKCdidXR0b24nIGluIGUgJiYgZS5idXR0b24gPiAwKSByZXR1cm47XG4gIGlmIChkYXRhLmlzVG91Y2hlZCAmJiBkYXRhLmlzTW92ZWQpIHJldHVybjtcblxuICAvLyBjaGFuZ2UgdGFyZ2V0IGVsIGZvciBzaGFkb3cgcm9vdCBjb21wb25lbnRcbiAgY29uc3Qgc3dpcGluZ0NsYXNzSGFzVmFsdWUgPSAhIXBhcmFtcy5ub1N3aXBpbmdDbGFzcyAmJiBwYXJhbXMubm9Td2lwaW5nQ2xhc3MgIT09ICcnO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgY29uc3QgZXZlbnRQYXRoID0gZS5jb21wb3NlZFBhdGggPyBlLmNvbXBvc2VkUGF0aCgpIDogZS5wYXRoO1xuICBpZiAoc3dpcGluZ0NsYXNzSGFzVmFsdWUgJiYgZS50YXJnZXQgJiYgZS50YXJnZXQuc2hhZG93Um9vdCAmJiBldmVudFBhdGgpIHtcbiAgICB0YXJnZXRFbCA9IGV2ZW50UGF0aFswXTtcbiAgfVxuICBjb25zdCBub1N3aXBpbmdTZWxlY3RvciA9IHBhcmFtcy5ub1N3aXBpbmdTZWxlY3RvciA/IHBhcmFtcy5ub1N3aXBpbmdTZWxlY3RvciA6IGAuJHtwYXJhbXMubm9Td2lwaW5nQ2xhc3N9YDtcbiAgY29uc3QgaXNUYXJnZXRTaGFkb3cgPSAhIShlLnRhcmdldCAmJiBlLnRhcmdldC5zaGFkb3dSb290KTtcblxuICAvLyB1c2UgY2xvc2VzdEVsZW1lbnQgZm9yIHNoYWRvdyByb290IGVsZW1lbnQgdG8gZ2V0IHRoZSBhY3R1YWwgY2xvc2VzdCBmb3IgbmVzdGVkIHNoYWRvdyByb290IGVsZW1lbnRcbiAgaWYgKHBhcmFtcy5ub1N3aXBpbmcgJiYgKGlzVGFyZ2V0U2hhZG93ID8gY2xvc2VzdEVsZW1lbnQobm9Td2lwaW5nU2VsZWN0b3IsIHRhcmdldEVsKSA6IHRhcmdldEVsLmNsb3Nlc3Qobm9Td2lwaW5nU2VsZWN0b3IpKSkge1xuICAgIHN3aXBlci5hbGxvd0NsaWNrID0gdHJ1ZTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHBhcmFtcy5zd2lwZUhhbmRsZXIpIHtcbiAgICBpZiAoIXRhcmdldEVsLmNsb3Nlc3QocGFyYW1zLnN3aXBlSGFuZGxlcikpIHJldHVybjtcbiAgfVxuICB0b3VjaGVzLmN1cnJlbnRYID0gZS5wYWdlWDtcbiAgdG91Y2hlcy5jdXJyZW50WSA9IGUucGFnZVk7XG4gIGNvbnN0IHN0YXJ0WCA9IHRvdWNoZXMuY3VycmVudFg7XG4gIGNvbnN0IHN0YXJ0WSA9IHRvdWNoZXMuY3VycmVudFk7XG5cbiAgLy8gRG8gTk9UIHN0YXJ0IGlmIGlPUyBlZGdlIHN3aXBlIGlzIGRldGVjdGVkLiBPdGhlcndpc2UgaU9TIGFwcCBjYW5ub3Qgc3dpcGUtdG8tZ28tYmFjayBhbnltb3JlXG5cbiAgaWYgKCFwcmV2ZW50RWRnZVN3aXBlKHN3aXBlciwgZSwgc3RhcnRYKSkge1xuICAgIHJldHVybjtcbiAgfVxuICBPYmplY3QuYXNzaWduKGRhdGEsIHtcbiAgICBpc1RvdWNoZWQ6IHRydWUsXG4gICAgaXNNb3ZlZDogZmFsc2UsXG4gICAgYWxsb3dUb3VjaENhbGxiYWNrczogdHJ1ZSxcbiAgICBpc1Njcm9sbGluZzogdW5kZWZpbmVkLFxuICAgIHN0YXJ0TW92aW5nOiB1bmRlZmluZWRcbiAgfSk7XG4gIHRvdWNoZXMuc3RhcnRYID0gc3RhcnRYO1xuICB0b3VjaGVzLnN0YXJ0WSA9IHN0YXJ0WTtcbiAgZGF0YS50b3VjaFN0YXJ0VGltZSA9IG5vdygpO1xuICBzd2lwZXIuYWxsb3dDbGljayA9IHRydWU7XG4gIHN3aXBlci51cGRhdGVTaXplKCk7XG4gIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9IHVuZGVmaW5lZDtcbiAgaWYgKHBhcmFtcy50aHJlc2hvbGQgPiAwKSBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSA9IGZhbHNlO1xuICBsZXQgcHJldmVudERlZmF1bHQgPSB0cnVlO1xuICBpZiAodGFyZ2V0RWwubWF0Y2hlcyhkYXRhLmZvY3VzYWJsZUVsZW1lbnRzKSkge1xuICAgIHByZXZlbnREZWZhdWx0ID0gZmFsc2U7XG4gICAgaWYgKHRhcmdldEVsLm5vZGVOYW1lID09PSAnU0VMRUNUJykge1xuICAgICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5tYXRjaGVzKGRhdGEuZm9jdXNhYmxlRWxlbWVudHMpICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IHRhcmdldEVsICYmIChlLnBvaW50ZXJUeXBlID09PSAnbW91c2UnIHx8IGUucG9pbnRlclR5cGUgIT09ICdtb3VzZScgJiYgIXRhcmdldEVsLm1hdGNoZXMoZGF0YS5mb2N1c2FibGVFbGVtZW50cykpKSB7XG4gICAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ibHVyKCk7XG4gIH1cbiAgY29uc3Qgc2hvdWxkUHJldmVudERlZmF1bHQgPSBwcmV2ZW50RGVmYXVsdCAmJiBzd2lwZXIuYWxsb3dUb3VjaE1vdmUgJiYgcGFyYW1zLnRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdDtcbiAgaWYgKChwYXJhbXMudG91Y2hTdGFydEZvcmNlUHJldmVudERlZmF1bHQgfHwgc2hvdWxkUHJldmVudERlZmF1bHQpICYmICF0YXJnZXRFbC5pc0NvbnRlbnRFZGl0YWJsZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfVxuICBpZiAocGFyYW1zLmZyZWVNb2RlICYmIHBhcmFtcy5mcmVlTW9kZS5lbmFibGVkICYmIHN3aXBlci5mcmVlTW9kZSAmJiBzd2lwZXIuYW5pbWF0aW5nICYmICFwYXJhbXMuY3NzTW9kZSkge1xuICAgIHN3aXBlci5mcmVlTW9kZS5vblRvdWNoU3RhcnQoKTtcbiAgfVxuICBzd2lwZXIuZW1pdCgndG91Y2hTdGFydCcsIGUpO1xufVxuXG5mdW5jdGlvbiBvblRvdWNoTW92ZShldmVudCkge1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IGRhdGEgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHRvdWNoZXMsXG4gICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgZW5hYmxlZFxuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVuYWJsZWQpIHJldHVybjtcbiAgaWYgKCFwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiBldmVudC5wb2ludGVyVHlwZSA9PT0gJ21vdXNlJykgcmV0dXJuO1xuICBsZXQgZSA9IGV2ZW50O1xuICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50O1xuICBpZiAoZS50eXBlID09PSAncG9pbnRlcm1vdmUnKSB7XG4gICAgaWYgKGRhdGEudG91Y2hJZCAhPT0gbnVsbCkgcmV0dXJuOyAvLyByZXR1cm4gZnJvbSBwb2ludGVyIGlmIHdlIHVzZSB0b3VjaFxuICAgIGNvbnN0IGlkID0gZS5wb2ludGVySWQ7XG4gICAgaWYgKGlkICE9PSBkYXRhLnBvaW50ZXJJZCkgcmV0dXJuO1xuICB9XG4gIGxldCB0YXJnZXRUb3VjaDtcbiAgaWYgKGUudHlwZSA9PT0gJ3RvdWNobW92ZScpIHtcbiAgICB0YXJnZXRUb3VjaCA9IFsuLi5lLmNoYW5nZWRUb3VjaGVzXS5maW5kKHQgPT4gdC5pZGVudGlmaWVyID09PSBkYXRhLnRvdWNoSWQpO1xuICAgIGlmICghdGFyZ2V0VG91Y2ggfHwgdGFyZ2V0VG91Y2guaWRlbnRpZmllciAhPT0gZGF0YS50b3VjaElkKSByZXR1cm47XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0VG91Y2ggPSBlO1xuICB9XG4gIGlmICghZGF0YS5pc1RvdWNoZWQpIHtcbiAgICBpZiAoZGF0YS5zdGFydE1vdmluZyAmJiBkYXRhLmlzU2Nyb2xsaW5nKSB7XG4gICAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlT3Bwb3NpdGUnLCBlKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHBhZ2VYID0gdGFyZ2V0VG91Y2gucGFnZVg7XG4gIGNvbnN0IHBhZ2VZID0gdGFyZ2V0VG91Y2gucGFnZVk7XG4gIGlmIChlLnByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyKSB7XG4gICAgdG91Y2hlcy5zdGFydFggPSBwYWdlWDtcbiAgICB0b3VjaGVzLnN0YXJ0WSA9IHBhZ2VZO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIXN3aXBlci5hbGxvd1RvdWNoTW92ZSkge1xuICAgIGlmICghZS50YXJnZXQubWF0Y2hlcyhkYXRhLmZvY3VzYWJsZUVsZW1lbnRzKSkge1xuICAgICAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGRhdGEuaXNUb3VjaGVkKSB7XG4gICAgICBPYmplY3QuYXNzaWduKHRvdWNoZXMsIHtcbiAgICAgICAgc3RhcnRYOiBwYWdlWCxcbiAgICAgICAgc3RhcnRZOiBwYWdlWSxcbiAgICAgICAgY3VycmVudFg6IHBhZ2VYLFxuICAgICAgICBjdXJyZW50WTogcGFnZVlcbiAgICAgIH0pO1xuICAgICAgZGF0YS50b3VjaFN0YXJ0VGltZSA9IG5vdygpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHBhcmFtcy50b3VjaFJlbGVhc2VPbkVkZ2VzICYmICFwYXJhbXMubG9vcCkge1xuICAgIGlmIChzd2lwZXIuaXNWZXJ0aWNhbCgpKSB7XG4gICAgICAvLyBWZXJ0aWNhbFxuICAgICAgaWYgKHBhZ2VZIDwgdG91Y2hlcy5zdGFydFkgJiYgc3dpcGVyLnRyYW5zbGF0ZSA8PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgfHwgcGFnZVkgPiB0b3VjaGVzLnN0YXJ0WSAmJiBzd2lwZXIudHJhbnNsYXRlID49IHN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFnZVggPCB0b3VjaGVzLnN0YXJ0WCAmJiBzd2lwZXIudHJhbnNsYXRlIDw9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSB8fCBwYWdlWCA+IHRvdWNoZXMuc3RhcnRYICYmIHN3aXBlci50cmFuc2xhdGUgPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQubWF0Y2hlcyhkYXRhLmZvY3VzYWJsZUVsZW1lbnRzKSAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBlLnRhcmdldCAmJiBlLnBvaW50ZXJUeXBlICE9PSAnbW91c2UnKSB7XG4gICAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ibHVyKCk7XG4gIH1cbiAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICBpZiAoZS50YXJnZXQgPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgZS50YXJnZXQubWF0Y2hlcyhkYXRhLmZvY3VzYWJsZUVsZW1lbnRzKSkge1xuICAgICAgZGF0YS5pc01vdmVkID0gdHJ1ZTtcbiAgICAgIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIGlmIChkYXRhLmFsbG93VG91Y2hDYWxsYmFja3MpIHtcbiAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlJywgZSk7XG4gIH1cbiAgdG91Y2hlcy5wcmV2aW91c1ggPSB0b3VjaGVzLmN1cnJlbnRYO1xuICB0b3VjaGVzLnByZXZpb3VzWSA9IHRvdWNoZXMuY3VycmVudFk7XG4gIHRvdWNoZXMuY3VycmVudFggPSBwYWdlWDtcbiAgdG91Y2hlcy5jdXJyZW50WSA9IHBhZ2VZO1xuICBjb25zdCBkaWZmWCA9IHRvdWNoZXMuY3VycmVudFggLSB0b3VjaGVzLnN0YXJ0WDtcbiAgY29uc3QgZGlmZlkgPSB0b3VjaGVzLmN1cnJlbnRZIC0gdG91Y2hlcy5zdGFydFk7XG4gIGlmIChzd2lwZXIucGFyYW1zLnRocmVzaG9sZCAmJiBNYXRoLnNxcnQoZGlmZlggKiogMiArIGRpZmZZICoqIDIpIDwgc3dpcGVyLnBhcmFtcy50aHJlc2hvbGQpIHJldHVybjtcbiAgaWYgKHR5cGVvZiBkYXRhLmlzU2Nyb2xsaW5nID09PSAndW5kZWZpbmVkJykge1xuICAgIGxldCB0b3VjaEFuZ2xlO1xuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgdG91Y2hlcy5jdXJyZW50WSA9PT0gdG91Y2hlcy5zdGFydFkgfHwgc3dpcGVyLmlzVmVydGljYWwoKSAmJiB0b3VjaGVzLmN1cnJlbnRYID09PSB0b3VjaGVzLnN0YXJ0WCkge1xuICAgICAgZGF0YS5pc1Njcm9sbGluZyA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGlmIChkaWZmWCAqIGRpZmZYICsgZGlmZlkgKiBkaWZmWSA+PSAyNSkge1xuICAgICAgICB0b3VjaEFuZ2xlID0gTWF0aC5hdGFuMihNYXRoLmFicyhkaWZmWSksIE1hdGguYWJzKGRpZmZYKSkgKiAxODAgLyBNYXRoLlBJO1xuICAgICAgICBkYXRhLmlzU2Nyb2xsaW5nID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gdG91Y2hBbmdsZSA+IHBhcmFtcy50b3VjaEFuZ2xlIDogOTAgLSB0b3VjaEFuZ2xlID4gcGFyYW1zLnRvdWNoQW5nbGU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChkYXRhLmlzU2Nyb2xsaW5nKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3RvdWNoTW92ZU9wcG9zaXRlJywgZSk7XG4gIH1cbiAgaWYgKHR5cGVvZiBkYXRhLnN0YXJ0TW92aW5nID09PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0b3VjaGVzLmN1cnJlbnRYICE9PSB0b3VjaGVzLnN0YXJ0WCB8fCB0b3VjaGVzLmN1cnJlbnRZICE9PSB0b3VjaGVzLnN0YXJ0WSkge1xuICAgICAgZGF0YS5zdGFydE1vdmluZyA9IHRydWU7XG4gICAgfVxuICB9XG4gIGlmIChkYXRhLmlzU2Nyb2xsaW5nIHx8IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgJiYgZGF0YS5wcmV2ZW50VG91Y2hNb3ZlRnJvbVBvaW50ZXJNb3ZlKSB7XG4gICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCFkYXRhLnN0YXJ0TW92aW5nKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG4gIGlmICghcGFyYW1zLmNzc01vZGUgJiYgZS5jYW5jZWxhYmxlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG4gIGlmIChwYXJhbXMudG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uICYmICFwYXJhbXMubmVzdGVkKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfVxuICBsZXQgZGlmZiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IGRpZmZYIDogZGlmZlk7XG4gIGxldCB0b3VjaGVzRGlmZiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHRvdWNoZXMuY3VycmVudFggLSB0b3VjaGVzLnByZXZpb3VzWCA6IHRvdWNoZXMuY3VycmVudFkgLSB0b3VjaGVzLnByZXZpb3VzWTtcbiAgaWYgKHBhcmFtcy5vbmVXYXlNb3ZlbWVudCkge1xuICAgIGRpZmYgPSBNYXRoLmFicyhkaWZmKSAqIChydGwgPyAxIDogLTEpO1xuICAgIHRvdWNoZXNEaWZmID0gTWF0aC5hYnModG91Y2hlc0RpZmYpICogKHJ0bCA/IDEgOiAtMSk7XG4gIH1cbiAgdG91Y2hlcy5kaWZmID0gZGlmZjtcbiAgZGlmZiAqPSBwYXJhbXMudG91Y2hSYXRpbztcbiAgaWYgKHJ0bCkge1xuICAgIGRpZmYgPSAtZGlmZjtcbiAgICB0b3VjaGVzRGlmZiA9IC10b3VjaGVzRGlmZjtcbiAgfVxuICBjb25zdCBwcmV2VG91Y2hlc0RpcmVjdGlvbiA9IHN3aXBlci50b3VjaGVzRGlyZWN0aW9uO1xuICBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPSBkaWZmID4gMCA/ICdwcmV2JyA6ICduZXh0JztcbiAgc3dpcGVyLnRvdWNoZXNEaXJlY3Rpb24gPSB0b3VjaGVzRGlmZiA+IDAgPyAncHJldicgOiAnbmV4dCc7XG4gIGNvbnN0IGlzTG9vcCA9IHN3aXBlci5wYXJhbXMubG9vcCAmJiAhcGFyYW1zLmNzc01vZGU7XG4gIGNvbnN0IGFsbG93TG9vcEZpeCA9IHN3aXBlci50b3VjaGVzRGlyZWN0aW9uID09PSAnbmV4dCcgJiYgc3dpcGVyLmFsbG93U2xpZGVOZXh0IHx8IHN3aXBlci50b3VjaGVzRGlyZWN0aW9uID09PSAncHJldicgJiYgc3dpcGVyLmFsbG93U2xpZGVQcmV2O1xuICBpZiAoIWRhdGEuaXNNb3ZlZCkge1xuICAgIGlmIChpc0xvb3AgJiYgYWxsb3dMb29wRml4KSB7XG4gICAgICBzd2lwZXIubG9vcEZpeCh7XG4gICAgICAgIGRpcmVjdGlvbjogc3dpcGVyLnN3aXBlRGlyZWN0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gICAgZGF0YS5zdGFydFRyYW5zbGF0ZSA9IHN3aXBlci5nZXRUcmFuc2xhdGUoKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgICBpZiAoc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgY29uc3QgZXZ0ID0gbmV3IHdpbmRvdy5DdXN0b21FdmVudCgndHJhbnNpdGlvbmVuZCcsIHtcbiAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZSxcbiAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgYnlTd2lwZXJUb3VjaE1vdmU6IHRydWVcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgICB9XG4gICAgZGF0YS5hbGxvd01vbWVudHVtQm91bmNlID0gZmFsc2U7XG4gICAgLy8gR3JhYiBDdXJzb3JcbiAgICBpZiAocGFyYW1zLmdyYWJDdXJzb3IgJiYgKHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9PT0gdHJ1ZSB8fCBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPT09IHRydWUpKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcih0cnVlKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlckZpcnN0TW92ZScsIGUpO1xuICB9XG4gIGxldCBsb29wRml4ZWQ7XG4gIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICBpZiAoZGF0YS5pc01vdmVkICYmIGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlICYmIHByZXZUb3VjaGVzRGlyZWN0aW9uICE9PSBzd2lwZXIudG91Y2hlc0RpcmVjdGlvbiAmJiBpc0xvb3AgJiYgYWxsb3dMb29wRml4ICYmIE1hdGguYWJzKGRpZmYpID49IDEpIHtcbiAgICBPYmplY3QuYXNzaWduKHRvdWNoZXMsIHtcbiAgICAgIHN0YXJ0WDogcGFnZVgsXG4gICAgICBzdGFydFk6IHBhZ2VZLFxuICAgICAgY3VycmVudFg6IHBhZ2VYLFxuICAgICAgY3VycmVudFk6IHBhZ2VZLFxuICAgICAgc3RhcnRUcmFuc2xhdGU6IGRhdGEuY3VycmVudFRyYW5zbGF0ZVxuICAgIH0pO1xuICAgIGRhdGEubG9vcFN3YXBSZXNldCA9IHRydWU7XG4gICAgZGF0YS5zdGFydFRyYW5zbGF0ZSA9IGRhdGEuY3VycmVudFRyYW5zbGF0ZTtcbiAgICByZXR1cm47XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ3NsaWRlck1vdmUnLCBlKTtcbiAgZGF0YS5pc01vdmVkID0gdHJ1ZTtcbiAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGlmZiArIGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIGxldCBkaXNhYmxlUGFyZW50U3dpcGVyID0gdHJ1ZTtcbiAgbGV0IHJlc2lzdGFuY2VSYXRpbyA9IHBhcmFtcy5yZXNpc3RhbmNlUmF0aW87XG4gIGlmIChwYXJhbXMudG91Y2hSZWxlYXNlT25FZGdlcykge1xuICAgIHJlc2lzdGFuY2VSYXRpbyA9IDA7XG4gIH1cbiAgaWYgKGRpZmYgPiAwKSB7XG4gICAgaWYgKGlzTG9vcCAmJiBhbGxvd0xvb3BGaXggJiYgIWxvb3BGaXhlZCAmJiBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSAmJiBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzID8gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIC0gc3dpcGVyLnNsaWRlc1NpemVzR3JpZFtzd2lwZXIuYWN0aXZlSW5kZXggKyAxXSAtIChwYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gJ2F1dG8nICYmIHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gcGFyYW1zLnNsaWRlc1BlclZpZXcgPj0gMiA/IHN3aXBlci5zbGlkZXNTaXplc0dyaWRbc3dpcGVyLmFjdGl2ZUluZGV4ICsgMV0gKyBzd2lwZXIucGFyYW1zLnNwYWNlQmV0d2VlbiA6IDApIC0gc3dpcGVyLnBhcmFtcy5zcGFjZUJldHdlZW4gOiBzd2lwZXIubWluVHJhbnNsYXRlKCkpKSB7XG4gICAgICBzd2lwZXIubG9vcEZpeCh7XG4gICAgICAgIGRpcmVjdGlvbjogJ3ByZXYnLFxuICAgICAgICBzZXRUcmFuc2xhdGU6IHRydWUsXG4gICAgICAgIGFjdGl2ZVNsaWRlSW5kZXg6IDBcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoZGF0YS5jdXJyZW50VHJhbnNsYXRlID4gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICBkaXNhYmxlUGFyZW50U3dpcGVyID0gZmFsc2U7XG4gICAgICBpZiAocGFyYW1zLnJlc2lzdGFuY2UpIHtcbiAgICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIC0gMSArICgtc3dpcGVyLm1pblRyYW5zbGF0ZSgpICsgZGF0YS5zdGFydFRyYW5zbGF0ZSArIGRpZmYpICoqIHJlc2lzdGFuY2VSYXRpbztcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoZGlmZiA8IDApIHtcbiAgICBpZiAoaXNMb29wICYmIGFsbG93TG9vcEZpeCAmJiAhbG9vcEZpeGVkICYmIGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA8IChwYXJhbXMuY2VudGVyZWRTbGlkZXMgPyBzd2lwZXIubWF4VHJhbnNsYXRlKCkgKyBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW3N3aXBlci5zbGlkZXNTaXplc0dyaWQubGVuZ3RoIC0gMV0gKyBzd2lwZXIucGFyYW1zLnNwYWNlQmV0d2VlbiArIChwYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gJ2F1dG8nICYmIHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gcGFyYW1zLnNsaWRlc1BlclZpZXcgPj0gMiA/IHN3aXBlci5zbGlkZXNTaXplc0dyaWRbc3dpcGVyLnNsaWRlc1NpemVzR3JpZC5sZW5ndGggLSAxXSArIHN3aXBlci5wYXJhbXMuc3BhY2VCZXR3ZWVuIDogMCkgOiBzd2lwZXIubWF4VHJhbnNsYXRlKCkpKSB7XG4gICAgICBzd2lwZXIubG9vcEZpeCh7XG4gICAgICAgIGRpcmVjdGlvbjogJ25leHQnLFxuICAgICAgICBzZXRUcmFuc2xhdGU6IHRydWUsXG4gICAgICAgIGFjdGl2ZVNsaWRlSW5kZXg6IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgPyBzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoKSA6IE1hdGguY2VpbChwYXJzZUZsb2F0KHBhcmFtcy5zbGlkZXNQZXJWaWV3LCAxMCkpKVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgIGRpc2FibGVQYXJlbnRTd2lwZXIgPSBmYWxzZTtcbiAgICAgIGlmIChwYXJhbXMucmVzaXN0YW5jZSkge1xuICAgICAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgKyAxIC0gKHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIGRhdGEuc3RhcnRUcmFuc2xhdGUgLSBkaWZmKSAqKiByZXNpc3RhbmNlUmF0aW87XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChkaXNhYmxlUGFyZW50U3dpcGVyKSB7XG4gICAgZS5wcmV2ZW50ZWRCeU5lc3RlZFN3aXBlciA9IHRydWU7XG4gIH1cblxuICAvLyBEaXJlY3Rpb25zIGxvY2tzXG4gIGlmICghc3dpcGVyLmFsbG93U2xpZGVOZXh0ICYmIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA8IGRhdGEuc3RhcnRUcmFuc2xhdGUpIHtcbiAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICB9XG4gIGlmICghc3dpcGVyLmFsbG93U2xpZGVQcmV2ICYmIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ3ByZXYnICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA+IGRhdGEuc3RhcnRUcmFuc2xhdGUpIHtcbiAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICB9XG4gIGlmICghc3dpcGVyLmFsbG93U2xpZGVQcmV2ICYmICFzd2lwZXIuYWxsb3dTbGlkZU5leHQpIHtcbiAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICB9XG5cbiAgLy8gVGhyZXNob2xkXG4gIGlmIChwYXJhbXMudGhyZXNob2xkID4gMCkge1xuICAgIGlmIChNYXRoLmFicyhkaWZmKSA+IHBhcmFtcy50aHJlc2hvbGQgfHwgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUpIHtcbiAgICAgIGlmICghZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUpIHtcbiAgICAgICAgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgPSB0cnVlO1xuICAgICAgICB0b3VjaGVzLnN0YXJ0WCA9IHRvdWNoZXMuY3VycmVudFg7XG4gICAgICAgIHRvdWNoZXMuc3RhcnRZID0gdG91Y2hlcy5jdXJyZW50WTtcbiAgICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgICAgICAgdG91Y2hlcy5kaWZmID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gdG91Y2hlcy5jdXJyZW50WCAtIHRvdWNoZXMuc3RhcnRYIDogdG91Y2hlcy5jdXJyZW50WSAtIHRvdWNoZXMuc3RhcnRZO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIGlmICghcGFyYW1zLmZvbGxvd0ZpbmdlciB8fCBwYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuXG4gIC8vIFVwZGF0ZSBhY3RpdmUgaW5kZXggaW4gZnJlZSBtb2RlXG4gIGlmIChwYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQgJiYgc3dpcGVyLmZyZWVNb2RlIHx8IHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgfVxuICBpZiAocGFyYW1zLmZyZWVNb2RlICYmIHBhcmFtcy5mcmVlTW9kZS5lbmFibGVkICYmIHN3aXBlci5mcmVlTW9kZSkge1xuICAgIHN3aXBlci5mcmVlTW9kZS5vblRvdWNoTW92ZSgpO1xuICB9XG4gIC8vIFVwZGF0ZSBwcm9ncmVzc1xuICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoZGF0YS5jdXJyZW50VHJhbnNsYXRlKTtcbiAgLy8gVXBkYXRlIHRyYW5zbGF0ZVxuICBzd2lwZXIuc2V0VHJhbnNsYXRlKGRhdGEuY3VycmVudFRyYW5zbGF0ZSk7XG59XG5cbmZ1bmN0aW9uIG9uVG91Y2hFbmQoZXZlbnQpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgZGF0YSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG4gIGxldCBlID0gZXZlbnQ7XG4gIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7XG4gIGxldCB0YXJnZXRUb3VjaDtcbiAgY29uc3QgaXNUb3VjaEV2ZW50ID0gZS50eXBlID09PSAndG91Y2hlbmQnIHx8IGUudHlwZSA9PT0gJ3RvdWNoY2FuY2VsJztcbiAgaWYgKCFpc1RvdWNoRXZlbnQpIHtcbiAgICBpZiAoZGF0YS50b3VjaElkICE9PSBudWxsKSByZXR1cm47IC8vIHJldHVybiBmcm9tIHBvaW50ZXIgaWYgd2UgdXNlIHRvdWNoXG4gICAgaWYgKGUucG9pbnRlcklkICE9PSBkYXRhLnBvaW50ZXJJZCkgcmV0dXJuO1xuICAgIHRhcmdldFRvdWNoID0gZTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXRUb3VjaCA9IFsuLi5lLmNoYW5nZWRUb3VjaGVzXS5maW5kKHQgPT4gdC5pZGVudGlmaWVyID09PSBkYXRhLnRvdWNoSWQpO1xuICAgIGlmICghdGFyZ2V0VG91Y2ggfHwgdGFyZ2V0VG91Y2guaWRlbnRpZmllciAhPT0gZGF0YS50b3VjaElkKSByZXR1cm47XG4gIH1cbiAgaWYgKFsncG9pbnRlcmNhbmNlbCcsICdwb2ludGVyb3V0JywgJ3BvaW50ZXJsZWF2ZScsICdjb250ZXh0bWVudSddLmluY2x1ZGVzKGUudHlwZSkpIHtcbiAgICBjb25zdCBwcm9jZWVkID0gWydwb2ludGVyY2FuY2VsJywgJ2NvbnRleHRtZW51J10uaW5jbHVkZXMoZS50eXBlKSAmJiAoc3dpcGVyLmJyb3dzZXIuaXNTYWZhcmkgfHwgc3dpcGVyLmJyb3dzZXIuaXNXZWJWaWV3KTtcbiAgICBpZiAoIXByb2NlZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgZGF0YS5wb2ludGVySWQgPSBudWxsO1xuICBkYXRhLnRvdWNoSWQgPSBudWxsO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHRvdWNoZXMsXG4gICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgc2xpZGVzR3JpZCxcbiAgICBlbmFibGVkXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghZW5hYmxlZCkgcmV0dXJuO1xuICBpZiAoIXBhcmFtcy5zaW11bGF0ZVRvdWNoICYmIGUucG9pbnRlclR5cGUgPT09ICdtb3VzZScpIHJldHVybjtcbiAgaWYgKGRhdGEuYWxsb3dUb3VjaENhbGxiYWNrcykge1xuICAgIHN3aXBlci5lbWl0KCd0b3VjaEVuZCcsIGUpO1xuICB9XG4gIGRhdGEuYWxsb3dUb3VjaENhbGxiYWNrcyA9IGZhbHNlO1xuICBpZiAoIWRhdGEuaXNUb3VjaGVkKSB7XG4gICAgaWYgKGRhdGEuaXNNb3ZlZCAmJiBwYXJhbXMuZ3JhYkN1cnNvcikge1xuICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoZmFsc2UpO1xuICAgIH1cbiAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgICBkYXRhLnN0YXJ0TW92aW5nID0gZmFsc2U7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gUmV0dXJuIEdyYWIgQ3Vyc29yXG4gIGlmIChwYXJhbXMuZ3JhYkN1cnNvciAmJiBkYXRhLmlzTW92ZWQgJiYgZGF0YS5pc1RvdWNoZWQgJiYgKHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9PT0gdHJ1ZSB8fCBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPT09IHRydWUpKSB7XG4gICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoZmFsc2UpO1xuICB9XG5cbiAgLy8gVGltZSBkaWZmXG4gIGNvbnN0IHRvdWNoRW5kVGltZSA9IG5vdygpO1xuICBjb25zdCB0aW1lRGlmZiA9IHRvdWNoRW5kVGltZSAtIGRhdGEudG91Y2hTdGFydFRpbWU7XG5cbiAgLy8gVGFwLCBkb3VibGVUYXAsIENsaWNrXG4gIGlmIChzd2lwZXIuYWxsb3dDbGljaykge1xuICAgIGNvbnN0IHBhdGhUcmVlID0gZS5wYXRoIHx8IGUuY29tcG9zZWRQYXRoICYmIGUuY29tcG9zZWRQYXRoKCk7XG4gICAgc3dpcGVyLnVwZGF0ZUNsaWNrZWRTbGlkZShwYXRoVHJlZSAmJiBwYXRoVHJlZVswXSB8fCBlLnRhcmdldCwgcGF0aFRyZWUpO1xuICAgIHN3aXBlci5lbWl0KCd0YXAgY2xpY2snLCBlKTtcbiAgICBpZiAodGltZURpZmYgPCAzMDAgJiYgdG91Y2hFbmRUaW1lIC0gZGF0YS5sYXN0Q2xpY2tUaW1lIDwgMzAwKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnZG91YmxlVGFwIGRvdWJsZUNsaWNrJywgZSk7XG4gICAgfVxuICB9XG4gIGRhdGEubGFzdENsaWNrVGltZSA9IG5vdygpO1xuICBuZXh0VGljaygoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIuZGVzdHJveWVkKSBzd2lwZXIuYWxsb3dDbGljayA9IHRydWU7XG4gIH0pO1xuICBpZiAoIWRhdGEuaXNUb3VjaGVkIHx8ICFkYXRhLmlzTW92ZWQgfHwgIXN3aXBlci5zd2lwZURpcmVjdGlvbiB8fCB0b3VjaGVzLmRpZmYgPT09IDAgJiYgIWRhdGEubG9vcFN3YXBSZXNldCB8fCBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPT09IGRhdGEuc3RhcnRUcmFuc2xhdGUgJiYgIWRhdGEubG9vcFN3YXBSZXNldCkge1xuICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gICAgZGF0YS5zdGFydE1vdmluZyA9IGZhbHNlO1xuICAgIHJldHVybjtcbiAgfVxuICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgZGF0YS5zdGFydE1vdmluZyA9IGZhbHNlO1xuICBsZXQgY3VycmVudFBvcztcbiAgaWYgKHBhcmFtcy5mb2xsb3dGaW5nZXIpIHtcbiAgICBjdXJyZW50UG9zID0gcnRsID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICB9IGVsc2Uge1xuICAgIGN1cnJlbnRQb3MgPSAtZGF0YS5jdXJyZW50VHJhbnNsYXRlO1xuICB9XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocGFyYW1zLmZyZWVNb2RlICYmIHBhcmFtcy5mcmVlTW9kZS5lbmFibGVkKSB7XG4gICAgc3dpcGVyLmZyZWVNb2RlLm9uVG91Y2hFbmQoe1xuICAgICAgY3VycmVudFBvc1xuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZpbmQgY3VycmVudCBzbGlkZVxuICBjb25zdCBzd2lwZVRvTGFzdCA9IGN1cnJlbnRQb3MgPj0gLXN3aXBlci5tYXhUcmFuc2xhdGUoKSAmJiAhc3dpcGVyLnBhcmFtcy5sb29wO1xuICBsZXQgc3RvcEluZGV4ID0gMDtcbiAgbGV0IGdyb3VwU2l6ZSA9IHN3aXBlci5zbGlkZXNTaXplc0dyaWRbMF07XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gaSA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgPyAxIDogcGFyYW1zLnNsaWRlc1Blckdyb3VwKSB7XG4gICAgY29uc3QgaW5jcmVtZW50ID0gaSA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgLSAxID8gMSA6IHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICBpZiAodHlwZW9mIHNsaWRlc0dyaWRbaSArIGluY3JlbWVudF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAoc3dpcGVUb0xhc3QgfHwgY3VycmVudFBvcyA+PSBzbGlkZXNHcmlkW2ldICYmIGN1cnJlbnRQb3MgPCBzbGlkZXNHcmlkW2kgKyBpbmNyZW1lbnRdKSB7XG4gICAgICAgIHN0b3BJbmRleCA9IGk7XG4gICAgICAgIGdyb3VwU2l6ZSA9IHNsaWRlc0dyaWRbaSArIGluY3JlbWVudF0gLSBzbGlkZXNHcmlkW2ldO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc3dpcGVUb0xhc3QgfHwgY3VycmVudFBvcyA+PSBzbGlkZXNHcmlkW2ldKSB7XG4gICAgICBzdG9wSW5kZXggPSBpO1xuICAgICAgZ3JvdXBTaXplID0gc2xpZGVzR3JpZFtzbGlkZXNHcmlkLmxlbmd0aCAtIDFdIC0gc2xpZGVzR3JpZFtzbGlkZXNHcmlkLmxlbmd0aCAtIDJdO1xuICAgIH1cbiAgfVxuICBsZXQgcmV3aW5kRmlyc3RJbmRleCA9IG51bGw7XG4gIGxldCByZXdpbmRMYXN0SW5kZXggPSBudWxsO1xuICBpZiAocGFyYW1zLnJld2luZCkge1xuICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICAgIHJld2luZExhc3RJbmRleCA9IHBhcmFtcy52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgJiYgc3dpcGVyLnZpcnR1YWwgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIC0gMSA6IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMTtcbiAgICB9IGVsc2UgaWYgKHN3aXBlci5pc0VuZCkge1xuICAgICAgcmV3aW5kRmlyc3RJbmRleCA9IDA7XG4gICAgfVxuICB9XG4gIC8vIEZpbmQgY3VycmVudCBzbGlkZSBzaXplXG4gIGNvbnN0IHJhdGlvID0gKGN1cnJlbnRQb3MgLSBzbGlkZXNHcmlkW3N0b3BJbmRleF0pIC8gZ3JvdXBTaXplO1xuICBjb25zdCBpbmNyZW1lbnQgPSBzdG9wSW5kZXggPCBwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwIC0gMSA/IDEgOiBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gIGlmICh0aW1lRGlmZiA+IHBhcmFtcy5sb25nU3dpcGVzTXMpIHtcbiAgICAvLyBMb25nIHRvdWNoZXNcbiAgICBpZiAoIXBhcmFtcy5sb25nU3dpcGVzKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcpIHtcbiAgICAgIGlmIChyYXRpbyA+PSBwYXJhbXMubG9uZ1N3aXBlc1JhdGlvKSBzd2lwZXIuc2xpZGVUbyhwYXJhbXMucmV3aW5kICYmIHN3aXBlci5pc0VuZCA/IHJld2luZEZpcnN0SW5kZXggOiBzdG9wSW5kZXggKyBpbmNyZW1lbnQpO2Vsc2Ugc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ3ByZXYnKSB7XG4gICAgICBpZiAocmF0aW8gPiAxIC0gcGFyYW1zLmxvbmdTd2lwZXNSYXRpbykge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXggKyBpbmNyZW1lbnQpO1xuICAgICAgfSBlbHNlIGlmIChyZXdpbmRMYXN0SW5kZXggIT09IG51bGwgJiYgcmF0aW8gPCAwICYmIE1hdGguYWJzKHJhdGlvKSA+IHBhcmFtcy5sb25nU3dpcGVzUmF0aW8pIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8ocmV3aW5kTGFzdEluZGV4KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFNob3J0IHN3aXBlc1xuICAgIGlmICghcGFyYW1zLnNob3J0U3dpcGVzKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBpc05hdkJ1dHRvblRhcmdldCA9IHN3aXBlci5uYXZpZ2F0aW9uICYmIChlLnRhcmdldCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ubmV4dEVsIHx8IGUudGFyZ2V0ID09PSBzd2lwZXIubmF2aWdhdGlvbi5wcmV2RWwpO1xuICAgIGlmICghaXNOYXZCdXR0b25UYXJnZXQpIHtcbiAgICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICduZXh0Jykge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhyZXdpbmRGaXJzdEluZGV4ICE9PSBudWxsID8gcmV3aW5kRmlyc3RJbmRleCA6IHN0b3BJbmRleCArIGluY3JlbWVudCk7XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8ocmV3aW5kTGFzdEluZGV4ICE9PSBudWxsID8gcmV3aW5kTGFzdEluZGV4IDogc3RvcEluZGV4KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGUudGFyZ2V0ID09PSBzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCArIGluY3JlbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG9uUmVzaXplKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIGVsXG4gIH0gPSBzd2lwZXI7XG4gIGlmIChlbCAmJiBlbC5vZmZzZXRXaWR0aCA9PT0gMCkgcmV0dXJuO1xuXG4gIC8vIEJyZWFrcG9pbnRzXG4gIGlmIChwYXJhbXMuYnJlYWtwb2ludHMpIHtcbiAgICBzd2lwZXIuc2V0QnJlYWtwb2ludCgpO1xuICB9XG5cbiAgLy8gU2F2ZSBsb2Nrc1xuICBjb25zdCB7XG4gICAgYWxsb3dTbGlkZU5leHQsXG4gICAgYWxsb3dTbGlkZVByZXYsXG4gICAgc25hcEdyaWRcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG5cbiAgLy8gRGlzYWJsZSBsb2NrcyBvbiByZXNpemVcbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gdHJ1ZTtcbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gdHJ1ZTtcbiAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcbiAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICBjb25zdCBpc1ZpcnR1YWxMb29wID0gaXNWaXJ0dWFsICYmIHBhcmFtcy5sb29wO1xuICBpZiAoKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgfHwgcGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxKSAmJiBzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiAhaXNWaXJ0dWFsTG9vcCkge1xuICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMSwgMCwgZmFsc2UsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3AgJiYgIWlzVmlydHVhbCkge1xuICAgICAgc3dpcGVyLnNsaWRlVG9Mb29wKHN3aXBlci5yZWFsSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgfVxuICB9XG4gIGlmIChzd2lwZXIuYXV0b3BsYXkgJiYgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcgJiYgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCkge1xuICAgIGNsZWFyVGltZW91dChzd2lwZXIuYXV0b3BsYXkucmVzaXplVGltZW91dCk7XG4gICAgc3dpcGVyLmF1dG9wbGF5LnJlc2l6ZVRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmIChzd2lwZXIuYXV0b3BsYXkgJiYgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcgJiYgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCkge1xuICAgICAgICBzd2lwZXIuYXV0b3BsYXkucmVzdW1lKCk7XG4gICAgICB9XG4gICAgfSwgNTAwKTtcbiAgfVxuICAvLyBSZXR1cm4gbG9ja3MgYWZ0ZXIgcmVzaXplXG4gIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IGFsbG93U2xpZGVQcmV2O1xuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSBhbGxvd1NsaWRlTmV4dDtcbiAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzbmFwR3JpZCAhPT0gc3dpcGVyLnNuYXBHcmlkKSB7XG4gICAgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKCFzd2lwZXIuZW5hYmxlZCkgcmV0dXJuO1xuICBpZiAoIXN3aXBlci5hbGxvd0NsaWNrKSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMucHJldmVudENsaWNrcykgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnByZXZlbnRDbGlja3NQcm9wYWdhdGlvbiAmJiBzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gb25TY3JvbGwoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICB3cmFwcGVyRWwsXG4gICAgcnRsVHJhbnNsYXRlLFxuICAgIGVuYWJsZWRcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm47XG4gIHN3aXBlci5wcmV2aW91c1RyYW5zbGF0ZSA9IHN3aXBlci50cmFuc2xhdGU7XG4gIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICBzd2lwZXIudHJhbnNsYXRlID0gLXdyYXBwZXJFbC5zY3JvbGxMZWZ0O1xuICB9IGVsc2Uge1xuICAgIHN3aXBlci50cmFuc2xhdGUgPSAtd3JhcHBlckVsLnNjcm9sbFRvcDtcbiAgfVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgaWYgKHN3aXBlci50cmFuc2xhdGUgPT09IDApIHN3aXBlci50cmFuc2xhdGUgPSAwO1xuICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgbGV0IG5ld1Byb2dyZXNzO1xuICBjb25zdCB0cmFuc2xhdGVzRGlmZiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgaWYgKHRyYW5zbGF0ZXNEaWZmID09PSAwKSB7XG4gICAgbmV3UHJvZ3Jlc3MgPSAwO1xuICB9IGVsc2Uge1xuICAgIG5ld1Byb2dyZXNzID0gKHN3aXBlci50cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gdHJhbnNsYXRlc0RpZmY7XG4gIH1cbiAgaWYgKG5ld1Byb2dyZXNzICE9PSBzd2lwZXIucHJvZ3Jlc3MpIHtcbiAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MocnRsVHJhbnNsYXRlID8gLXN3aXBlci50cmFuc2xhdGUgOiBzd2lwZXIudHJhbnNsYXRlKTtcbiAgfVxuICBzd2lwZXIuZW1pdCgnc2V0VHJhbnNsYXRlJywgc3dpcGVyLnRyYW5zbGF0ZSwgZmFsc2UpO1xufVxuXG5mdW5jdGlvbiBvbkxvYWQoZSkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBwcm9jZXNzTGF6eVByZWxvYWRlcihzd2lwZXIsIGUudGFyZ2V0KTtcbiAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSB8fCBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgIT09ICdhdXRvJyAmJiAhc3dpcGVyLnBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHN3aXBlci51cGRhdGUoKTtcbn1cblxuZnVuY3Rpb24gb25Eb2N1bWVudFRvdWNoU3RhcnQoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmIChzd2lwZXIuZG9jdW1lbnRUb3VjaEhhbmRsZXJQcm9jZWVkZWQpIHJldHVybjtcbiAgc3dpcGVyLmRvY3VtZW50VG91Y2hIYW5kbGVyUHJvY2VlZGVkID0gdHJ1ZTtcbiAgaWYgKHN3aXBlci5wYXJhbXMudG91Y2hSZWxlYXNlT25FZGdlcykge1xuICAgIHN3aXBlci5lbC5zdHlsZS50b3VjaEFjdGlvbiA9ICdhdXRvJztcbiAgfVxufVxuXG5jb25zdCBldmVudHMgPSAoc3dpcGVyLCBtZXRob2QpID0+IHtcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIGVsLFxuICAgIHdyYXBwZXJFbCxcbiAgICBkZXZpY2VcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3QgY2FwdHVyZSA9ICEhcGFyYW1zLm5lc3RlZDtcbiAgY29uc3QgZG9tTWV0aG9kID0gbWV0aG9kID09PSAnb24nID8gJ2FkZEV2ZW50TGlzdGVuZXInIDogJ3JlbW92ZUV2ZW50TGlzdGVuZXInO1xuICBjb25zdCBzd2lwZXJNZXRob2QgPSBtZXRob2Q7XG4gIGlmICghZWwgfHwgdHlwZW9mIGVsID09PSAnc3RyaW5nJykgcmV0dXJuO1xuXG4gIC8vIFRvdWNoIEV2ZW50c1xuICBkb2N1bWVudFtkb21NZXRob2RdKCd0b3VjaHN0YXJ0Jywgc3dpcGVyLm9uRG9jdW1lbnRUb3VjaFN0YXJ0LCB7XG4gICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgY2FwdHVyZVxuICB9KTtcbiAgZWxbZG9tTWV0aG9kXSgndG91Y2hzdGFydCcsIHN3aXBlci5vblRvdWNoU3RhcnQsIHtcbiAgICBwYXNzaXZlOiBmYWxzZVxuICB9KTtcbiAgZWxbZG9tTWV0aG9kXSgncG9pbnRlcmRvd24nLCBzd2lwZXIub25Ub3VjaFN0YXJ0LCB7XG4gICAgcGFzc2l2ZTogZmFsc2VcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3RvdWNobW92ZScsIHN3aXBlci5vblRvdWNoTW92ZSwge1xuICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgIGNhcHR1cmVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3BvaW50ZXJtb3ZlJywgc3dpcGVyLm9uVG91Y2hNb3ZlLCB7XG4gICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgY2FwdHVyZVxuICB9KTtcbiAgZG9jdW1lbnRbZG9tTWV0aG9kXSgndG91Y2hlbmQnLCBzd2lwZXIub25Ub3VjaEVuZCwge1xuICAgIHBhc3NpdmU6IHRydWVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3BvaW50ZXJ1cCcsIHN3aXBlci5vblRvdWNoRW5kLCB7XG4gICAgcGFzc2l2ZTogdHJ1ZVxuICB9KTtcbiAgZG9jdW1lbnRbZG9tTWV0aG9kXSgncG9pbnRlcmNhbmNlbCcsIHN3aXBlci5vblRvdWNoRW5kLCB7XG4gICAgcGFzc2l2ZTogdHJ1ZVxuICB9KTtcbiAgZG9jdW1lbnRbZG9tTWV0aG9kXSgndG91Y2hjYW5jZWwnLCBzd2lwZXIub25Ub3VjaEVuZCwge1xuICAgIHBhc3NpdmU6IHRydWVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3BvaW50ZXJvdXQnLCBzd2lwZXIub25Ub3VjaEVuZCwge1xuICAgIHBhc3NpdmU6IHRydWVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3BvaW50ZXJsZWF2ZScsIHN3aXBlci5vblRvdWNoRW5kLCB7XG4gICAgcGFzc2l2ZTogdHJ1ZVxuICB9KTtcbiAgZG9jdW1lbnRbZG9tTWV0aG9kXSgnY29udGV4dG1lbnUnLCBzd2lwZXIub25Ub3VjaEVuZCwge1xuICAgIHBhc3NpdmU6IHRydWVcbiAgfSk7XG5cbiAgLy8gUHJldmVudCBMaW5rcyBDbGlja3NcbiAgaWYgKHBhcmFtcy5wcmV2ZW50Q2xpY2tzIHx8IHBhcmFtcy5wcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24pIHtcbiAgICBlbFtkb21NZXRob2RdKCdjbGljaycsIHN3aXBlci5vbkNsaWNrLCB0cnVlKTtcbiAgfVxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICB3cmFwcGVyRWxbZG9tTWV0aG9kXSgnc2Nyb2xsJywgc3dpcGVyLm9uU2Nyb2xsKTtcbiAgfVxuXG4gIC8vIFJlc2l6ZSBoYW5kbGVyXG4gIGlmIChwYXJhbXMudXBkYXRlT25XaW5kb3dSZXNpemUpIHtcbiAgICBzd2lwZXJbc3dpcGVyTWV0aG9kXShkZXZpY2UuaW9zIHx8IGRldmljZS5hbmRyb2lkID8gJ3Jlc2l6ZSBvcmllbnRhdGlvbmNoYW5nZSBvYnNlcnZlclVwZGF0ZScgOiAncmVzaXplIG9ic2VydmVyVXBkYXRlJywgb25SZXNpemUsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN3aXBlcltzd2lwZXJNZXRob2RdKCdvYnNlcnZlclVwZGF0ZScsIG9uUmVzaXplLCB0cnVlKTtcbiAgfVxuXG4gIC8vIEltYWdlcyBsb2FkZXJcbiAgZWxbZG9tTWV0aG9kXSgnbG9hZCcsIHN3aXBlci5vbkxvYWQsIHtcbiAgICBjYXB0dXJlOiB0cnVlXG4gIH0pO1xufTtcbmZ1bmN0aW9uIGF0dGFjaEV2ZW50cygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBzd2lwZXIub25Ub3VjaFN0YXJ0ID0gb25Ub3VjaFN0YXJ0LmJpbmQoc3dpcGVyKTtcbiAgc3dpcGVyLm9uVG91Y2hNb3ZlID0gb25Ub3VjaE1vdmUuYmluZChzd2lwZXIpO1xuICBzd2lwZXIub25Ub3VjaEVuZCA9IG9uVG91Y2hFbmQuYmluZChzd2lwZXIpO1xuICBzd2lwZXIub25Eb2N1bWVudFRvdWNoU3RhcnQgPSBvbkRvY3VtZW50VG91Y2hTdGFydC5iaW5kKHN3aXBlcik7XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHN3aXBlci5vblNjcm9sbCA9IG9uU2Nyb2xsLmJpbmQoc3dpcGVyKTtcbiAgfVxuICBzd2lwZXIub25DbGljayA9IG9uQ2xpY2suYmluZChzd2lwZXIpO1xuICBzd2lwZXIub25Mb2FkID0gb25Mb2FkLmJpbmQoc3dpcGVyKTtcbiAgZXZlbnRzKHN3aXBlciwgJ29uJyk7XG59XG5mdW5jdGlvbiBkZXRhY2hFdmVudHMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGV2ZW50cyhzd2lwZXIsICdvZmYnKTtcbn1cbnZhciBldmVudHMkMSA9IHtcbiAgYXR0YWNoRXZlbnRzLFxuICBkZXRhY2hFdmVudHNcbn07XG5cbmNvbnN0IGlzR3JpZEVuYWJsZWQgPSAoc3dpcGVyLCBwYXJhbXMpID0+IHtcbiAgcmV0dXJuIHN3aXBlci5ncmlkICYmIHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxO1xufTtcbmZ1bmN0aW9uIHNldEJyZWFrcG9pbnQoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICByZWFsSW5kZXgsXG4gICAgaW5pdGlhbGl6ZWQsXG4gICAgcGFyYW1zLFxuICAgIGVsXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGJyZWFrcG9pbnRzID0gcGFyYW1zLmJyZWFrcG9pbnRzO1xuICBpZiAoIWJyZWFrcG9pbnRzIHx8IGJyZWFrcG9pbnRzICYmIE9iamVjdC5rZXlzKGJyZWFrcG9pbnRzKS5sZW5ndGggPT09IDApIHJldHVybjtcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuXG4gIC8vIEdldCBicmVha3BvaW50IGZvciB3aW5kb3cvY29udGFpbmVyIHdpZHRoIGFuZCB1cGRhdGUgcGFyYW1ldGVyc1xuICBjb25zdCBicmVha3BvaW50c0Jhc2UgPSBwYXJhbXMuYnJlYWtwb2ludHNCYXNlID09PSAnd2luZG93JyB8fCAhcGFyYW1zLmJyZWFrcG9pbnRzQmFzZSA/IHBhcmFtcy5icmVha3BvaW50c0Jhc2UgOiAnY29udGFpbmVyJztcbiAgY29uc3QgYnJlYWtwb2ludENvbnRhaW5lciA9IFsnd2luZG93JywgJ2NvbnRhaW5lciddLmluY2x1ZGVzKHBhcmFtcy5icmVha3BvaW50c0Jhc2UpIHx8ICFwYXJhbXMuYnJlYWtwb2ludHNCYXNlID8gc3dpcGVyLmVsIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihwYXJhbXMuYnJlYWtwb2ludHNCYXNlKTtcbiAgY29uc3QgYnJlYWtwb2ludCA9IHN3aXBlci5nZXRCcmVha3BvaW50KGJyZWFrcG9pbnRzLCBicmVha3BvaW50c0Jhc2UsIGJyZWFrcG9pbnRDb250YWluZXIpO1xuICBpZiAoIWJyZWFrcG9pbnQgfHwgc3dpcGVyLmN1cnJlbnRCcmVha3BvaW50ID09PSBicmVha3BvaW50KSByZXR1cm47XG4gIGNvbnN0IGJyZWFrcG9pbnRPbmx5UGFyYW1zID0gYnJlYWtwb2ludCBpbiBicmVha3BvaW50cyA/IGJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdIDogdW5kZWZpbmVkO1xuICBjb25zdCBicmVha3BvaW50UGFyYW1zID0gYnJlYWtwb2ludE9ubHlQYXJhbXMgfHwgc3dpcGVyLm9yaWdpbmFsUGFyYW1zO1xuICBjb25zdCB3YXNNdWx0aVJvdyA9IGlzR3JpZEVuYWJsZWQoc3dpcGVyLCBwYXJhbXMpO1xuICBjb25zdCBpc011bHRpUm93ID0gaXNHcmlkRW5hYmxlZChzd2lwZXIsIGJyZWFrcG9pbnRQYXJhbXMpO1xuICBjb25zdCB3YXNHcmFiQ3Vyc29yID0gc3dpcGVyLnBhcmFtcy5ncmFiQ3Vyc29yO1xuICBjb25zdCBpc0dyYWJDdXJzb3IgPSBicmVha3BvaW50UGFyYW1zLmdyYWJDdXJzb3I7XG4gIGNvbnN0IHdhc0VuYWJsZWQgPSBwYXJhbXMuZW5hYmxlZDtcbiAgaWYgKHdhc011bHRpUm93ICYmICFpc011bHRpUm93KSB7XG4gICAgZWwuY2xhc3NMaXN0LnJlbW92ZShgJHtwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ncmlkYCwgYCR7cGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9Z3JpZC1jb2x1bW5gKTtcbiAgICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbiAgfSBlbHNlIGlmICghd2FzTXVsdGlSb3cgJiYgaXNNdWx0aVJvdykge1xuICAgIGVsLmNsYXNzTGlzdC5hZGQoYCR7cGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9Z3JpZGApO1xuICAgIGlmIChicmVha3BvaW50UGFyYW1zLmdyaWQuZmlsbCAmJiBicmVha3BvaW50UGFyYW1zLmdyaWQuZmlsbCA9PT0gJ2NvbHVtbicgfHwgIWJyZWFrcG9pbnRQYXJhbXMuZ3JpZC5maWxsICYmIHBhcmFtcy5ncmlkLmZpbGwgPT09ICdjb2x1bW4nKSB7XG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWQtY29sdW1uYCk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xuICB9XG4gIGlmICh3YXNHcmFiQ3Vyc29yICYmICFpc0dyYWJDdXJzb3IpIHtcbiAgICBzd2lwZXIudW5zZXRHcmFiQ3Vyc29yKCk7XG4gIH0gZWxzZSBpZiAoIXdhc0dyYWJDdXJzb3IgJiYgaXNHcmFiQ3Vyc29yKSB7XG4gICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoKTtcbiAgfVxuXG4gIC8vIFRvZ2dsZSBuYXZpZ2F0aW9uLCBwYWdpbmF0aW9uLCBzY3JvbGxiYXJcbiAgWyduYXZpZ2F0aW9uJywgJ3BhZ2luYXRpb24nLCAnc2Nyb2xsYmFyJ10uZm9yRWFjaChwcm9wID0+IHtcbiAgICBpZiAodHlwZW9mIGJyZWFrcG9pbnRQYXJhbXNbcHJvcF0gPT09ICd1bmRlZmluZWQnKSByZXR1cm47XG4gICAgY29uc3Qgd2FzTW9kdWxlRW5hYmxlZCA9IHBhcmFtc1twcm9wXSAmJiBwYXJhbXNbcHJvcF0uZW5hYmxlZDtcbiAgICBjb25zdCBpc01vZHVsZUVuYWJsZWQgPSBicmVha3BvaW50UGFyYW1zW3Byb3BdICYmIGJyZWFrcG9pbnRQYXJhbXNbcHJvcF0uZW5hYmxlZDtcbiAgICBpZiAod2FzTW9kdWxlRW5hYmxlZCAmJiAhaXNNb2R1bGVFbmFibGVkKSB7XG4gICAgICBzd2lwZXJbcHJvcF0uZGlzYWJsZSgpO1xuICAgIH1cbiAgICBpZiAoIXdhc01vZHVsZUVuYWJsZWQgJiYgaXNNb2R1bGVFbmFibGVkKSB7XG4gICAgICBzd2lwZXJbcHJvcF0uZW5hYmxlKCk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgZGlyZWN0aW9uQ2hhbmdlZCA9IGJyZWFrcG9pbnRQYXJhbXMuZGlyZWN0aW9uICYmIGJyZWFrcG9pbnRQYXJhbXMuZGlyZWN0aW9uICE9PSBwYXJhbXMuZGlyZWN0aW9uO1xuICBjb25zdCBuZWVkc1JlTG9vcCA9IHBhcmFtcy5sb29wICYmIChicmVha3BvaW50UGFyYW1zLnNsaWRlc1BlclZpZXcgIT09IHBhcmFtcy5zbGlkZXNQZXJWaWV3IHx8IGRpcmVjdGlvbkNoYW5nZWQpO1xuICBjb25zdCB3YXNMb29wID0gcGFyYW1zLmxvb3A7XG4gIGlmIChkaXJlY3Rpb25DaGFuZ2VkICYmIGluaXRpYWxpemVkKSB7XG4gICAgc3dpcGVyLmNoYW5nZURpcmVjdGlvbigpO1xuICB9XG4gIGV4dGVuZChzd2lwZXIucGFyYW1zLCBicmVha3BvaW50UGFyYW1zKTtcbiAgY29uc3QgaXNFbmFibGVkID0gc3dpcGVyLnBhcmFtcy5lbmFibGVkO1xuICBjb25zdCBoYXNMb29wID0gc3dpcGVyLnBhcmFtcy5sb29wO1xuICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgIGFsbG93VG91Y2hNb3ZlOiBzd2lwZXIucGFyYW1zLmFsbG93VG91Y2hNb3ZlLFxuICAgIGFsbG93U2xpZGVOZXh0OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVOZXh0LFxuICAgIGFsbG93U2xpZGVQcmV2OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVQcmV2XG4gIH0pO1xuICBpZiAod2FzRW5hYmxlZCAmJiAhaXNFbmFibGVkKSB7XG4gICAgc3dpcGVyLmRpc2FibGUoKTtcbiAgfSBlbHNlIGlmICghd2FzRW5hYmxlZCAmJiBpc0VuYWJsZWQpIHtcbiAgICBzd2lwZXIuZW5hYmxlKCk7XG4gIH1cbiAgc3dpcGVyLmN1cnJlbnRCcmVha3BvaW50ID0gYnJlYWtwb2ludDtcbiAgc3dpcGVyLmVtaXQoJ19iZWZvcmVCcmVha3BvaW50JywgYnJlYWtwb2ludFBhcmFtcyk7XG4gIGlmIChpbml0aWFsaXplZCkge1xuICAgIGlmIChuZWVkc1JlTG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gICAgICBzd2lwZXIubG9vcENyZWF0ZShyZWFsSW5kZXgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgIH0gZWxzZSBpZiAoIXdhc0xvb3AgJiYgaGFzTG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BDcmVhdGUocmVhbEluZGV4KTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICB9IGVsc2UgaWYgKHdhc0xvb3AgJiYgIWhhc0xvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgIH1cbiAgfVxuICBzd2lwZXIuZW1pdCgnYnJlYWtwb2ludCcsIGJyZWFrcG9pbnRQYXJhbXMpO1xufVxuXG5mdW5jdGlvbiBnZXRCcmVha3BvaW50KGJyZWFrcG9pbnRzLCBiYXNlLCBjb250YWluZXJFbCkge1xuICBpZiAoYmFzZSA9PT0gdm9pZCAwKSB7XG4gICAgYmFzZSA9ICd3aW5kb3cnO1xuICB9XG4gIGlmICghYnJlYWtwb2ludHMgfHwgYmFzZSA9PT0gJ2NvbnRhaW5lcicgJiYgIWNvbnRhaW5lckVsKSByZXR1cm4gdW5kZWZpbmVkO1xuICBsZXQgYnJlYWtwb2ludCA9IGZhbHNlO1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3QgY3VycmVudEhlaWdodCA9IGJhc2UgPT09ICd3aW5kb3cnID8gd2luZG93LmlubmVySGVpZ2h0IDogY29udGFpbmVyRWwuY2xpZW50SGVpZ2h0O1xuICBjb25zdCBwb2ludHMgPSBPYmplY3Qua2V5cyhicmVha3BvaW50cykubWFwKHBvaW50ID0+IHtcbiAgICBpZiAodHlwZW9mIHBvaW50ID09PSAnc3RyaW5nJyAmJiBwb2ludC5pbmRleE9mKCdAJykgPT09IDApIHtcbiAgICAgIGNvbnN0IG1pblJhdGlvID0gcGFyc2VGbG9hdChwb2ludC5zdWJzdHIoMSkpO1xuICAgICAgY29uc3QgdmFsdWUgPSBjdXJyZW50SGVpZ2h0ICogbWluUmF0aW87XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZSxcbiAgICAgICAgcG9pbnRcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogcG9pbnQsXG4gICAgICBwb2ludFxuICAgIH07XG4gIH0pO1xuICBwb2ludHMuc29ydCgoYSwgYikgPT4gcGFyc2VJbnQoYS52YWx1ZSwgMTApIC0gcGFyc2VJbnQoYi52YWx1ZSwgMTApKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCB7XG4gICAgICBwb2ludCxcbiAgICAgIHZhbHVlXG4gICAgfSA9IHBvaW50c1tpXTtcbiAgICBpZiAoYmFzZSA9PT0gJ3dpbmRvdycpIHtcbiAgICAgIGlmICh3aW5kb3cubWF0Y2hNZWRpYShgKG1pbi13aWR0aDogJHt2YWx1ZX1weClgKS5tYXRjaGVzKSB7XG4gICAgICAgIGJyZWFrcG9pbnQgPSBwb2ludDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHZhbHVlIDw9IGNvbnRhaW5lckVsLmNsaWVudFdpZHRoKSB7XG4gICAgICBicmVha3BvaW50ID0gcG9pbnQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBicmVha3BvaW50IHx8ICdtYXgnO1xufVxuXG52YXIgYnJlYWtwb2ludHMgPSB7XG4gIHNldEJyZWFrcG9pbnQsXG4gIGdldEJyZWFrcG9pbnRcbn07XG5cbmZ1bmN0aW9uIHByZXBhcmVDbGFzc2VzKGVudHJpZXMsIHByZWZpeCkge1xuICBjb25zdCByZXN1bHRDbGFzc2VzID0gW107XG4gIGVudHJpZXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICBpZiAodHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnKSB7XG4gICAgICBPYmplY3Qua2V5cyhpdGVtKS5mb3JFYWNoKGNsYXNzTmFtZXMgPT4ge1xuICAgICAgICBpZiAoaXRlbVtjbGFzc05hbWVzXSkge1xuICAgICAgICAgIHJlc3VsdENsYXNzZXMucHVzaChwcmVmaXggKyBjbGFzc05hbWVzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaXRlbSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJlc3VsdENsYXNzZXMucHVzaChwcmVmaXggKyBpdGVtKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0Q2xhc3Nlcztcbn1cbmZ1bmN0aW9uIGFkZENsYXNzZXMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBjbGFzc05hbWVzLFxuICAgIHBhcmFtcyxcbiAgICBydGwsXG4gICAgZWwsXG4gICAgZGV2aWNlXG4gIH0gPSBzd2lwZXI7XG4gIC8vIHByZXR0aWVyLWlnbm9yZVxuICBjb25zdCBzdWZmaXhlcyA9IHByZXBhcmVDbGFzc2VzKFsnaW5pdGlhbGl6ZWQnLCBwYXJhbXMuZGlyZWN0aW9uLCB7XG4gICAgJ2ZyZWUtbW9kZSc6IHN3aXBlci5wYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWRcbiAgfSwge1xuICAgICdhdXRvaGVpZ2h0JzogcGFyYW1zLmF1dG9IZWlnaHRcbiAgfSwge1xuICAgICdydGwnOiBydGxcbiAgfSwge1xuICAgICdncmlkJzogcGFyYW1zLmdyaWQgJiYgcGFyYW1zLmdyaWQucm93cyA+IDFcbiAgfSwge1xuICAgICdncmlkLWNvbHVtbic6IHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxICYmIHBhcmFtcy5ncmlkLmZpbGwgPT09ICdjb2x1bW4nXG4gIH0sIHtcbiAgICAnYW5kcm9pZCc6IGRldmljZS5hbmRyb2lkXG4gIH0sIHtcbiAgICAnaW9zJzogZGV2aWNlLmlvc1xuICB9LCB7XG4gICAgJ2Nzcy1tb2RlJzogcGFyYW1zLmNzc01vZGVcbiAgfSwge1xuICAgICdjZW50ZXJlZCc6IHBhcmFtcy5jc3NNb2RlICYmIHBhcmFtcy5jZW50ZXJlZFNsaWRlc1xuICB9LCB7XG4gICAgJ3dhdGNoLXByb2dyZXNzJzogcGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3NcbiAgfV0sIHBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzKTtcbiAgY2xhc3NOYW1lcy5wdXNoKC4uLnN1ZmZpeGVzKTtcbiAgZWwuY2xhc3NMaXN0LmFkZCguLi5jbGFzc05hbWVzKTtcbiAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzZXMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBlbCxcbiAgICBjbGFzc05hbWVzXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghZWwgfHwgdHlwZW9mIGVsID09PSAnc3RyaW5nJykgcmV0dXJuO1xuICBlbC5jbGFzc0xpc3QucmVtb3ZlKC4uLmNsYXNzTmFtZXMpO1xuICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbn1cblxudmFyIGNsYXNzZXMgPSB7XG4gIGFkZENsYXNzZXMsXG4gIHJlbW92ZUNsYXNzZXNcbn07XG5cbmZ1bmN0aW9uIGNoZWNrT3ZlcmZsb3coKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBpc0xvY2tlZDogd2FzTG9ja2VkLFxuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBjb25zdCB7XG4gICAgc2xpZGVzT2Zmc2V0QmVmb3JlXG4gIH0gPSBwYXJhbXM7XG4gIGlmIChzbGlkZXNPZmZzZXRCZWZvcmUpIHtcbiAgICBjb25zdCBsYXN0U2xpZGVJbmRleCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMTtcbiAgICBjb25zdCBsYXN0U2xpZGVSaWdodEVkZ2UgPSBzd2lwZXIuc2xpZGVzR3JpZFtsYXN0U2xpZGVJbmRleF0gKyBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW2xhc3RTbGlkZUluZGV4XSArIHNsaWRlc09mZnNldEJlZm9yZSAqIDI7XG4gICAgc3dpcGVyLmlzTG9ja2VkID0gc3dpcGVyLnNpemUgPiBsYXN0U2xpZGVSaWdodEVkZ2U7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLmlzTG9ja2VkID0gc3dpcGVyLnNuYXBHcmlkLmxlbmd0aCA9PT0gMTtcbiAgfVxuICBpZiAocGFyYW1zLmFsbG93U2xpZGVOZXh0ID09PSB0cnVlKSB7XG4gICAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gIXN3aXBlci5pc0xvY2tlZDtcbiAgfVxuICBpZiAocGFyYW1zLmFsbG93U2xpZGVQcmV2ID09PSB0cnVlKSB7XG4gICAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gIXN3aXBlci5pc0xvY2tlZDtcbiAgfVxuICBpZiAod2FzTG9ja2VkICYmIHdhc0xvY2tlZCAhPT0gc3dpcGVyLmlzTG9ja2VkKSB7XG4gICAgc3dpcGVyLmlzRW5kID0gZmFsc2U7XG4gIH1cbiAgaWYgKHdhc0xvY2tlZCAhPT0gc3dpcGVyLmlzTG9ja2VkKSB7XG4gICAgc3dpcGVyLmVtaXQoc3dpcGVyLmlzTG9ja2VkID8gJ2xvY2snIDogJ3VubG9jaycpO1xuICB9XG59XG52YXIgY2hlY2tPdmVyZmxvdyQxID0ge1xuICBjaGVja092ZXJmbG93XG59O1xuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGluaXQ6IHRydWUsXG4gIGRpcmVjdGlvbjogJ2hvcml6b250YWwnLFxuICBvbmVXYXlNb3ZlbWVudDogZmFsc2UsXG4gIHN3aXBlckVsZW1lbnROb2RlTmFtZTogJ1NXSVBFUi1DT05UQUlORVInLFxuICB0b3VjaEV2ZW50c1RhcmdldDogJ3dyYXBwZXInLFxuICBpbml0aWFsU2xpZGU6IDAsXG4gIHNwZWVkOiAzMDAsXG4gIGNzc01vZGU6IGZhbHNlLFxuICB1cGRhdGVPbldpbmRvd1Jlc2l6ZTogdHJ1ZSxcbiAgcmVzaXplT2JzZXJ2ZXI6IHRydWUsXG4gIG5lc3RlZDogZmFsc2UsXG4gIGNyZWF0ZUVsZW1lbnRzOiBmYWxzZSxcbiAgZXZlbnRzUHJlZml4OiAnc3dpcGVyJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgZm9jdXNhYmxlRWxlbWVudHM6ICdpbnB1dCwgc2VsZWN0LCBvcHRpb24sIHRleHRhcmVhLCBidXR0b24sIHZpZGVvLCBsYWJlbCcsXG4gIC8vIE92ZXJyaWRlc1xuICB3aWR0aDogbnVsbCxcbiAgaGVpZ2h0OiBudWxsLFxuICAvL1xuICBwcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb246IGZhbHNlLFxuICAvLyBzc3JcbiAgdXNlckFnZW50OiBudWxsLFxuICB1cmw6IG51bGwsXG4gIC8vIFRvIHN1cHBvcnQgaU9TJ3Mgc3dpcGUtdG8tZ28tYmFjayBnZXN0dXJlICh3aGVuIGJlaW5nIHVzZWQgaW4tYXBwKS5cbiAgZWRnZVN3aXBlRGV0ZWN0aW9uOiBmYWxzZSxcbiAgZWRnZVN3aXBlVGhyZXNob2xkOiAyMCxcbiAgLy8gQXV0b2hlaWdodFxuICBhdXRvSGVpZ2h0OiBmYWxzZSxcbiAgLy8gU2V0IHdyYXBwZXIgd2lkdGhcbiAgc2V0V3JhcHBlclNpemU6IGZhbHNlLFxuICAvLyBWaXJ0dWFsIFRyYW5zbGF0ZVxuICB2aXJ0dWFsVHJhbnNsYXRlOiBmYWxzZSxcbiAgLy8gRWZmZWN0c1xuICBlZmZlY3Q6ICdzbGlkZScsXG4gIC8vICdzbGlkZScgb3IgJ2ZhZGUnIG9yICdjdWJlJyBvciAnY292ZXJmbG93JyBvciAnZmxpcCdcblxuICAvLyBCcmVha3BvaW50c1xuICBicmVha3BvaW50czogdW5kZWZpbmVkLFxuICBicmVha3BvaW50c0Jhc2U6ICd3aW5kb3cnLFxuICAvLyBTbGlkZXMgZ3JpZFxuICBzcGFjZUJldHdlZW46IDAsXG4gIHNsaWRlc1BlclZpZXc6IDEsXG4gIHNsaWRlc1Blckdyb3VwOiAxLFxuICBzbGlkZXNQZXJHcm91cFNraXA6IDAsXG4gIHNsaWRlc1Blckdyb3VwQXV0bzogZmFsc2UsXG4gIGNlbnRlcmVkU2xpZGVzOiBmYWxzZSxcbiAgY2VudGVyZWRTbGlkZXNCb3VuZHM6IGZhbHNlLFxuICBzbGlkZXNPZmZzZXRCZWZvcmU6IDAsXG4gIC8vIGluIHB4XG4gIHNsaWRlc09mZnNldEFmdGVyOiAwLFxuICAvLyBpbiBweFxuICBub3JtYWxpemVTbGlkZUluZGV4OiB0cnVlLFxuICBjZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXM6IGZhbHNlLFxuICAvLyBEaXNhYmxlIHN3aXBlciBhbmQgaGlkZSBuYXZpZ2F0aW9uIHdoZW4gY29udGFpbmVyIG5vdCBvdmVyZmxvd1xuICB3YXRjaE92ZXJmbG93OiB0cnVlLFxuICAvLyBSb3VuZCBsZW5ndGhcbiAgcm91bmRMZW5ndGhzOiBmYWxzZSxcbiAgLy8gVG91Y2hlc1xuICB0b3VjaFJhdGlvOiAxLFxuICB0b3VjaEFuZ2xlOiA0NSxcbiAgc2ltdWxhdGVUb3VjaDogdHJ1ZSxcbiAgc2hvcnRTd2lwZXM6IHRydWUsXG4gIGxvbmdTd2lwZXM6IHRydWUsXG4gIGxvbmdTd2lwZXNSYXRpbzogMC41LFxuICBsb25nU3dpcGVzTXM6IDMwMCxcbiAgZm9sbG93RmluZ2VyOiB0cnVlLFxuICBhbGxvd1RvdWNoTW92ZTogdHJ1ZSxcbiAgdGhyZXNob2xkOiA1LFxuICB0b3VjaE1vdmVTdG9wUHJvcGFnYXRpb246IGZhbHNlLFxuICB0b3VjaFN0YXJ0UHJldmVudERlZmF1bHQ6IHRydWUsXG4gIHRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0OiBmYWxzZSxcbiAgdG91Y2hSZWxlYXNlT25FZGdlczogZmFsc2UsXG4gIC8vIFVuaXF1ZSBOYXZpZ2F0aW9uIEVsZW1lbnRzXG4gIHVuaXF1ZU5hdkVsZW1lbnRzOiB0cnVlLFxuICAvLyBSZXNpc3RhbmNlXG4gIHJlc2lzdGFuY2U6IHRydWUsXG4gIHJlc2lzdGFuY2VSYXRpbzogMC44NSxcbiAgLy8gUHJvZ3Jlc3NcbiAgd2F0Y2hTbGlkZXNQcm9ncmVzczogZmFsc2UsXG4gIC8vIEN1cnNvclxuICBncmFiQ3Vyc29yOiBmYWxzZSxcbiAgLy8gQ2xpY2tzXG4gIHByZXZlbnRDbGlja3M6IHRydWUsXG4gIHByZXZlbnRDbGlja3NQcm9wYWdhdGlvbjogdHJ1ZSxcbiAgc2xpZGVUb0NsaWNrZWRTbGlkZTogZmFsc2UsXG4gIC8vIGxvb3BcbiAgbG9vcDogZmFsc2UsXG4gIGxvb3BBZGRCbGFua1NsaWRlczogdHJ1ZSxcbiAgbG9vcEFkZGl0aW9uYWxTbGlkZXM6IDAsXG4gIGxvb3BQcmV2ZW50c1NsaWRpbmc6IHRydWUsXG4gIC8vIHJld2luZFxuICByZXdpbmQ6IGZhbHNlLFxuICAvLyBTd2lwaW5nL25vIHN3aXBpbmdcbiAgYWxsb3dTbGlkZVByZXY6IHRydWUsXG4gIGFsbG93U2xpZGVOZXh0OiB0cnVlLFxuICBzd2lwZUhhbmRsZXI6IG51bGwsXG4gIC8vICcuc3dpcGUtaGFuZGxlcicsXG4gIG5vU3dpcGluZzogdHJ1ZSxcbiAgbm9Td2lwaW5nQ2xhc3M6ICdzd2lwZXItbm8tc3dpcGluZycsXG4gIG5vU3dpcGluZ1NlbGVjdG9yOiBudWxsLFxuICAvLyBQYXNzaXZlIExpc3RlbmVyc1xuICBwYXNzaXZlTGlzdGVuZXJzOiB0cnVlLFxuICBtYXhCYWNrZmFjZUhpZGRlblNsaWRlczogMTAsXG4gIC8vIE5TXG4gIGNvbnRhaW5lck1vZGlmaWVyQ2xhc3M6ICdzd2lwZXItJyxcbiAgLy8gTkVXXG4gIHNsaWRlQ2xhc3M6ICdzd2lwZXItc2xpZGUnLFxuICBzbGlkZUJsYW5rQ2xhc3M6ICdzd2lwZXItc2xpZGUtYmxhbmsnLFxuICBzbGlkZUFjdGl2ZUNsYXNzOiAnc3dpcGVyLXNsaWRlLWFjdGl2ZScsXG4gIHNsaWRlVmlzaWJsZUNsYXNzOiAnc3dpcGVyLXNsaWRlLXZpc2libGUnLFxuICBzbGlkZUZ1bGx5VmlzaWJsZUNsYXNzOiAnc3dpcGVyLXNsaWRlLWZ1bGx5LXZpc2libGUnLFxuICBzbGlkZU5leHRDbGFzczogJ3N3aXBlci1zbGlkZS1uZXh0JyxcbiAgc2xpZGVQcmV2Q2xhc3M6ICdzd2lwZXItc2xpZGUtcHJldicsXG4gIHdyYXBwZXJDbGFzczogJ3N3aXBlci13cmFwcGVyJyxcbiAgbGF6eVByZWxvYWRlckNsYXNzOiAnc3dpcGVyLWxhenktcHJlbG9hZGVyJyxcbiAgbGF6eVByZWxvYWRQcmV2TmV4dDogMCxcbiAgLy8gQ2FsbGJhY2tzXG4gIHJ1bkNhbGxiYWNrc09uSW5pdDogdHJ1ZSxcbiAgLy8gSW50ZXJuYWxzXG4gIF9lbWl0Q2xhc3NlczogZmFsc2Vcbn07XG5cbmZ1bmN0aW9uIG1vZHVsZUV4dGVuZFBhcmFtcyhwYXJhbXMsIGFsbE1vZHVsZXNQYXJhbXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGV4dGVuZFBhcmFtcyhvYmopIHtcbiAgICBpZiAob2JqID09PSB2b2lkIDApIHtcbiAgICAgIG9iaiA9IHt9O1xuICAgIH1cbiAgICBjb25zdCBtb2R1bGVQYXJhbU5hbWUgPSBPYmplY3Qua2V5cyhvYmopWzBdO1xuICAgIGNvbnN0IG1vZHVsZVBhcmFtcyA9IG9ialttb2R1bGVQYXJhbU5hbWVdO1xuICAgIGlmICh0eXBlb2YgbW9kdWxlUGFyYW1zICE9PSAnb2JqZWN0JyB8fCBtb2R1bGVQYXJhbXMgPT09IG51bGwpIHtcbiAgICAgIGV4dGVuZChhbGxNb2R1bGVzUGFyYW1zLCBvYmopO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAocGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPT09IHRydWUpIHtcbiAgICAgIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID0ge1xuICAgICAgICBlbmFibGVkOiB0cnVlXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAobW9kdWxlUGFyYW1OYW1lID09PSAnbmF2aWdhdGlvbicgJiYgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gJiYgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uZW5hYmxlZCAmJiAhcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0ucHJldkVsICYmICFwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5uZXh0RWwpIHtcbiAgICAgIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdLmF1dG8gPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoWydwYWdpbmF0aW9uJywgJ3Njcm9sbGJhciddLmluZGV4T2YobW9kdWxlUGFyYW1OYW1lKSA+PSAwICYmIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdICYmIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdLmVuYWJsZWQgJiYgIXBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdLmVsKSB7XG4gICAgICBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5hdXRvID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCEobW9kdWxlUGFyYW1OYW1lIGluIHBhcmFtcyAmJiAnZW5hYmxlZCcgaW4gbW9kdWxlUGFyYW1zKSkge1xuICAgICAgZXh0ZW5kKGFsbE1vZHVsZXNQYXJhbXMsIG9iaik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPT09ICdvYmplY3QnICYmICEoJ2VuYWJsZWQnIGluIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdKSkge1xuICAgICAgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uZW5hYmxlZCA9IHRydWU7XG4gICAgfVxuICAgIGlmICghcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0pIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID0ge1xuICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICB9O1xuICAgIGV4dGVuZChhbGxNb2R1bGVzUGFyYW1zLCBvYmopO1xuICB9O1xufVxuXG4vKiBlc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246IFwib2ZmXCIgKi9cbmNvbnN0IHByb3RvdHlwZXMgPSB7XG4gIGV2ZW50c0VtaXR0ZXIsXG4gIHVwZGF0ZSxcbiAgdHJhbnNsYXRlLFxuICB0cmFuc2l0aW9uLFxuICBzbGlkZSxcbiAgbG9vcCxcbiAgZ3JhYkN1cnNvcixcbiAgZXZlbnRzOiBldmVudHMkMSxcbiAgYnJlYWtwb2ludHMsXG4gIGNoZWNrT3ZlcmZsb3c6IGNoZWNrT3ZlcmZsb3ckMSxcbiAgY2xhc3Nlc1xufTtcbmNvbnN0IGV4dGVuZGVkRGVmYXVsdHMgPSB7fTtcbmNsYXNzIFN3aXBlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGxldCBlbDtcbiAgICBsZXQgcGFyYW1zO1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxICYmIGFyZ3NbMF0uY29uc3RydWN0b3IgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3NbMF0pLnNsaWNlKDgsIC0xKSA9PT0gJ09iamVjdCcpIHtcbiAgICAgIHBhcmFtcyA9IGFyZ3NbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIFtlbCwgcGFyYW1zXSA9IGFyZ3M7XG4gICAgfVxuICAgIGlmICghcGFyYW1zKSBwYXJhbXMgPSB7fTtcbiAgICBwYXJhbXMgPSBleHRlbmQoe30sIHBhcmFtcyk7XG4gICAgaWYgKGVsICYmICFwYXJhbXMuZWwpIHBhcmFtcy5lbCA9IGVsO1xuICAgIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICBpZiAocGFyYW1zLmVsICYmIHR5cGVvZiBwYXJhbXMuZWwgPT09ICdzdHJpbmcnICYmIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocGFyYW1zLmVsKS5sZW5ndGggPiAxKSB7XG4gICAgICBjb25zdCBzd2lwZXJzID0gW107XG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHBhcmFtcy5lbCkuZm9yRWFjaChjb250YWluZXJFbCA9PiB7XG4gICAgICAgIGNvbnN0IG5ld1BhcmFtcyA9IGV4dGVuZCh7fSwgcGFyYW1zLCB7XG4gICAgICAgICAgZWw6IGNvbnRhaW5lckVsXG4gICAgICAgIH0pO1xuICAgICAgICBzd2lwZXJzLnB1c2gobmV3IFN3aXBlcihuZXdQYXJhbXMpKTtcbiAgICAgIH0pO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0cnVjdG9yLXJldHVyblxuICAgICAgcmV0dXJuIHN3aXBlcnM7XG4gICAgfVxuXG4gICAgLy8gU3dpcGVyIEluc3RhbmNlXG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBzd2lwZXIuX19zd2lwZXJfXyA9IHRydWU7XG4gICAgc3dpcGVyLnN1cHBvcnQgPSBnZXRTdXBwb3J0KCk7XG4gICAgc3dpcGVyLmRldmljZSA9IGdldERldmljZSh7XG4gICAgICB1c2VyQWdlbnQ6IHBhcmFtcy51c2VyQWdlbnRcbiAgICB9KTtcbiAgICBzd2lwZXIuYnJvd3NlciA9IGdldEJyb3dzZXIoKTtcbiAgICBzd2lwZXIuZXZlbnRzTGlzdGVuZXJzID0ge307XG4gICAgc3dpcGVyLmV2ZW50c0FueUxpc3RlbmVycyA9IFtdO1xuICAgIHN3aXBlci5tb2R1bGVzID0gWy4uLnN3aXBlci5fX21vZHVsZXNfX107XG4gICAgaWYgKHBhcmFtcy5tb2R1bGVzICYmIEFycmF5LmlzQXJyYXkocGFyYW1zLm1vZHVsZXMpKSB7XG4gICAgICBzd2lwZXIubW9kdWxlcy5wdXNoKC4uLnBhcmFtcy5tb2R1bGVzKTtcbiAgICB9XG4gICAgY29uc3QgYWxsTW9kdWxlc1BhcmFtcyA9IHt9O1xuICAgIHN3aXBlci5tb2R1bGVzLmZvckVhY2gobW9kID0+IHtcbiAgICAgIG1vZCh7XG4gICAgICAgIHBhcmFtcyxcbiAgICAgICAgc3dpcGVyLFxuICAgICAgICBleHRlbmRQYXJhbXM6IG1vZHVsZUV4dGVuZFBhcmFtcyhwYXJhbXMsIGFsbE1vZHVsZXNQYXJhbXMpLFxuICAgICAgICBvbjogc3dpcGVyLm9uLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgb25jZTogc3dpcGVyLm9uY2UuYmluZChzd2lwZXIpLFxuICAgICAgICBvZmY6IHN3aXBlci5vZmYuYmluZChzd2lwZXIpLFxuICAgICAgICBlbWl0OiBzd2lwZXIuZW1pdC5iaW5kKHN3aXBlcilcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gRXh0ZW5kIGRlZmF1bHRzIHdpdGggbW9kdWxlcyBwYXJhbXNcbiAgICBjb25zdCBzd2lwZXJQYXJhbXMgPSBleHRlbmQoe30sIGRlZmF1bHRzLCBhbGxNb2R1bGVzUGFyYW1zKTtcblxuICAgIC8vIEV4dGVuZCBkZWZhdWx0cyB3aXRoIHBhc3NlZCBwYXJhbXNcbiAgICBzd2lwZXIucGFyYW1zID0gZXh0ZW5kKHt9LCBzd2lwZXJQYXJhbXMsIGV4dGVuZGVkRGVmYXVsdHMsIHBhcmFtcyk7XG4gICAgc3dpcGVyLm9yaWdpbmFsUGFyYW1zID0gZXh0ZW5kKHt9LCBzd2lwZXIucGFyYW1zKTtcbiAgICBzd2lwZXIucGFzc2VkUGFyYW1zID0gZXh0ZW5kKHt9LCBwYXJhbXMpO1xuXG4gICAgLy8gYWRkIGV2ZW50IGxpc3RlbmVyc1xuICAgIGlmIChzd2lwZXIucGFyYW1zICYmIHN3aXBlci5wYXJhbXMub24pIHtcbiAgICAgIE9iamVjdC5rZXlzKHN3aXBlci5wYXJhbXMub24pLmZvckVhY2goZXZlbnROYW1lID0+IHtcbiAgICAgICAgc3dpcGVyLm9uKGV2ZW50TmFtZSwgc3dpcGVyLnBhcmFtcy5vbltldmVudE5hbWVdKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhcmFtcyAmJiBzd2lwZXIucGFyYW1zLm9uQW55KSB7XG4gICAgICBzd2lwZXIub25Bbnkoc3dpcGVyLnBhcmFtcy5vbkFueSk7XG4gICAgfVxuXG4gICAgLy8gRXh0ZW5kIFN3aXBlclxuICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgICBlbmFibGVkOiBzd2lwZXIucGFyYW1zLmVuYWJsZWQsXG4gICAgICBlbCxcbiAgICAgIC8vIENsYXNzZXNcbiAgICAgIGNsYXNzTmFtZXM6IFtdLFxuICAgICAgLy8gU2xpZGVzXG4gICAgICBzbGlkZXM6IFtdLFxuICAgICAgc2xpZGVzR3JpZDogW10sXG4gICAgICBzbmFwR3JpZDogW10sXG4gICAgICBzbGlkZXNTaXplc0dyaWQ6IFtdLFxuICAgICAgLy8gaXNEaXJlY3Rpb25cbiAgICAgIGlzSG9yaXpvbnRhbCgpIHtcbiAgICAgICAgcmV0dXJuIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCc7XG4gICAgICB9LFxuICAgICAgaXNWZXJ0aWNhbCgpIHtcbiAgICAgICAgcmV0dXJuIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID09PSAndmVydGljYWwnO1xuICAgICAgfSxcbiAgICAgIC8vIEluZGV4ZXNcbiAgICAgIGFjdGl2ZUluZGV4OiAwLFxuICAgICAgcmVhbEluZGV4OiAwLFxuICAgICAgLy9cbiAgICAgIGlzQmVnaW5uaW5nOiB0cnVlLFxuICAgICAgaXNFbmQ6IGZhbHNlLFxuICAgICAgLy8gUHJvcHNcbiAgICAgIHRyYW5zbGF0ZTogMCxcbiAgICAgIHByZXZpb3VzVHJhbnNsYXRlOiAwLFxuICAgICAgcHJvZ3Jlc3M6IDAsXG4gICAgICB2ZWxvY2l0eTogMCxcbiAgICAgIGFuaW1hdGluZzogZmFsc2UsXG4gICAgICBjc3NPdmVyZmxvd0FkanVzdG1lbnQoKSB7XG4gICAgICAgIC8vIFJldHVybnMgMCB1bmxlc3MgYHRyYW5zbGF0ZWAgaXMgPiAyKioyM1xuICAgICAgICAvLyBTaG91bGQgYmUgc3VidHJhY3RlZCBmcm9tIGNzcyB2YWx1ZXMgdG8gcHJldmVudCBvdmVyZmxvd1xuICAgICAgICByZXR1cm4gTWF0aC50cnVuYyh0aGlzLnRyYW5zbGF0ZSAvIDIgKiogMjMpICogMiAqKiAyMztcbiAgICAgIH0sXG4gICAgICAvLyBMb2Nrc1xuICAgICAgYWxsb3dTbGlkZU5leHQ6IHN3aXBlci5wYXJhbXMuYWxsb3dTbGlkZU5leHQsXG4gICAgICBhbGxvd1NsaWRlUHJldjogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlUHJldixcbiAgICAgIC8vIFRvdWNoIEV2ZW50c1xuICAgICAgdG91Y2hFdmVudHNEYXRhOiB7XG4gICAgICAgIGlzVG91Y2hlZDogdW5kZWZpbmVkLFxuICAgICAgICBpc01vdmVkOiB1bmRlZmluZWQsXG4gICAgICAgIGFsbG93VG91Y2hDYWxsYmFja3M6IHVuZGVmaW5lZCxcbiAgICAgICAgdG91Y2hTdGFydFRpbWU6IHVuZGVmaW5lZCxcbiAgICAgICAgaXNTY3JvbGxpbmc6IHVuZGVmaW5lZCxcbiAgICAgICAgY3VycmVudFRyYW5zbGF0ZTogdW5kZWZpbmVkLFxuICAgICAgICBzdGFydFRyYW5zbGF0ZTogdW5kZWZpbmVkLFxuICAgICAgICBhbGxvd1RocmVzaG9sZE1vdmU6IHVuZGVmaW5lZCxcbiAgICAgICAgLy8gRm9ybSBlbGVtZW50cyB0byBtYXRjaFxuICAgICAgICBmb2N1c2FibGVFbGVtZW50czogc3dpcGVyLnBhcmFtcy5mb2N1c2FibGVFbGVtZW50cyxcbiAgICAgICAgLy8gTGFzdCBjbGljayB0aW1lXG4gICAgICAgIGxhc3RDbGlja1RpbWU6IDAsXG4gICAgICAgIGNsaWNrVGltZW91dDogdW5kZWZpbmVkLFxuICAgICAgICAvLyBWZWxvY2l0aWVzXG4gICAgICAgIHZlbG9jaXRpZXM6IFtdLFxuICAgICAgICBhbGxvd01vbWVudHVtQm91bmNlOiB1bmRlZmluZWQsXG4gICAgICAgIHN0YXJ0TW92aW5nOiB1bmRlZmluZWQsXG4gICAgICAgIHBvaW50ZXJJZDogbnVsbCxcbiAgICAgICAgdG91Y2hJZDogbnVsbFxuICAgICAgfSxcbiAgICAgIC8vIENsaWNrc1xuICAgICAgYWxsb3dDbGljazogdHJ1ZSxcbiAgICAgIC8vIFRvdWNoZXNcbiAgICAgIGFsbG93VG91Y2hNb3ZlOiBzd2lwZXIucGFyYW1zLmFsbG93VG91Y2hNb3ZlLFxuICAgICAgdG91Y2hlczoge1xuICAgICAgICBzdGFydFg6IDAsXG4gICAgICAgIHN0YXJ0WTogMCxcbiAgICAgICAgY3VycmVudFg6IDAsXG4gICAgICAgIGN1cnJlbnRZOiAwLFxuICAgICAgICBkaWZmOiAwXG4gICAgICB9LFxuICAgICAgLy8gSW1hZ2VzXG4gICAgICBpbWFnZXNUb0xvYWQ6IFtdLFxuICAgICAgaW1hZ2VzTG9hZGVkOiAwXG4gICAgfSk7XG4gICAgc3dpcGVyLmVtaXQoJ19zd2lwZXInKTtcblxuICAgIC8vIEluaXRcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5pbml0KSB7XG4gICAgICBzd2lwZXIuaW5pdCgpO1xuICAgIH1cblxuICAgIC8vIFJldHVybiBhcHAgaW5zdGFuY2VcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RydWN0b3ItcmV0dXJuXG4gICAgcmV0dXJuIHN3aXBlcjtcbiAgfVxuICBnZXREaXJlY3Rpb25MYWJlbChwcm9wZXJ0eSkge1xuICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICByZXR1cm4gcHJvcGVydHk7XG4gICAgfVxuICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgIHJldHVybiB7XG4gICAgICAnd2lkdGgnOiAnaGVpZ2h0JyxcbiAgICAgICdtYXJnaW4tdG9wJzogJ21hcmdpbi1sZWZ0JyxcbiAgICAgICdtYXJnaW4tYm90dG9tICc6ICdtYXJnaW4tcmlnaHQnLFxuICAgICAgJ21hcmdpbi1sZWZ0JzogJ21hcmdpbi10b3AnLFxuICAgICAgJ21hcmdpbi1yaWdodCc6ICdtYXJnaW4tYm90dG9tJyxcbiAgICAgICdwYWRkaW5nLWxlZnQnOiAncGFkZGluZy10b3AnLFxuICAgICAgJ3BhZGRpbmctcmlnaHQnOiAncGFkZGluZy1ib3R0b20nLFxuICAgICAgJ21hcmdpblJpZ2h0JzogJ21hcmdpbkJvdHRvbSdcbiAgICB9W3Byb3BlcnR5XTtcbiAgfVxuICBnZXRTbGlkZUluZGV4KHNsaWRlRWwpIHtcbiAgICBjb25zdCB7XG4gICAgICBzbGlkZXNFbCxcbiAgICAgIHBhcmFtc1xuICAgIH0gPSB0aGlzO1xuICAgIGNvbnN0IHNsaWRlcyA9IGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYCk7XG4gICAgY29uc3QgZmlyc3RTbGlkZUluZGV4ID0gZWxlbWVudEluZGV4KHNsaWRlc1swXSk7XG4gICAgcmV0dXJuIGVsZW1lbnRJbmRleChzbGlkZUVsKSAtIGZpcnN0U2xpZGVJbmRleDtcbiAgfVxuICBnZXRTbGlkZUluZGV4QnlEYXRhKGluZGV4KSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U2xpZGVJbmRleCh0aGlzLnNsaWRlcy5maW5kKHNsaWRlRWwgPT4gc2xpZGVFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgKiAxID09PSBpbmRleCkpO1xuICB9XG4gIHJlY2FsY1NsaWRlcygpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgIHNsaWRlc0VsLFxuICAgICAgcGFyYW1zXG4gICAgfSA9IHN3aXBlcjtcbiAgICBzd2lwZXIuc2xpZGVzID0gZWxlbWVudENoaWxkcmVuKHNsaWRlc0VsLCBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKTtcbiAgfVxuICBlbmFibGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcbiAgICBzd2lwZXIuZW5hYmxlZCA9IHRydWU7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZ3JhYkN1cnNvcikge1xuICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ2VuYWJsZScpO1xuICB9XG4gIGRpc2FibGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5lbmFibGVkKSByZXR1cm47XG4gICAgc3dpcGVyLmVuYWJsZWQgPSBmYWxzZTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5ncmFiQ3Vyc29yKSB7XG4gICAgICBzd2lwZXIudW5zZXRHcmFiQ3Vyc29yKCk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdkaXNhYmxlJyk7XG4gIH1cbiAgc2V0UHJvZ3Jlc3MocHJvZ3Jlc3MsIHNwZWVkKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBwcm9ncmVzcyA9IE1hdGgubWluKE1hdGgubWF4KHByb2dyZXNzLCAwKSwgMSk7XG4gICAgY29uc3QgbWluID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICAgIGNvbnN0IG1heCA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKTtcbiAgICBjb25zdCBjdXJyZW50ID0gKG1heCAtIG1pbikgKiBwcm9ncmVzcyArIG1pbjtcbiAgICBzd2lwZXIudHJhbnNsYXRlVG8oY3VycmVudCwgdHlwZW9mIHNwZWVkID09PSAndW5kZWZpbmVkJyA/IDAgOiBzcGVlZCk7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgfVxuICBlbWl0Q29udGFpbmVyQ2xhc3NlcygpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5fZW1pdENsYXNzZXMgfHwgIXN3aXBlci5lbCkgcmV0dXJuO1xuICAgIGNvbnN0IGNscyA9IHN3aXBlci5lbC5jbGFzc05hbWUuc3BsaXQoJyAnKS5maWx0ZXIoY2xhc3NOYW1lID0+IHtcbiAgICAgIHJldHVybiBjbGFzc05hbWUuaW5kZXhPZignc3dpcGVyJykgPT09IDAgfHwgY2xhc3NOYW1lLmluZGV4T2Yoc3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzKSA9PT0gMDtcbiAgICB9KTtcbiAgICBzd2lwZXIuZW1pdCgnX2NvbnRhaW5lckNsYXNzZXMnLCBjbHMuam9pbignICcpKTtcbiAgfVxuICBnZXRTbGlkZUNsYXNzZXMoc2xpZGVFbCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHN3aXBlci5kZXN0cm95ZWQpIHJldHVybiAnJztcbiAgICByZXR1cm4gc2xpZGVFbC5jbGFzc05hbWUuc3BsaXQoJyAnKS5maWx0ZXIoY2xhc3NOYW1lID0+IHtcbiAgICAgIHJldHVybiBjbGFzc05hbWUuaW5kZXhPZignc3dpcGVyLXNsaWRlJykgPT09IDAgfHwgY2xhc3NOYW1lLmluZGV4T2Yoc3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzKSA9PT0gMDtcbiAgICB9KS5qb2luKCcgJyk7XG4gIH1cbiAgZW1pdFNsaWRlc0NsYXNzZXMoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuX2VtaXRDbGFzc2VzIHx8ICFzd2lwZXIuZWwpIHJldHVybjtcbiAgICBjb25zdCB1cGRhdGVzID0gW107XG4gICAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgY29uc3QgY2xhc3NOYW1lcyA9IHN3aXBlci5nZXRTbGlkZUNsYXNzZXMoc2xpZGVFbCk7XG4gICAgICB1cGRhdGVzLnB1c2goe1xuICAgICAgICBzbGlkZUVsLFxuICAgICAgICBjbGFzc05hbWVzXG4gICAgICB9KTtcbiAgICAgIHN3aXBlci5lbWl0KCdfc2xpZGVDbGFzcycsIHNsaWRlRWwsIGNsYXNzTmFtZXMpO1xuICAgIH0pO1xuICAgIHN3aXBlci5lbWl0KCdfc2xpZGVDbGFzc2VzJywgdXBkYXRlcyk7XG4gIH1cbiAgc2xpZGVzUGVyVmlld0R5bmFtaWModmlldywgZXhhY3QpIHtcbiAgICBpZiAodmlldyA9PT0gdm9pZCAwKSB7XG4gICAgICB2aWV3ID0gJ2N1cnJlbnQnO1xuICAgIH1cbiAgICBpZiAoZXhhY3QgPT09IHZvaWQgMCkge1xuICAgICAgZXhhY3QgPSBmYWxzZTtcbiAgICB9XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICBwYXJhbXMsXG4gICAgICBzbGlkZXMsXG4gICAgICBzbGlkZXNHcmlkLFxuICAgICAgc2xpZGVzU2l6ZXNHcmlkLFxuICAgICAgc2l6ZTogc3dpcGVyU2l6ZSxcbiAgICAgIGFjdGl2ZUluZGV4XG4gICAgfSA9IHN3aXBlcjtcbiAgICBsZXQgc3B2ID0gMTtcbiAgICBpZiAodHlwZW9mIHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnbnVtYmVyJykgcmV0dXJuIHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIGxldCBzbGlkZVNpemUgPSBzbGlkZXNbYWN0aXZlSW5kZXhdID8gTWF0aC5jZWlsKHNsaWRlc1thY3RpdmVJbmRleF0uc3dpcGVyU2xpZGVTaXplKSA6IDA7XG4gICAgICBsZXQgYnJlYWtMb29wO1xuICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4ICsgMTsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzW2ldICYmICFicmVha0xvb3ApIHtcbiAgICAgICAgICBzbGlkZVNpemUgKz0gTWF0aC5jZWlsKHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemUpO1xuICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIGlmIChzbGlkZVNpemUgPiBzd2lwZXJTaXplKSBicmVha0xvb3AgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gYWN0aXZlSW5kZXggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzW2ldICYmICFicmVha0xvb3ApIHtcbiAgICAgICAgICBzbGlkZVNpemUgKz0gc2xpZGVzW2ldLnN3aXBlclNsaWRlU2l6ZTtcbiAgICAgICAgICBzcHYgKz0gMTtcbiAgICAgICAgICBpZiAoc2xpZGVTaXplID4gc3dpcGVyU2l6ZSkgYnJlYWtMb29wID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGlmICh2aWV3ID09PSAnY3VycmVudCcpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4ICsgMTsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGNvbnN0IHNsaWRlSW5WaWV3ID0gZXhhY3QgPyBzbGlkZXNHcmlkW2ldICsgc2xpZGVzU2l6ZXNHcmlkW2ldIC0gc2xpZGVzR3JpZFthY3RpdmVJbmRleF0gPCBzd2lwZXJTaXplIDogc2xpZGVzR3JpZFtpXSAtIHNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdIDwgc3dpcGVyU2l6ZTtcbiAgICAgICAgICBpZiAoc2xpZGVJblZpZXcpIHtcbiAgICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gcHJldmlvdXNcbiAgICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4IC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgICBjb25zdCBzbGlkZUluVmlldyA9IHNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdIC0gc2xpZGVzR3JpZFtpXSA8IHN3aXBlclNpemU7XG4gICAgICAgICAgaWYgKHNsaWRlSW5WaWV3KSB7XG4gICAgICAgICAgICBzcHYgKz0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNwdjtcbiAgfVxuICB1cGRhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgY29uc3Qge1xuICAgICAgc25hcEdyaWQsXG4gICAgICBwYXJhbXNcbiAgICB9ID0gc3dpcGVyO1xuICAgIC8vIEJyZWFrcG9pbnRzXG4gICAgaWYgKHBhcmFtcy5icmVha3BvaW50cykge1xuICAgICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTtcbiAgICB9XG4gICAgWy4uLnN3aXBlci5lbC5xdWVyeVNlbGVjdG9yQWxsKCdbbG9hZGluZz1cImxhenlcIl0nKV0uZm9yRWFjaChpbWFnZUVsID0+IHtcbiAgICAgIGlmIChpbWFnZUVsLmNvbXBsZXRlKSB7XG4gICAgICAgIHByb2Nlc3NMYXp5UHJlbG9hZGVyKHN3aXBlciwgaW1hZ2VFbCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XG4gICAgICBjb25zdCB0cmFuc2xhdGVWYWx1ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlICogLTEgOiBzd2lwZXIudHJhbnNsYXRlO1xuICAgICAgY29uc3QgbmV3VHJhbnNsYXRlID0gTWF0aC5taW4oTWF0aC5tYXgodHJhbnNsYXRlVmFsdWUsIHN3aXBlci5tYXhUcmFuc2xhdGUoKSksIHN3aXBlci5taW5UcmFuc2xhdGUoKSk7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1RyYW5zbGF0ZSk7XG4gICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgfVxuICAgIGxldCB0cmFuc2xhdGVkO1xuICAgIGlmIChwYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQgJiYgIXBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBzZXRUcmFuc2xhdGUoKTtcbiAgICAgIGlmIChwYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgfHwgcGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxKSAmJiBzd2lwZXIuaXNFbmQgJiYgIXBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICBjb25zdCBzbGlkZXMgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzIDogc3dpcGVyLnNsaWRlcztcbiAgICAgICAgdHJhbnNsYXRlZCA9IHN3aXBlci5zbGlkZVRvKHNsaWRlcy5sZW5ndGggLSAxLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFuc2xhdGVkID0gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoIXRyYW5zbGF0ZWQpIHtcbiAgICAgICAgc2V0VHJhbnNsYXRlKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzbmFwR3JpZCAhPT0gc3dpcGVyLnNuYXBHcmlkKSB7XG4gICAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgndXBkYXRlJyk7XG4gIH1cbiAgY2hhbmdlRGlyZWN0aW9uKG5ld0RpcmVjdGlvbiwgbmVlZFVwZGF0ZSkge1xuICAgIGlmIChuZWVkVXBkYXRlID09PSB2b2lkIDApIHtcbiAgICAgIG5lZWRVcGRhdGUgPSB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IGN1cnJlbnREaXJlY3Rpb24gPSBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbjtcbiAgICBpZiAoIW5ld0RpcmVjdGlvbikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBuZXdEaXJlY3Rpb24gPSBjdXJyZW50RGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnO1xuICAgIH1cbiAgICBpZiAobmV3RGlyZWN0aW9uID09PSBjdXJyZW50RGlyZWN0aW9uIHx8IG5ld0RpcmVjdGlvbiAhPT0gJ2hvcml6b250YWwnICYmIG5ld0RpcmVjdGlvbiAhPT0gJ3ZlcnRpY2FsJykge1xuICAgICAgcmV0dXJuIHN3aXBlcjtcbiAgICB9XG4gICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5yZW1vdmUoYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfSR7Y3VycmVudERpcmVjdGlvbn1gKTtcbiAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9JHtuZXdEaXJlY3Rpb259YCk7XG4gICAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG4gICAgc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPSBuZXdEaXJlY3Rpb247XG4gICAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgaWYgKG5ld0RpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICBzbGlkZUVsLnN0eWxlLndpZHRoID0gJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZUVsLnN0eWxlLmhlaWdodCA9ICcnO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHN3aXBlci5lbWl0KCdjaGFuZ2VEaXJlY3Rpb24nKTtcbiAgICBpZiAobmVlZFVwZGF0ZSkgc3dpcGVyLnVwZGF0ZSgpO1xuICAgIHJldHVybiBzd2lwZXI7XG4gIH1cbiAgY2hhbmdlTGFuZ3VhZ2VEaXJlY3Rpb24oZGlyZWN0aW9uKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLnJ0bCAmJiBkaXJlY3Rpb24gPT09ICdydGwnIHx8ICFzd2lwZXIucnRsICYmIGRpcmVjdGlvbiA9PT0gJ2x0cicpIHJldHVybjtcbiAgICBzd2lwZXIucnRsID0gZGlyZWN0aW9uID09PSAncnRsJztcbiAgICBzd2lwZXIucnRsVHJhbnNsYXRlID0gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyAmJiBzd2lwZXIucnRsO1xuICAgIGlmIChzd2lwZXIucnRsKSB7XG4gICAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9cnRsYCk7XG4gICAgICBzd2lwZXIuZWwuZGlyID0gJ3J0bCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5lbC5jbGFzc0xpc3QucmVtb3ZlKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ydGxgKTtcbiAgICAgIHN3aXBlci5lbC5kaXIgPSAnbHRyJztcbiAgICB9XG4gICAgc3dpcGVyLnVwZGF0ZSgpO1xuICB9XG4gIG1vdW50KGVsZW1lbnQpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIubW91bnRlZCkgcmV0dXJuIHRydWU7XG5cbiAgICAvLyBGaW5kIGVsXG4gICAgbGV0IGVsID0gZWxlbWVudCB8fCBzd2lwZXIucGFyYW1zLmVsO1xuICAgIGlmICh0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpO1xuICAgIH1cbiAgICBpZiAoIWVsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGVsLnN3aXBlciA9IHN3aXBlcjtcbiAgICBpZiAoZWwucGFyZW50Tm9kZSAmJiBlbC5wYXJlbnROb2RlLmhvc3QgJiYgZWwucGFyZW50Tm9kZS5ob3N0Lm5vZGVOYW1lID09PSBzd2lwZXIucGFyYW1zLnN3aXBlckVsZW1lbnROb2RlTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBzd2lwZXIuaXNFbGVtZW50ID0gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgZ2V0V3JhcHBlclNlbGVjdG9yID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIGAuJHsoc3dpcGVyLnBhcmFtcy53cmFwcGVyQ2xhc3MgfHwgJycpLnRyaW0oKS5zcGxpdCgnICcpLmpvaW4oJy4nKX1gO1xuICAgIH07XG4gICAgY29uc3QgZ2V0V3JhcHBlciA9ICgpID0+IHtcbiAgICAgIGlmIChlbCAmJiBlbC5zaGFkb3dSb290ICYmIGVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3Rvcikge1xuICAgICAgICBjb25zdCByZXMgPSBlbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoZ2V0V3JhcHBlclNlbGVjdG9yKCkpO1xuICAgICAgICAvLyBDaGlsZHJlbiBuZWVkcyB0byByZXR1cm4gc2xvdCBpdGVtc1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVsZW1lbnRDaGlsZHJlbihlbCwgZ2V0V3JhcHBlclNlbGVjdG9yKCkpWzBdO1xuICAgIH07XG4gICAgLy8gRmluZCBXcmFwcGVyXG4gICAgbGV0IHdyYXBwZXJFbCA9IGdldFdyYXBwZXIoKTtcbiAgICBpZiAoIXdyYXBwZXJFbCAmJiBzd2lwZXIucGFyYW1zLmNyZWF0ZUVsZW1lbnRzKSB7XG4gICAgICB3cmFwcGVyRWwgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCBzd2lwZXIucGFyYW1zLndyYXBwZXJDbGFzcyk7XG4gICAgICBlbC5hcHBlbmQod3JhcHBlckVsKTtcbiAgICAgIGVsZW1lbnRDaGlsZHJlbihlbCwgYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31gKS5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgICB3cmFwcGVyRWwuYXBwZW5kKHNsaWRlRWwpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgICBlbCxcbiAgICAgIHdyYXBwZXJFbCxcbiAgICAgIHNsaWRlc0VsOiBzd2lwZXIuaXNFbGVtZW50ICYmICFlbC5wYXJlbnROb2RlLmhvc3Quc2xpZGVTbG90cyA/IGVsLnBhcmVudE5vZGUuaG9zdCA6IHdyYXBwZXJFbCxcbiAgICAgIGhvc3RFbDogc3dpcGVyLmlzRWxlbWVudCA/IGVsLnBhcmVudE5vZGUuaG9zdCA6IGVsLFxuICAgICAgbW91bnRlZDogdHJ1ZSxcbiAgICAgIC8vIFJUTFxuICAgICAgcnRsOiBlbC5kaXIudG9Mb3dlckNhc2UoKSA9PT0gJ3J0bCcgfHwgZWxlbWVudFN0eWxlKGVsLCAnZGlyZWN0aW9uJykgPT09ICdydGwnLFxuICAgICAgcnRsVHJhbnNsYXRlOiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnICYmIChlbC5kaXIudG9Mb3dlckNhc2UoKSA9PT0gJ3J0bCcgfHwgZWxlbWVudFN0eWxlKGVsLCAnZGlyZWN0aW9uJykgPT09ICdydGwnKSxcbiAgICAgIHdyb25nUlRMOiBlbGVtZW50U3R5bGUod3JhcHBlckVsLCAnZGlzcGxheScpID09PSAnLXdlYmtpdC1ib3gnXG4gICAgfSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaW5pdChlbCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHN3aXBlci5pbml0aWFsaXplZCkgcmV0dXJuIHN3aXBlcjtcbiAgICBjb25zdCBtb3VudGVkID0gc3dpcGVyLm1vdW50KGVsKTtcbiAgICBpZiAobW91bnRlZCA9PT0gZmFsc2UpIHJldHVybiBzd2lwZXI7XG4gICAgc3dpcGVyLmVtaXQoJ2JlZm9yZUluaXQnKTtcblxuICAgIC8vIFNldCBicmVha3BvaW50XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuYnJlYWtwb2ludHMpIHtcbiAgICAgIHN3aXBlci5zZXRCcmVha3BvaW50KCk7XG4gICAgfVxuXG4gICAgLy8gQWRkIENsYXNzZXNcbiAgICBzd2lwZXIuYWRkQ2xhc3NlcygpO1xuXG4gICAgLy8gVXBkYXRlIHNpemVcbiAgICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuXG4gICAgLy8gVXBkYXRlIHNsaWRlc1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93KSB7XG4gICAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgIH1cblxuICAgIC8vIFNldCBHcmFiIEN1cnNvclxuICAgIGlmIChzd2lwZXIucGFyYW1zLmdyYWJDdXJzb3IgJiYgc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKCk7XG4gICAgfVxuXG4gICAgLy8gU2xpZGUgVG8gSW5pdGlhbCBTbGlkZVxuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3AgJiYgc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5wYXJhbXMuaW5pdGlhbFNsaWRlICsgc3dpcGVyLnZpcnR1YWwuc2xpZGVzQmVmb3JlLCAwLCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCwgZmFsc2UsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIucGFyYW1zLmluaXRpYWxTbGlkZSwgMCwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQsIGZhbHNlLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgbG9vcFxuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gICAgfVxuXG4gICAgLy8gQXR0YWNoIGV2ZW50c1xuICAgIHN3aXBlci5hdHRhY2hFdmVudHMoKTtcbiAgICBjb25zdCBsYXp5RWxlbWVudHMgPSBbLi4uc3dpcGVyLmVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tsb2FkaW5nPVwibGF6eVwiXScpXTtcbiAgICBpZiAoc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgbGF6eUVsZW1lbnRzLnB1c2goLi4uc3dpcGVyLmhvc3RFbC5xdWVyeVNlbGVjdG9yQWxsKCdbbG9hZGluZz1cImxhenlcIl0nKSk7XG4gICAgfVxuICAgIGxhenlFbGVtZW50cy5mb3JFYWNoKGltYWdlRWwgPT4ge1xuICAgICAgaWYgKGltYWdlRWwuY29tcGxldGUpIHtcbiAgICAgICAgcHJvY2Vzc0xhenlQcmVsb2FkZXIoc3dpcGVyLCBpbWFnZUVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGltYWdlRWwuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGUgPT4ge1xuICAgICAgICAgIHByb2Nlc3NMYXp5UHJlbG9hZGVyKHN3aXBlciwgZS50YXJnZXQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBwcmVsb2FkKHN3aXBlcik7XG5cbiAgICAvLyBJbml0IEZsYWdcbiAgICBzd2lwZXIuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIHByZWxvYWQoc3dpcGVyKTtcblxuICAgIC8vIEVtaXRcbiAgICBzd2lwZXIuZW1pdCgnaW5pdCcpO1xuICAgIHN3aXBlci5lbWl0KCdhZnRlckluaXQnKTtcbiAgICByZXR1cm4gc3dpcGVyO1xuICB9XG4gIGRlc3Ryb3koZGVsZXRlSW5zdGFuY2UsIGNsZWFuU3R5bGVzKSB7XG4gICAgaWYgKGRlbGV0ZUluc3RhbmNlID09PSB2b2lkIDApIHtcbiAgICAgIGRlbGV0ZUluc3RhbmNlID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGNsZWFuU3R5bGVzID09PSB2b2lkIDApIHtcbiAgICAgIGNsZWFuU3R5bGVzID0gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICBwYXJhbXMsXG4gICAgICBlbCxcbiAgICAgIHdyYXBwZXJFbCxcbiAgICAgIHNsaWRlc1xuICAgIH0gPSBzd2lwZXI7XG4gICAgaWYgKHR5cGVvZiBzd2lwZXIucGFyYW1zID09PSAndW5kZWZpbmVkJyB8fCBzd2lwZXIuZGVzdHJveWVkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ2JlZm9yZURlc3Ryb3knKTtcblxuICAgIC8vIEluaXQgRmxhZ1xuICAgIHN3aXBlci5pbml0aWFsaXplZCA9IGZhbHNlO1xuXG4gICAgLy8gRGV0YWNoIGV2ZW50c1xuICAgIHN3aXBlci5kZXRhY2hFdmVudHMoKTtcblxuICAgIC8vIERlc3Ryb3kgbG9vcFxuICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gICAgfVxuXG4gICAgLy8gQ2xlYW51cCBzdHlsZXNcbiAgICBpZiAoY2xlYW5TdHlsZXMpIHtcbiAgICAgIHN3aXBlci5yZW1vdmVDbGFzc2VzKCk7XG4gICAgICBpZiAoZWwgJiYgdHlwZW9mIGVsICE9PSAnc3RyaW5nJykge1xuICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgICB9XG4gICAgICBpZiAod3JhcHBlckVsKSB7XG4gICAgICAgIHdyYXBwZXJFbC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgICB9XG4gICAgICBpZiAoc2xpZGVzICYmIHNsaWRlcy5sZW5ndGgpIHtcbiAgICAgICAgc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICAgICAgc2xpZGVFbC5jbGFzc0xpc3QucmVtb3ZlKHBhcmFtcy5zbGlkZVZpc2libGVDbGFzcywgcGFyYW1zLnNsaWRlRnVsbHlWaXNpYmxlQ2xhc3MsIHBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzLCBwYXJhbXMuc2xpZGVOZXh0Q2xhc3MsIHBhcmFtcy5zbGlkZVByZXZDbGFzcyk7XG4gICAgICAgICAgc2xpZGVFbC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgICAgICAgc2xpZGVFbC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgnZGVzdHJveScpO1xuXG4gICAgLy8gRGV0YWNoIGVtaXR0ZXIgZXZlbnRzXG4gICAgT2JqZWN0LmtleXMoc3dpcGVyLmV2ZW50c0xpc3RlbmVycykuZm9yRWFjaChldmVudE5hbWUgPT4ge1xuICAgICAgc3dpcGVyLm9mZihldmVudE5hbWUpO1xuICAgIH0pO1xuICAgIGlmIChkZWxldGVJbnN0YW5jZSAhPT0gZmFsc2UpIHtcbiAgICAgIGlmIChzd2lwZXIuZWwgJiYgdHlwZW9mIHN3aXBlci5lbCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgc3dpcGVyLmVsLnN3aXBlciA9IG51bGw7XG4gICAgICB9XG4gICAgICBkZWxldGVQcm9wcyhzd2lwZXIpO1xuICAgIH1cbiAgICBzd2lwZXIuZGVzdHJveWVkID0gdHJ1ZTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBzdGF0aWMgZXh0ZW5kRGVmYXVsdHMobmV3RGVmYXVsdHMpIHtcbiAgICBleHRlbmQoZXh0ZW5kZWREZWZhdWx0cywgbmV3RGVmYXVsdHMpO1xuICB9XG4gIHN0YXRpYyBnZXQgZXh0ZW5kZWREZWZhdWx0cygpIHtcbiAgICByZXR1cm4gZXh0ZW5kZWREZWZhdWx0cztcbiAgfVxuICBzdGF0aWMgZ2V0IGRlZmF1bHRzKCkge1xuICAgIHJldHVybiBkZWZhdWx0cztcbiAgfVxuICBzdGF0aWMgaW5zdGFsbE1vZHVsZShtb2QpIHtcbiAgICBpZiAoIVN3aXBlci5wcm90b3R5cGUuX19tb2R1bGVzX18pIFN3aXBlci5wcm90b3R5cGUuX19tb2R1bGVzX18gPSBbXTtcbiAgICBjb25zdCBtb2R1bGVzID0gU3dpcGVyLnByb3RvdHlwZS5fX21vZHVsZXNfXztcbiAgICBpZiAodHlwZW9mIG1vZCA9PT0gJ2Z1bmN0aW9uJyAmJiBtb2R1bGVzLmluZGV4T2YobW9kKSA8IDApIHtcbiAgICAgIG1vZHVsZXMucHVzaChtb2QpO1xuICAgIH1cbiAgfVxuICBzdGF0aWMgdXNlKG1vZHVsZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG1vZHVsZSkpIHtcbiAgICAgIG1vZHVsZS5mb3JFYWNoKG0gPT4gU3dpcGVyLmluc3RhbGxNb2R1bGUobSkpO1xuICAgICAgcmV0dXJuIFN3aXBlcjtcbiAgICB9XG4gICAgU3dpcGVyLmluc3RhbGxNb2R1bGUobW9kdWxlKTtcbiAgICByZXR1cm4gU3dpcGVyO1xuICB9XG59XG5PYmplY3Qua2V5cyhwcm90b3R5cGVzKS5mb3JFYWNoKHByb3RvdHlwZUdyb3VwID0+IHtcbiAgT2JqZWN0LmtleXMocHJvdG90eXBlc1twcm90b3R5cGVHcm91cF0pLmZvckVhY2gocHJvdG9NZXRob2QgPT4ge1xuICAgIFN3aXBlci5wcm90b3R5cGVbcHJvdG9NZXRob2RdID0gcHJvdG90eXBlc1twcm90b3R5cGVHcm91cF1bcHJvdG9NZXRob2RdO1xuICB9KTtcbn0pO1xuU3dpcGVyLnVzZShbUmVzaXplLCBPYnNlcnZlcl0pO1xuXG5leHBvcnQgeyBTd2lwZXIgYXMgUywgZGVmYXVsdHMgYXMgZCB9O1xuIiwiaW1wb3J0IHsgZSBhcyBlbGVtZW50Q2hpbGRyZW4sIGMgYXMgY3JlYXRlRWxlbWVudCB9IGZyb20gJy4vdXRpbHMubWpzJztcblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZChzd2lwZXIsIG9yaWdpbmFsUGFyYW1zLCBwYXJhbXMsIGNoZWNrUHJvcHMpIHtcbiAgaWYgKHN3aXBlci5wYXJhbXMuY3JlYXRlRWxlbWVudHMpIHtcbiAgICBPYmplY3Qua2V5cyhjaGVja1Byb3BzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBpZiAoIXBhcmFtc1trZXldICYmIHBhcmFtcy5hdXRvID09PSB0cnVlKSB7XG4gICAgICAgIGxldCBlbGVtZW50ID0gZWxlbWVudENoaWxkcmVuKHN3aXBlci5lbCwgYC4ke2NoZWNrUHJvcHNba2V5XX1gKVswXTtcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgZWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIGNoZWNrUHJvcHNba2V5XSk7XG4gICAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSBjaGVja1Byb3BzW2tleV07XG4gICAgICAgICAgc3dpcGVyLmVsLmFwcGVuZChlbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJhbXNba2V5XSA9IGVsZW1lbnQ7XG4gICAgICAgIG9yaWdpbmFsUGFyYW1zW2tleV0gPSBlbGVtZW50O1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBwYXJhbXM7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQgYXMgYyB9O1xuIiwiZnVuY3Rpb24gY2xhc3Nlc1RvU2VsZWN0b3IoY2xhc3Nlcykge1xuICBpZiAoY2xhc3NlcyA9PT0gdm9pZCAwKSB7XG4gICAgY2xhc3NlcyA9ICcnO1xuICB9XG4gIHJldHVybiBgLiR7Y2xhc3Nlcy50cmltKCkucmVwbGFjZSgvKFtcXC46IStcXC9dKS9nLCAnXFxcXCQxJykgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAucmVwbGFjZSgvIC9nLCAnLicpfWA7XG59XG5cbmV4cG9ydCB7IGNsYXNzZXNUb1NlbGVjdG9yIGFzIGMgfTtcbiIsImltcG9ydCB7IGJ1cmdlck9wZW4sIGJ1cmdlckNsb3NlIH0gZnJvbSAnLi9qcy1jb21wb25lbnRzL2J1cmdlcic7XG5cbmltcG9ydCBTd2lwZXIgZnJvbSAnc3dpcGVyJztcbmltcG9ydCB7IE5hdmlnYXRpb24sIFBhZ2luYXRpb24gfSBmcm9tICdzd2lwZXIvbW9kdWxlcyc7XG5cbmNvbnN0IHN3aXBlciA9IG5ldyBTd2lwZXIoJy5oZXJvLXNsaWRlcicsIHtcblx0bW9kdWxlczogW05hdmlnYXRpb24sIFBhZ2luYXRpb25dLFxuXG5cdGxvb3A6IHRydWUsXG5cblx0cGFnaW5hdGlvbjoge1xuXHRcdGVsOiAnLnN3aXBlci1wYWdpbmF0aW9uJyxcblx0XHRjbGlja2FibGU6IHRydWUsXG5cdFx0cmVuZGVyQnVsbGV0OiBmdW5jdGlvbiAoaW5kZXgsIGNsYXNzTmFtZSkge1xuXHRcdFx0cmV0dXJuICc8c3BhbiBjbGFzcz1cIicgKyBjbGFzc05hbWUgKyAnXCI+JyArIChpbmRleCArIDEpICsgJzwvc3Bhbj4nO1xuXHRcdH0sXG5cdH0sXG5cblx0Ly8gTmF2aWdhdGlvbiBhcnJvd3Ncblx0bmF2aWdhdGlvbjoge1xuXHRcdG5leHRFbDogJy5zd2lwZXItYnV0dG9uLW5leHQnLFxuXHRcdHByZXZFbDogJy5zd2lwZXItYnV0dG9uLXByZXYnLFxuXHR9LFxufSk7XG5cbmJ1cmdlck9wZW4oKTtcbmJ1cmdlckNsb3NlKCk7XG4iLCJpbXBvcnQgeyBjIGFzIGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQgfSBmcm9tICcuLi9zaGFyZWQvY3JlYXRlLWVsZW1lbnQtaWYtbm90LWRlZmluZWQubWpzJztcbmltcG9ydCB7IG0gYXMgbWFrZUVsZW1lbnRzQXJyYXkgfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMubWpzJztcblxuZnVuY3Rpb24gTmF2aWdhdGlvbihfcmVmKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyLFxuICAgIGV4dGVuZFBhcmFtcyxcbiAgICBvbixcbiAgICBlbWl0XG4gIH0gPSBfcmVmO1xuICBleHRlbmRQYXJhbXMoe1xuICAgIG5hdmlnYXRpb246IHtcbiAgICAgIG5leHRFbDogbnVsbCxcbiAgICAgIHByZXZFbDogbnVsbCxcbiAgICAgIGhpZGVPbkNsaWNrOiBmYWxzZSxcbiAgICAgIGRpc2FibGVkQ2xhc3M6ICdzd2lwZXItYnV0dG9uLWRpc2FibGVkJyxcbiAgICAgIGhpZGRlbkNsYXNzOiAnc3dpcGVyLWJ1dHRvbi1oaWRkZW4nLFxuICAgICAgbG9ja0NsYXNzOiAnc3dpcGVyLWJ1dHRvbi1sb2NrJyxcbiAgICAgIG5hdmlnYXRpb25EaXNhYmxlZENsYXNzOiAnc3dpcGVyLW5hdmlnYXRpb24tZGlzYWJsZWQnXG4gICAgfVxuICB9KTtcbiAgc3dpcGVyLm5hdmlnYXRpb24gPSB7XG4gICAgbmV4dEVsOiBudWxsLFxuICAgIHByZXZFbDogbnVsbFxuICB9O1xuICBmdW5jdGlvbiBnZXRFbChlbCkge1xuICAgIGxldCByZXM7XG4gICAgaWYgKGVsICYmIHR5cGVvZiBlbCA9PT0gJ3N0cmluZycgJiYgc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgcmVzID0gc3dpcGVyLmVsLnF1ZXJ5U2VsZWN0b3IoZWwpIHx8IHN3aXBlci5ob3N0RWwucXVlcnlTZWxlY3RvcihlbCk7XG4gICAgICBpZiAocmVzKSByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBpZiAoZWwpIHtcbiAgICAgIGlmICh0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSByZXMgPSBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlbCldO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMudW5pcXVlTmF2RWxlbWVudHMgJiYgdHlwZW9mIGVsID09PSAnc3RyaW5nJyAmJiByZXMgJiYgcmVzLmxlbmd0aCA+IDEgJiYgc3dpcGVyLmVsLnF1ZXJ5U2VsZWN0b3JBbGwoZWwpLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXMgPSBzd2lwZXIuZWwucXVlcnlTZWxlY3RvcihlbCk7XG4gICAgICB9IGVsc2UgaWYgKHJlcyAmJiByZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJlcyA9IHJlc1swXTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVsICYmICFyZXMpIHJldHVybiBlbDtcbiAgICAvLyBpZiAoQXJyYXkuaXNBcnJheShyZXMpICYmIHJlcy5sZW5ndGggPT09IDEpIHJlcyA9IHJlc1swXTtcbiAgICByZXR1cm4gcmVzO1xuICB9XG4gIGZ1bmN0aW9uIHRvZ2dsZUVsKGVsLCBkaXNhYmxlZCkge1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbjtcbiAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgIGlmIChzdWJFbCkge1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3RbZGlzYWJsZWQgPyAnYWRkJyA6ICdyZW1vdmUnXSguLi5wYXJhbXMuZGlzYWJsZWRDbGFzcy5zcGxpdCgnICcpKTtcbiAgICAgICAgaWYgKHN1YkVsLnRhZ05hbWUgPT09ICdCVVRUT04nKSBzdWJFbC5kaXNhYmxlZCA9IGRpc2FibGVkO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5lbmFibGVkKSB7XG4gICAgICAgICAgc3ViRWwuY2xhc3NMaXN0W3N3aXBlci5pc0xvY2tlZCA/ICdhZGQnIDogJ3JlbW92ZSddKHBhcmFtcy5sb2NrQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIC8vIFVwZGF0ZSBOYXZpZ2F0aW9uIEJ1dHRvbnNcbiAgICBjb25zdCB7XG4gICAgICBuZXh0RWwsXG4gICAgICBwcmV2RWxcbiAgICB9ID0gc3dpcGVyLm5hdmlnYXRpb247XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgdG9nZ2xlRWwocHJldkVsLCBmYWxzZSk7XG4gICAgICB0b2dnbGVFbChuZXh0RWwsIGZhbHNlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdG9nZ2xlRWwocHJldkVsLCBzd2lwZXIuaXNCZWdpbm5pbmcgJiYgIXN3aXBlci5wYXJhbXMucmV3aW5kKTtcbiAgICB0b2dnbGVFbChuZXh0RWwsIHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLnBhcmFtcy5yZXdpbmQpO1xuICB9XG4gIGZ1bmN0aW9uIG9uUHJldkNsaWNrKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKHN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5sb29wICYmICFzd2lwZXIucGFyYW1zLnJld2luZCkgcmV0dXJuO1xuICAgIHN3aXBlci5zbGlkZVByZXYoKTtcbiAgICBlbWl0KCduYXZpZ2F0aW9uUHJldicpO1xuICB9XG4gIGZ1bmN0aW9uIG9uTmV4dENsaWNrKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLnBhcmFtcy5sb29wICYmICFzd2lwZXIucGFyYW1zLnJld2luZCkgcmV0dXJuO1xuICAgIHN3aXBlci5zbGlkZU5leHQoKTtcbiAgICBlbWl0KCduYXZpZ2F0aW9uTmV4dCcpO1xuICB9XG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uO1xuICAgIHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbiA9IGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQoc3dpcGVyLCBzd2lwZXIub3JpZ2luYWxQYXJhbXMubmF2aWdhdGlvbiwgc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLCB7XG4gICAgICBuZXh0RWw6ICdzd2lwZXItYnV0dG9uLW5leHQnLFxuICAgICAgcHJldkVsOiAnc3dpcGVyLWJ1dHRvbi1wcmV2J1xuICAgIH0pO1xuICAgIGlmICghKHBhcmFtcy5uZXh0RWwgfHwgcGFyYW1zLnByZXZFbCkpIHJldHVybjtcbiAgICBsZXQgbmV4dEVsID0gZ2V0RWwocGFyYW1zLm5leHRFbCk7XG4gICAgbGV0IHByZXZFbCA9IGdldEVsKHBhcmFtcy5wcmV2RWwpO1xuICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLm5hdmlnYXRpb24sIHtcbiAgICAgIG5leHRFbCxcbiAgICAgIHByZXZFbFxuICAgIH0pO1xuICAgIG5leHRFbCA9IG1ha2VFbGVtZW50c0FycmF5KG5leHRFbCk7XG4gICAgcHJldkVsID0gbWFrZUVsZW1lbnRzQXJyYXkocHJldkVsKTtcbiAgICBjb25zdCBpbml0QnV0dG9uID0gKGVsLCBkaXIpID0+IHtcbiAgICAgIGlmIChlbCkge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGRpciA9PT0gJ25leHQnID8gb25OZXh0Q2xpY2sgOiBvblByZXZDbGljayk7XG4gICAgICB9XG4gICAgICBpZiAoIXN3aXBlci5lbmFibGVkICYmIGVsKSB7XG4gICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoLi4ucGFyYW1zLmxvY2tDbGFzcy5zcGxpdCgnICcpKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIG5leHRFbC5mb3JFYWNoKGVsID0+IGluaXRCdXR0b24oZWwsICduZXh0JykpO1xuICAgIHByZXZFbC5mb3JFYWNoKGVsID0+IGluaXRCdXR0b24oZWwsICdwcmV2JykpO1xuICB9XG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgbGV0IHtcbiAgICAgIG5leHRFbCxcbiAgICAgIHByZXZFbFxuICAgIH0gPSBzd2lwZXIubmF2aWdhdGlvbjtcbiAgICBuZXh0RWwgPSBtYWtlRWxlbWVudHNBcnJheShuZXh0RWwpO1xuICAgIHByZXZFbCA9IG1ha2VFbGVtZW50c0FycmF5KHByZXZFbCk7XG4gICAgY29uc3QgZGVzdHJveUJ1dHRvbiA9IChlbCwgZGlyKSA9PiB7XG4gICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGRpciA9PT0gJ25leHQnID8gb25OZXh0Q2xpY2sgOiBvblByZXZDbGljayk7XG4gICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKC4uLnN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5kaXNhYmxlZENsYXNzLnNwbGl0KCcgJykpO1xuICAgIH07XG4gICAgbmV4dEVsLmZvckVhY2goZWwgPT4gZGVzdHJveUJ1dHRvbihlbCwgJ25leHQnKSk7XG4gICAgcHJldkVsLmZvckVhY2goZWwgPT4gZGVzdHJveUJ1dHRvbihlbCwgJ3ByZXYnKSk7XG4gIH1cbiAgb24oJ2luaXQnLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5lbmFibGVkID09PSBmYWxzZSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBkaXNhYmxlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluaXQoKTtcbiAgICAgIHVwZGF0ZSgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCd0b0VkZ2UgZnJvbUVkZ2UgbG9jayB1bmxvY2snLCAoKSA9PiB7XG4gICAgdXBkYXRlKCk7XG4gIH0pO1xuICBvbignZGVzdHJveScsICgpID0+IHtcbiAgICBkZXN0cm95KCk7XG4gIH0pO1xuICBvbignZW5hYmxlIGRpc2FibGUnLCAoKSA9PiB7XG4gICAgbGV0IHtcbiAgICAgIG5leHRFbCxcbiAgICAgIHByZXZFbFxuICAgIH0gPSBzd2lwZXIubmF2aWdhdGlvbjtcbiAgICBuZXh0RWwgPSBtYWtlRWxlbWVudHNBcnJheShuZXh0RWwpO1xuICAgIHByZXZFbCA9IG1ha2VFbGVtZW50c0FycmF5KHByZXZFbCk7XG4gICAgaWYgKHN3aXBlci5lbmFibGVkKSB7XG4gICAgICB1cGRhdGUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgWy4uLm5leHRFbCwgLi4ucHJldkVsXS5maWx0ZXIoZWwgPT4gISFlbCkuZm9yRWFjaChlbCA9PiBlbC5jbGFzc0xpc3QuYWRkKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5sb2NrQ2xhc3MpKTtcbiAgfSk7XG4gIG9uKCdjbGljaycsIChfcywgZSkgPT4ge1xuICAgIGxldCB7XG4gICAgICBuZXh0RWwsXG4gICAgICBwcmV2RWxcbiAgICB9ID0gc3dpcGVyLm5hdmlnYXRpb247XG4gICAgbmV4dEVsID0gbWFrZUVsZW1lbnRzQXJyYXkobmV4dEVsKTtcbiAgICBwcmV2RWwgPSBtYWtlRWxlbWVudHNBcnJheShwcmV2RWwpO1xuICAgIGNvbnN0IHRhcmdldEVsID0gZS50YXJnZXQ7XG4gICAgbGV0IHRhcmdldElzQnV0dG9uID0gcHJldkVsLmluY2x1ZGVzKHRhcmdldEVsKSB8fCBuZXh0RWwuaW5jbHVkZXModGFyZ2V0RWwpO1xuICAgIGlmIChzd2lwZXIuaXNFbGVtZW50ICYmICF0YXJnZXRJc0J1dHRvbikge1xuICAgICAgY29uc3QgcGF0aCA9IGUucGF0aCB8fCBlLmNvbXBvc2VkUGF0aCAmJiBlLmNvbXBvc2VkUGF0aCgpO1xuICAgICAgaWYgKHBhdGgpIHtcbiAgICAgICAgdGFyZ2V0SXNCdXR0b24gPSBwYXRoLmZpbmQocGF0aEVsID0+IG5leHRFbC5pbmNsdWRlcyhwYXRoRWwpIHx8IHByZXZFbC5pbmNsdWRlcyhwYXRoRWwpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRlT25DbGljayAmJiAhdGFyZ2V0SXNCdXR0b24pIHtcbiAgICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbiAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24gJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmNsaWNrYWJsZSAmJiAoc3dpcGVyLnBhZ2luYXRpb24uZWwgPT09IHRhcmdldEVsIHx8IHN3aXBlci5wYWdpbmF0aW9uLmVsLmNvbnRhaW5zKHRhcmdldEVsKSkpIHJldHVybjtcbiAgICAgIGxldCBpc0hpZGRlbjtcbiAgICAgIGlmIChuZXh0RWwubGVuZ3RoKSB7XG4gICAgICAgIGlzSGlkZGVuID0gbmV4dEVsWzBdLmNsYXNzTGlzdC5jb250YWlucyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgfSBlbHNlIGlmIChwcmV2RWwubGVuZ3RoKSB7XG4gICAgICAgIGlzSGlkZGVuID0gcHJldkVsWzBdLmNsYXNzTGlzdC5jb250YWlucyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgfVxuICAgICAgaWYgKGlzSGlkZGVuID09PSB0cnVlKSB7XG4gICAgICAgIGVtaXQoJ25hdmlnYXRpb25TaG93Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbWl0KCduYXZpZ2F0aW9uSGlkZScpO1xuICAgICAgfVxuICAgICAgWy4uLm5leHRFbCwgLi4ucHJldkVsXS5maWx0ZXIoZWwgPT4gISFlbCkuZm9yRWFjaChlbCA9PiBlbC5jbGFzc0xpc3QudG9nZ2xlKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcykpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGVuYWJsZSA9ICgpID0+IHtcbiAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LnJlbW92ZSguLi5zd2lwZXIucGFyYW1zLm5hdmlnYXRpb24ubmF2aWdhdGlvbkRpc2FibGVkQ2xhc3Muc3BsaXQoJyAnKSk7XG4gICAgaW5pdCgpO1xuICAgIHVwZGF0ZSgpO1xuICB9O1xuICBjb25zdCBkaXNhYmxlID0gKCkgPT4ge1xuICAgIHN3aXBlci5lbC5jbGFzc0xpc3QuYWRkKC4uLnN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5uYXZpZ2F0aW9uRGlzYWJsZWRDbGFzcy5zcGxpdCgnICcpKTtcbiAgICBkZXN0cm95KCk7XG4gIH07XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLm5hdmlnYXRpb24sIHtcbiAgICBlbmFibGUsXG4gICAgZGlzYWJsZSxcbiAgICB1cGRhdGUsXG4gICAgaW5pdCxcbiAgICBkZXN0cm95XG4gIH0pO1xufVxuXG5leHBvcnQgeyBOYXZpZ2F0aW9uIGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCB7IGMgYXMgY2xhc3Nlc1RvU2VsZWN0b3IgfSBmcm9tICcuLi9zaGFyZWQvY2xhc3Nlcy10by1zZWxlY3Rvci5tanMnO1xuaW1wb3J0IHsgYyBhcyBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkIH0gZnJvbSAnLi4vc2hhcmVkL2NyZWF0ZS1lbGVtZW50LWlmLW5vdC1kZWZpbmVkLm1qcyc7XG5pbXBvcnQgeyBtIGFzIG1ha2VFbGVtZW50c0FycmF5LCBmIGFzIGVsZW1lbnRPdXRlclNpemUsIGggYXMgZWxlbWVudEluZGV4LCBhIGFzIGVsZW1lbnRQYXJlbnRzIH0gZnJvbSAnLi4vc2hhcmVkL3V0aWxzLm1qcyc7XG5cbmZ1bmN0aW9uIFBhZ2luYXRpb24oX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICBleHRlbmRQYXJhbXMsXG4gICAgb24sXG4gICAgZW1pdFxuICB9ID0gX3JlZjtcbiAgY29uc3QgcGZ4ID0gJ3N3aXBlci1wYWdpbmF0aW9uJztcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICBwYWdpbmF0aW9uOiB7XG4gICAgICBlbDogbnVsbCxcbiAgICAgIGJ1bGxldEVsZW1lbnQ6ICdzcGFuJyxcbiAgICAgIGNsaWNrYWJsZTogZmFsc2UsXG4gICAgICBoaWRlT25DbGljazogZmFsc2UsXG4gICAgICByZW5kZXJCdWxsZXQ6IG51bGwsXG4gICAgICByZW5kZXJQcm9ncmVzc2JhcjogbnVsbCxcbiAgICAgIHJlbmRlckZyYWN0aW9uOiBudWxsLFxuICAgICAgcmVuZGVyQ3VzdG9tOiBudWxsLFxuICAgICAgcHJvZ3Jlc3NiYXJPcHBvc2l0ZTogZmFsc2UsXG4gICAgICB0eXBlOiAnYnVsbGV0cycsXG4gICAgICAvLyAnYnVsbGV0cycgb3IgJ3Byb2dyZXNzYmFyJyBvciAnZnJhY3Rpb24nIG9yICdjdXN0b20nXG4gICAgICBkeW5hbWljQnVsbGV0czogZmFsc2UsXG4gICAgICBkeW5hbWljTWFpbkJ1bGxldHM6IDEsXG4gICAgICBmb3JtYXRGcmFjdGlvbkN1cnJlbnQ6IG51bWJlciA9PiBudW1iZXIsXG4gICAgICBmb3JtYXRGcmFjdGlvblRvdGFsOiBudW1iZXIgPT4gbnVtYmVyLFxuICAgICAgYnVsbGV0Q2xhc3M6IGAke3BmeH0tYnVsbGV0YCxcbiAgICAgIGJ1bGxldEFjdGl2ZUNsYXNzOiBgJHtwZnh9LWJ1bGxldC1hY3RpdmVgLFxuICAgICAgbW9kaWZpZXJDbGFzczogYCR7cGZ4fS1gLFxuICAgICAgY3VycmVudENsYXNzOiBgJHtwZnh9LWN1cnJlbnRgLFxuICAgICAgdG90YWxDbGFzczogYCR7cGZ4fS10b3RhbGAsXG4gICAgICBoaWRkZW5DbGFzczogYCR7cGZ4fS1oaWRkZW5gLFxuICAgICAgcHJvZ3Jlc3NiYXJGaWxsQ2xhc3M6IGAke3BmeH0tcHJvZ3Jlc3NiYXItZmlsbGAsXG4gICAgICBwcm9ncmVzc2Jhck9wcG9zaXRlQ2xhc3M6IGAke3BmeH0tcHJvZ3Jlc3NiYXItb3Bwb3NpdGVgLFxuICAgICAgY2xpY2thYmxlQ2xhc3M6IGAke3BmeH0tY2xpY2thYmxlYCxcbiAgICAgIGxvY2tDbGFzczogYCR7cGZ4fS1sb2NrYCxcbiAgICAgIGhvcml6b250YWxDbGFzczogYCR7cGZ4fS1ob3Jpem9udGFsYCxcbiAgICAgIHZlcnRpY2FsQ2xhc3M6IGAke3BmeH0tdmVydGljYWxgLFxuICAgICAgcGFnaW5hdGlvbkRpc2FibGVkQ2xhc3M6IGAke3BmeH0tZGlzYWJsZWRgXG4gICAgfVxuICB9KTtcbiAgc3dpcGVyLnBhZ2luYXRpb24gPSB7XG4gICAgZWw6IG51bGwsXG4gICAgYnVsbGV0czogW11cbiAgfTtcbiAgbGV0IGJ1bGxldFNpemU7XG4gIGxldCBkeW5hbWljQnVsbGV0SW5kZXggPSAwO1xuICBmdW5jdGlvbiBpc1BhZ2luYXRpb25EaXNhYmxlZCgpIHtcbiAgICByZXR1cm4gIXN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5lbCB8fCAhc3dpcGVyLnBhZ2luYXRpb24uZWwgfHwgQXJyYXkuaXNBcnJheShzd2lwZXIucGFnaW5hdGlvbi5lbCkgJiYgc3dpcGVyLnBhZ2luYXRpb24uZWwubGVuZ3RoID09PSAwO1xuICB9XG4gIGZ1bmN0aW9uIHNldFNpZGVCdWxsZXRzKGJ1bGxldEVsLCBwb3NpdGlvbikge1xuICAgIGNvbnN0IHtcbiAgICAgIGJ1bGxldEFjdGl2ZUNsYXNzXG4gICAgfSA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoIWJ1bGxldEVsKSByZXR1cm47XG4gICAgYnVsbGV0RWwgPSBidWxsZXRFbFtgJHtwb3NpdGlvbiA9PT0gJ3ByZXYnID8gJ3ByZXZpb3VzJyA6ICduZXh0J31FbGVtZW50U2libGluZ2BdO1xuICAgIGlmIChidWxsZXRFbCkge1xuICAgICAgYnVsbGV0RWwuY2xhc3NMaXN0LmFkZChgJHtidWxsZXRBY3RpdmVDbGFzc30tJHtwb3NpdGlvbn1gKTtcbiAgICAgIGJ1bGxldEVsID0gYnVsbGV0RWxbYCR7cG9zaXRpb24gPT09ICdwcmV2JyA/ICdwcmV2aW91cycgOiAnbmV4dCd9RWxlbWVudFNpYmxpbmdgXTtcbiAgICAgIGlmIChidWxsZXRFbCkge1xuICAgICAgICBidWxsZXRFbC5jbGFzc0xpc3QuYWRkKGAke2J1bGxldEFjdGl2ZUNsYXNzfS0ke3Bvc2l0aW9ufS0ke3Bvc2l0aW9ufWApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBnZXRNb3ZlRGlyZWN0aW9uKHByZXZJbmRleCwgbmV4dEluZGV4LCBsZW5ndGgpIHtcbiAgICBwcmV2SW5kZXggPSBwcmV2SW5kZXggJSBsZW5ndGg7XG4gICAgbmV4dEluZGV4ID0gbmV4dEluZGV4ICUgbGVuZ3RoO1xuICAgIGlmIChuZXh0SW5kZXggPT09IHByZXZJbmRleCArIDEpIHtcbiAgICAgIHJldHVybiAnbmV4dCc7XG4gICAgfSBlbHNlIGlmIChuZXh0SW5kZXggPT09IHByZXZJbmRleCAtIDEpIHtcbiAgICAgIHJldHVybiAncHJldmlvdXMnO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgZnVuY3Rpb24gb25CdWxsZXRDbGljayhlKSB7XG4gICAgY29uc3QgYnVsbGV0RWwgPSBlLnRhcmdldC5jbG9zZXN0KGNsYXNzZXNUb1NlbGVjdG9yKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcykpO1xuICAgIGlmICghYnVsbGV0RWwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IGluZGV4ID0gZWxlbWVudEluZGV4KGJ1bGxldEVsKSAqIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgaWYgKHN3aXBlci5yZWFsSW5kZXggPT09IGluZGV4KSByZXR1cm47XG4gICAgICBjb25zdCBtb3ZlRGlyZWN0aW9uID0gZ2V0TW92ZURpcmVjdGlvbihzd2lwZXIucmVhbEluZGV4LCBpbmRleCwgc3dpcGVyLnNsaWRlcy5sZW5ndGgpO1xuICAgICAgaWYgKG1vdmVEaXJlY3Rpb24gPT09ICduZXh0Jykge1xuICAgICAgICBzd2lwZXIuc2xpZGVOZXh0KCk7XG4gICAgICB9IGVsc2UgaWYgKG1vdmVEaXJlY3Rpb24gPT09ICdwcmV2aW91cycpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG9Mb29wKGluZGV4KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oaW5kZXgpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgLy8gUmVuZGVyIHx8IFVwZGF0ZSBQYWdpbmF0aW9uIGJ1bGxldHMvaXRlbXNcbiAgICBjb25zdCBydGwgPSBzd2lwZXIucnRsO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoaXNQYWdpbmF0aW9uRGlzYWJsZWQoKSkgcmV0dXJuO1xuICAgIGxldCBlbCA9IHN3aXBlci5wYWdpbmF0aW9uLmVsO1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIC8vIEN1cnJlbnQvVG90YWxcbiAgICBsZXQgY3VycmVudDtcbiAgICBsZXQgcHJldmlvdXNJbmRleDtcbiAgICBjb25zdCBzbGlkZXNMZW5ndGggPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgICBjb25zdCB0b3RhbCA9IHN3aXBlci5wYXJhbXMubG9vcCA/IE1hdGguY2VpbChzbGlkZXNMZW5ndGggLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKSA6IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgcHJldmlvdXNJbmRleCA9IHN3aXBlci5wcmV2aW91c1JlYWxJbmRleCB8fCAwO1xuICAgICAgY3VycmVudCA9IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXAgPiAxID8gTWF0aC5mbG9vcihzd2lwZXIucmVhbEluZGV4IC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCkgOiBzd2lwZXIucmVhbEluZGV4O1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHN3aXBlci5zbmFwSW5kZXggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjdXJyZW50ID0gc3dpcGVyLnNuYXBJbmRleDtcbiAgICAgIHByZXZpb3VzSW5kZXggPSBzd2lwZXIucHJldmlvdXNTbmFwSW5kZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByZXZpb3VzSW5kZXggPSBzd2lwZXIucHJldmlvdXNJbmRleCB8fCAwO1xuICAgICAgY3VycmVudCA9IHN3aXBlci5hY3RpdmVJbmRleCB8fCAwO1xuICAgIH1cbiAgICAvLyBUeXBlc1xuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBidWxsZXRzID0gc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cztcbiAgICAgIGxldCBmaXJzdEluZGV4O1xuICAgICAgbGV0IGxhc3RJbmRleDtcbiAgICAgIGxldCBtaWRJbmRleDtcbiAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgYnVsbGV0U2l6ZSA9IGVsZW1lbnRPdXRlclNpemUoYnVsbGV0c1swXSwgc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3dpZHRoJyA6ICdoZWlnaHQnLCB0cnVlKTtcbiAgICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICAgICAgc3ViRWwuc3R5bGVbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3dpZHRoJyA6ICdoZWlnaHQnXSA9IGAke2J1bGxldFNpemUgKiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyArIDQpfXB4YDtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzID4gMSAmJiBwcmV2aW91c0luZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBkeW5hbWljQnVsbGV0SW5kZXggKz0gY3VycmVudCAtIChwcmV2aW91c0luZGV4IHx8IDApO1xuICAgICAgICAgIGlmIChkeW5hbWljQnVsbGV0SW5kZXggPiBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzIC0gMSkge1xuICAgICAgICAgICAgZHluYW1pY0J1bGxldEluZGV4ID0gcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyAtIDE7XG4gICAgICAgICAgfSBlbHNlIGlmIChkeW5hbWljQnVsbGV0SW5kZXggPCAwKSB7XG4gICAgICAgICAgICBkeW5hbWljQnVsbGV0SW5kZXggPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmaXJzdEluZGV4ID0gTWF0aC5tYXgoY3VycmVudCAtIGR5bmFtaWNCdWxsZXRJbmRleCwgMCk7XG4gICAgICAgIGxhc3RJbmRleCA9IGZpcnN0SW5kZXggKyAoTWF0aC5taW4oYnVsbGV0cy5sZW5ndGgsIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMpIC0gMSk7XG4gICAgICAgIG1pZEluZGV4ID0gKGxhc3RJbmRleCArIGZpcnN0SW5kZXgpIC8gMjtcbiAgICAgIH1cbiAgICAgIGJ1bGxldHMuZm9yRWFjaChidWxsZXRFbCA9PiB7XG4gICAgICAgIGNvbnN0IGNsYXNzZXNUb1JlbW92ZSA9IFsuLi5bJycsICctbmV4dCcsICctbmV4dC1uZXh0JywgJy1wcmV2JywgJy1wcmV2LXByZXYnLCAnLW1haW4nXS5tYXAoc3VmZml4ID0+IGAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30ke3N1ZmZpeH1gKV0ubWFwKHMgPT4gdHlwZW9mIHMgPT09ICdzdHJpbmcnICYmIHMuaW5jbHVkZXMoJyAnKSA/IHMuc3BsaXQoJyAnKSA6IHMpLmZsYXQoKTtcbiAgICAgICAgYnVsbGV0RWwuY2xhc3NMaXN0LnJlbW92ZSguLi5jbGFzc2VzVG9SZW1vdmUpO1xuICAgICAgfSk7XG4gICAgICBpZiAoZWwubGVuZ3RoID4gMSkge1xuICAgICAgICBidWxsZXRzLmZvckVhY2goYnVsbGV0ID0+IHtcbiAgICAgICAgICBjb25zdCBidWxsZXRJbmRleCA9IGVsZW1lbnRJbmRleChidWxsZXQpO1xuICAgICAgICAgIGlmIChidWxsZXRJbmRleCA9PT0gY3VycmVudCkge1xuICAgICAgICAgICAgYnVsbGV0LmNsYXNzTGlzdC5hZGQoLi4ucGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzLnNwbGl0KCcgJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgICAgICAgYnVsbGV0LnNldEF0dHJpYnV0ZSgncGFydCcsICdidWxsZXQnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID49IGZpcnN0SW5kZXggJiYgYnVsbGV0SW5kZXggPD0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgIGJ1bGxldC5jbGFzc0xpc3QuYWRkKC4uLmAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tbWFpbmAuc3BsaXQoJyAnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPT09IGZpcnN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgc2V0U2lkZUJ1bGxldHMoYnVsbGV0LCAncHJldicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID09PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgc2V0U2lkZUJ1bGxldHMoYnVsbGV0LCAnbmV4dCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBidWxsZXQgPSBidWxsZXRzW2N1cnJlbnRdO1xuICAgICAgICBpZiAoYnVsbGV0KSB7XG4gICAgICAgICAgYnVsbGV0LmNsYXNzTGlzdC5hZGQoLi4ucGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzLnNwbGl0KCcgJykpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgICAgICAgYnVsbGV0cy5mb3JFYWNoKChidWxsZXRFbCwgYnVsbGV0SW5kZXgpID0+IHtcbiAgICAgICAgICAgIGJ1bGxldEVsLnNldEF0dHJpYnV0ZSgncGFydCcsIGJ1bGxldEluZGV4ID09PSBjdXJyZW50ID8gJ2J1bGxldC1hY3RpdmUnIDogJ2J1bGxldCcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgICBjb25zdCBmaXJzdERpc3BsYXllZEJ1bGxldCA9IGJ1bGxldHNbZmlyc3RJbmRleF07XG4gICAgICAgICAgY29uc3QgbGFzdERpc3BsYXllZEJ1bGxldCA9IGJ1bGxldHNbbGFzdEluZGV4XTtcbiAgICAgICAgICBmb3IgKGxldCBpID0gZmlyc3RJbmRleDsgaSA8PSBsYXN0SW5kZXg7IGkgKz0gMSkge1xuICAgICAgICAgICAgaWYgKGJ1bGxldHNbaV0pIHtcbiAgICAgICAgICAgICAgYnVsbGV0c1tpXS5jbGFzc0xpc3QuYWRkKC4uLmAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tbWFpbmAuc3BsaXQoJyAnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHNldFNpZGVCdWxsZXRzKGZpcnN0RGlzcGxheWVkQnVsbGV0LCAncHJldicpO1xuICAgICAgICAgIHNldFNpZGVCdWxsZXRzKGxhc3REaXNwbGF5ZWRCdWxsZXQsICduZXh0Jyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgY29uc3QgZHluYW1pY0J1bGxldHNMZW5ndGggPSBNYXRoLm1pbihidWxsZXRzLmxlbmd0aCwgcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyArIDQpO1xuICAgICAgICBjb25zdCBidWxsZXRzT2Zmc2V0ID0gKGJ1bGxldFNpemUgKiBkeW5hbWljQnVsbGV0c0xlbmd0aCAtIGJ1bGxldFNpemUpIC8gMiAtIG1pZEluZGV4ICogYnVsbGV0U2l6ZTtcbiAgICAgICAgY29uc3Qgb2Zmc2V0UHJvcCA9IHJ0bCA/ICdyaWdodCcgOiAnbGVmdCc7XG4gICAgICAgIGJ1bGxldHMuZm9yRWFjaChidWxsZXQgPT4ge1xuICAgICAgICAgIGJ1bGxldC5zdHlsZVtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBvZmZzZXRQcm9wIDogJ3RvcCddID0gYCR7YnVsbGV0c09mZnNldH1weGA7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBlbC5mb3JFYWNoKChzdWJFbCwgc3ViRWxJbmRleCkgPT4ge1xuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnZnJhY3Rpb24nKSB7XG4gICAgICAgIHN1YkVsLnF1ZXJ5U2VsZWN0b3JBbGwoY2xhc3Nlc1RvU2VsZWN0b3IocGFyYW1zLmN1cnJlbnRDbGFzcykpLmZvckVhY2goZnJhY3Rpb25FbCA9PiB7XG4gICAgICAgICAgZnJhY3Rpb25FbC50ZXh0Q29udGVudCA9IHBhcmFtcy5mb3JtYXRGcmFjdGlvbkN1cnJlbnQoY3VycmVudCArIDEpO1xuICAgICAgICB9KTtcbiAgICAgICAgc3ViRWwucXVlcnlTZWxlY3RvckFsbChjbGFzc2VzVG9TZWxlY3RvcihwYXJhbXMudG90YWxDbGFzcykpLmZvckVhY2godG90YWxFbCA9PiB7XG4gICAgICAgICAgdG90YWxFbC50ZXh0Q29udGVudCA9IHBhcmFtcy5mb3JtYXRGcmFjdGlvblRvdGFsKHRvdGFsKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicpIHtcbiAgICAgICAgbGV0IHByb2dyZXNzYmFyRGlyZWN0aW9uO1xuICAgICAgICBpZiAocGFyYW1zLnByb2dyZXNzYmFyT3Bwb3NpdGUpIHtcbiAgICAgICAgICBwcm9ncmVzc2JhckRpcmVjdGlvbiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvZ3Jlc3NiYXJEaXJlY3Rpb24gPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnaG9yaXpvbnRhbCcgOiAndmVydGljYWwnO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNjYWxlID0gKGN1cnJlbnQgKyAxKSAvIHRvdGFsO1xuICAgICAgICBsZXQgc2NhbGVYID0gMTtcbiAgICAgICAgbGV0IHNjYWxlWSA9IDE7XG4gICAgICAgIGlmIChwcm9ncmVzc2JhckRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgICAgc2NhbGVYID0gc2NhbGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2NhbGVZID0gc2NhbGU7XG4gICAgICAgIH1cbiAgICAgICAgc3ViRWwucXVlcnlTZWxlY3RvckFsbChjbGFzc2VzVG9TZWxlY3RvcihwYXJhbXMucHJvZ3Jlc3NiYXJGaWxsQ2xhc3MpKS5mb3JFYWNoKHByb2dyZXNzRWwgPT4ge1xuICAgICAgICAgIHByb2dyZXNzRWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZVgoJHtzY2FsZVh9KSBzY2FsZVkoJHtzY2FsZVl9KWA7XG4gICAgICAgICAgcHJvZ3Jlc3NFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtzd2lwZXIucGFyYW1zLnNwZWVkfW1zYDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdjdXN0b20nICYmIHBhcmFtcy5yZW5kZXJDdXN0b20pIHtcbiAgICAgICAgc3ViRWwuaW5uZXJIVE1MID0gcGFyYW1zLnJlbmRlckN1c3RvbShzd2lwZXIsIGN1cnJlbnQgKyAxLCB0b3RhbCk7XG4gICAgICAgIGlmIChzdWJFbEluZGV4ID09PSAwKSBlbWl0KCdwYWdpbmF0aW9uUmVuZGVyJywgc3ViRWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHN1YkVsSW5kZXggPT09IDApIGVtaXQoJ3BhZ2luYXRpb25SZW5kZXInLCBzdWJFbCk7XG4gICAgICAgIGVtaXQoJ3BhZ2luYXRpb25VcGRhdGUnLCBzdWJFbCk7XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5lbmFibGVkKSB7XG4gICAgICAgIHN1YkVsLmNsYXNzTGlzdFtzd2lwZXIuaXNMb2NrZWQgPyAnYWRkJyA6ICdyZW1vdmUnXShwYXJhbXMubG9ja0NsYXNzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgLy8gUmVuZGVyIENvbnRhaW5lclxuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoaXNQYWdpbmF0aW9uRGlzYWJsZWQoKSkgcmV0dXJuO1xuICAgIGNvbnN0IHNsaWRlc0xlbmd0aCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHN3aXBlci5ncmlkICYmIHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzID4gMSA/IHN3aXBlci5zbGlkZXMubGVuZ3RoIC8gTWF0aC5jZWlsKHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzKSA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICAgIGxldCBlbCA9IHN3aXBlci5wYWdpbmF0aW9uLmVsO1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGxldCBwYWdpbmF0aW9uSFRNTCA9ICcnO1xuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnKSB7XG4gICAgICBsZXQgbnVtYmVyT2ZCdWxsZXRzID0gc3dpcGVyLnBhcmFtcy5sb29wID8gTWF0aC5jZWlsKHNsaWRlc0xlbmd0aCAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApIDogc3dpcGVyLnNuYXBHcmlkLmxlbmd0aDtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmZyZWVNb2RlICYmIHN3aXBlci5wYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCAmJiBudW1iZXJPZkJ1bGxldHMgPiBzbGlkZXNMZW5ndGgpIHtcbiAgICAgICAgbnVtYmVyT2ZCdWxsZXRzID0gc2xpZGVzTGVuZ3RoO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1iZXJPZkJ1bGxldHM7IGkgKz0gMSkge1xuICAgICAgICBpZiAocGFyYW1zLnJlbmRlckJ1bGxldCkge1xuICAgICAgICAgIHBhZ2luYXRpb25IVE1MICs9IHBhcmFtcy5yZW5kZXJCdWxsZXQuY2FsbChzd2lwZXIsIGksIHBhcmFtcy5idWxsZXRDbGFzcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICAgICAgcGFnaW5hdGlvbkhUTUwgKz0gYDwke3BhcmFtcy5idWxsZXRFbGVtZW50fSAke3N3aXBlci5pc0VsZW1lbnQgPyAncGFydD1cImJ1bGxldFwiJyA6ICcnfSBjbGFzcz1cIiR7cGFyYW1zLmJ1bGxldENsYXNzfVwiPjwvJHtwYXJhbXMuYnVsbGV0RWxlbWVudH0+YDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdmcmFjdGlvbicpIHtcbiAgICAgIGlmIChwYXJhbXMucmVuZGVyRnJhY3Rpb24pIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBwYXJhbXMucmVuZGVyRnJhY3Rpb24uY2FsbChzd2lwZXIsIHBhcmFtcy5jdXJyZW50Q2xhc3MsIHBhcmFtcy50b3RhbENsYXNzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhZ2luYXRpb25IVE1MID0gYDxzcGFuIGNsYXNzPVwiJHtwYXJhbXMuY3VycmVudENsYXNzfVwiPjwvc3Bhbj5gICsgJyAvICcgKyBgPHNwYW4gY2xhc3M9XCIke3BhcmFtcy50b3RhbENsYXNzfVwiPjwvc3Bhbj5gO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicpIHtcbiAgICAgIGlmIChwYXJhbXMucmVuZGVyUHJvZ3Jlc3NiYXIpIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBwYXJhbXMucmVuZGVyUHJvZ3Jlc3NiYXIuY2FsbChzd2lwZXIsIHBhcmFtcy5wcm9ncmVzc2JhckZpbGxDbGFzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IGA8c3BhbiBjbGFzcz1cIiR7cGFyYW1zLnByb2dyZXNzYmFyRmlsbENsYXNzfVwiPjwvc3Bhbj5gO1xuICAgICAgfVxuICAgIH1cbiAgICBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzID0gW107XG4gICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICBpZiAocGFyYW1zLnR5cGUgIT09ICdjdXN0b20nKSB7XG4gICAgICAgIHN1YkVsLmlubmVySFRNTCA9IHBhZ2luYXRpb25IVE1MIHx8ICcnO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycpIHtcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5wdXNoKC4uLnN1YkVsLnF1ZXJ5U2VsZWN0b3JBbGwoY2xhc3Nlc1RvU2VsZWN0b3IocGFyYW1zLmJ1bGxldENsYXNzKSkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChwYXJhbXMudHlwZSAhPT0gJ2N1c3RvbScpIHtcbiAgICAgIGVtaXQoJ3BhZ2luYXRpb25SZW5kZXInLCBlbFswXSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uID0gY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZChzd2lwZXIsIHN3aXBlci5vcmlnaW5hbFBhcmFtcy5wYWdpbmF0aW9uLCBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24sIHtcbiAgICAgIGVsOiAnc3dpcGVyLXBhZ2luYXRpb24nXG4gICAgfSk7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGlmICghcGFyYW1zLmVsKSByZXR1cm47XG4gICAgbGV0IGVsO1xuICAgIGlmICh0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJyAmJiBzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgICBlbCA9IHN3aXBlci5lbC5xdWVyeVNlbGVjdG9yKHBhcmFtcy5lbCk7XG4gICAgfVxuICAgIGlmICghZWwgJiYgdHlwZW9mIHBhcmFtcy5lbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVsID0gWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocGFyYW1zLmVsKV07XG4gICAgfVxuICAgIGlmICghZWwpIHtcbiAgICAgIGVsID0gcGFyYW1zLmVsO1xuICAgIH1cbiAgICBpZiAoIWVsIHx8IGVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzICYmIHR5cGVvZiBwYXJhbXMuZWwgPT09ICdzdHJpbmcnICYmIEFycmF5LmlzQXJyYXkoZWwpICYmIGVsLmxlbmd0aCA+IDEpIHtcbiAgICAgIGVsID0gWy4uLnN3aXBlci5lbC5xdWVyeVNlbGVjdG9yQWxsKHBhcmFtcy5lbCldO1xuICAgICAgLy8gY2hlY2sgaWYgaXQgYmVsb25ncyB0byBhbm90aGVyIG5lc3RlZCBTd2lwZXJcbiAgICAgIGlmIChlbC5sZW5ndGggPiAxKSB7XG4gICAgICAgIGVsID0gZWwuZmluZChzdWJFbCA9PiB7XG4gICAgICAgICAgaWYgKGVsZW1lbnRQYXJlbnRzKHN1YkVsLCAnLnN3aXBlcicpWzBdICE9PSBzd2lwZXIuZWwpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGVsKSAmJiBlbC5sZW5ndGggPT09IDEpIGVsID0gZWxbMF07XG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIucGFnaW5hdGlvbiwge1xuICAgICAgZWxcbiAgICB9KTtcbiAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnICYmIHBhcmFtcy5jbGlja2FibGUpIHtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LmFkZCguLi4ocGFyYW1zLmNsaWNrYWJsZUNsYXNzIHx8ICcnKS5zcGxpdCgnICcpKTtcbiAgICAgIH1cbiAgICAgIHN1YkVsLmNsYXNzTGlzdC5hZGQocGFyYW1zLm1vZGlmaWVyQ2xhc3MgKyBwYXJhbXMudHlwZSk7XG4gICAgICBzdWJFbC5jbGFzc0xpc3QuYWRkKHN3aXBlci5pc0hvcml6b250YWwoKSA/IHBhcmFtcy5ob3Jpem9udGFsQ2xhc3MgOiBwYXJhbXMudmVydGljYWxDbGFzcyk7XG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJyAmJiBwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LmFkZChgJHtwYXJhbXMubW9kaWZpZXJDbGFzc30ke3BhcmFtcy50eXBlfS1keW5hbWljYCk7XG4gICAgICAgIGR5bmFtaWNCdWxsZXRJbmRleCA9IDA7XG4gICAgICAgIGlmIChwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzIDwgMSkge1xuICAgICAgICAgIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgPSAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicgJiYgcGFyYW1zLnByb2dyZXNzYmFyT3Bwb3NpdGUpIHtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LmFkZChwYXJhbXMucHJvZ3Jlc3NiYXJPcHBvc2l0ZUNsYXNzKTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMuY2xpY2thYmxlKSB7XG4gICAgICAgIHN1YkVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25CdWxsZXRDbGljayk7XG4gICAgICB9XG4gICAgICBpZiAoIXN3aXBlci5lbmFibGVkKSB7XG4gICAgICAgIHN1YkVsLmNsYXNzTGlzdC5hZGQocGFyYW1zLmxvY2tDbGFzcyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgaWYgKGlzUGFnaW5hdGlvbkRpc2FibGVkKCkpIHJldHVybjtcbiAgICBsZXQgZWwgPSBzd2lwZXIucGFnaW5hdGlvbi5lbDtcbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICAgIHN1YkVsLmNsYXNzTGlzdC5yZW1vdmUocGFyYW1zLmhpZGRlbkNsYXNzKTtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LnJlbW92ZShwYXJhbXMubW9kaWZpZXJDbGFzcyArIHBhcmFtcy50eXBlKTtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LnJlbW92ZShzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBwYXJhbXMuaG9yaXpvbnRhbENsYXNzIDogcGFyYW1zLnZlcnRpY2FsQ2xhc3MpO1xuICAgICAgICBpZiAocGFyYW1zLmNsaWNrYWJsZSkge1xuICAgICAgICAgIHN1YkVsLmNsYXNzTGlzdC5yZW1vdmUoLi4uKHBhcmFtcy5jbGlja2FibGVDbGFzcyB8fCAnJykuc3BsaXQoJyAnKSk7XG4gICAgICAgICAgc3ViRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkJ1bGxldENsaWNrKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzKSBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmZvckVhY2goc3ViRWwgPT4gc3ViRWwuY2xhc3NMaXN0LnJlbW92ZSguLi5wYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3Muc3BsaXQoJyAnKSkpO1xuICB9XG4gIG9uKCdjaGFuZ2VEaXJlY3Rpb24nLCAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIucGFnaW5hdGlvbiB8fCAhc3dpcGVyLnBhZ2luYXRpb24uZWwpIHJldHVybjtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgbGV0IHtcbiAgICAgIGVsXG4gICAgfSA9IHN3aXBlci5wYWdpbmF0aW9uO1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgc3ViRWwuY2xhc3NMaXN0LnJlbW92ZShwYXJhbXMuaG9yaXpvbnRhbENsYXNzLCBwYXJhbXMudmVydGljYWxDbGFzcyk7XG4gICAgICBzdWJFbC5jbGFzc0xpc3QuYWRkKHN3aXBlci5pc0hvcml6b250YWwoKSA/IHBhcmFtcy5ob3Jpem9udGFsQ2xhc3MgOiBwYXJhbXMudmVydGljYWxDbGFzcyk7XG4gICAgfSk7XG4gIH0pO1xuICBvbignaW5pdCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmVuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGRpc2FibGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5pdCgpO1xuICAgICAgcmVuZGVyKCk7XG4gICAgICB1cGRhdGUoKTtcbiAgICB9XG4gIH0pO1xuICBvbignYWN0aXZlSW5kZXhDaGFuZ2UnLCAoKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBzd2lwZXIuc25hcEluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdXBkYXRlKCk7XG4gICAgfVxuICB9KTtcbiAgb24oJ3NuYXBJbmRleENoYW5nZScsICgpID0+IHtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG4gIG9uKCdzbmFwR3JpZExlbmd0aENoYW5nZScsICgpID0+IHtcbiAgICByZW5kZXIoKTtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG4gIG9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgIGRlc3Ryb3koKTtcbiAgfSk7XG4gIG9uKCdlbmFibGUgZGlzYWJsZScsICgpID0+IHtcbiAgICBsZXQge1xuICAgICAgZWxcbiAgICB9ID0gc3dpcGVyLnBhZ2luYXRpb247XG4gICAgaWYgKGVsKSB7XG4gICAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICAgIGVsLmZvckVhY2goc3ViRWwgPT4gc3ViRWwuY2xhc3NMaXN0W3N3aXBlci5lbmFibGVkID8gJ3JlbW92ZScgOiAnYWRkJ10oc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmxvY2tDbGFzcykpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdsb2NrIHVubG9jaycsICgpID0+IHtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG4gIG9uKCdjbGljaycsIChfcywgZSkgPT4ge1xuICAgIGNvbnN0IHRhcmdldEVsID0gZS50YXJnZXQ7XG4gICAgY29uc3QgZWwgPSBtYWtlRWxlbWVudHNBcnJheShzd2lwZXIucGFnaW5hdGlvbi5lbCk7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5lbCAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uaGlkZU9uQ2xpY2sgJiYgZWwgJiYgZWwubGVuZ3RoID4gMCAmJiAhdGFyZ2V0RWwuY2xhc3NMaXN0LmNvbnRhaW5zKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcykpIHtcbiAgICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiAoc3dpcGVyLm5hdmlnYXRpb24ubmV4dEVsICYmIHRhcmdldEVsID09PSBzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwgfHwgc3dpcGVyLm5hdmlnYXRpb24ucHJldkVsICYmIHRhcmdldEVsID09PSBzd2lwZXIubmF2aWdhdGlvbi5wcmV2RWwpKSByZXR1cm47XG4gICAgICBjb25zdCBpc0hpZGRlbiA9IGVsWzBdLmNsYXNzTGlzdC5jb250YWlucyhzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgaWYgKGlzSGlkZGVuID09PSB0cnVlKSB7XG4gICAgICAgIGVtaXQoJ3BhZ2luYXRpb25TaG93Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbWl0KCdwYWdpbmF0aW9uSGlkZScpO1xuICAgICAgfVxuICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiBzdWJFbC5jbGFzc0xpc3QudG9nZ2xlKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5oaWRkZW5DbGFzcykpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGVuYWJsZSA9ICgpID0+IHtcbiAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LnJlbW92ZShzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24ucGFnaW5hdGlvbkRpc2FibGVkQ2xhc3MpO1xuICAgIGxldCB7XG4gICAgICBlbFxuICAgIH0gPSBzd2lwZXIucGFnaW5hdGlvbjtcbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiBzdWJFbC5jbGFzc0xpc3QucmVtb3ZlKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5wYWdpbmF0aW9uRGlzYWJsZWRDbGFzcykpO1xuICAgIH1cbiAgICBpbml0KCk7XG4gICAgcmVuZGVyKCk7XG4gICAgdXBkYXRlKCk7XG4gIH07XG4gIGNvbnN0IGRpc2FibGUgPSAoKSA9PiB7XG4gICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5hZGQoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLnBhZ2luYXRpb25EaXNhYmxlZENsYXNzKTtcbiAgICBsZXQge1xuICAgICAgZWxcbiAgICB9ID0gc3dpcGVyLnBhZ2luYXRpb247XG4gICAgaWYgKGVsKSB7XG4gICAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICAgIGVsLmZvckVhY2goc3ViRWwgPT4gc3ViRWwuY2xhc3NMaXN0LmFkZChzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24ucGFnaW5hdGlvbkRpc2FibGVkQ2xhc3MpKTtcbiAgICB9XG4gICAgZGVzdHJveSgpO1xuICB9O1xuICBPYmplY3QuYXNzaWduKHN3aXBlci5wYWdpbmF0aW9uLCB7XG4gICAgZW5hYmxlLFxuICAgIGRpc2FibGUsXG4gICAgcmVuZGVyLFxuICAgIHVwZGF0ZSxcbiAgICBpbml0LFxuICAgIGRlc3Ryb3lcbiAgfSk7XG59XG5cbmV4cG9ydCB7IFBhZ2luYXRpb24gYXMgZGVmYXVsdCB9O1xuIl0sIm5hbWVzIjpbImJ1cmdlciIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImJ1cmdlckxpbmUiLCJuYXYiLCJib2R5IiwibmF2SXRlbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJvYmoiLCJjb25zdHJ1Y3RvciIsIk9iamVjdCIsImV4dGVuZCIsInRhcmdldCIsInNyYyIsImtleXMiLCJmb3JFYWNoIiwia2V5IiwibGVuZ3RoIiwic3NyRG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImFjdGl2ZUVsZW1lbnQiLCJibHVyIiwibm9kZU5hbWUiLCJnZXRFbGVtZW50QnlJZCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiY3JlYXRlRWxlbWVudCIsImNoaWxkcmVuIiwiY2hpbGROb2RlcyIsInN0eWxlIiwic2V0QXR0cmlidXRlIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJjcmVhdGVFbGVtZW50TlMiLCJpbXBvcnROb2RlIiwibG9jYXRpb24iLCJoYXNoIiwiaG9zdCIsImhvc3RuYW1lIiwiaHJlZiIsIm9yaWdpbiIsInBhdGhuYW1lIiwicHJvdG9jb2wiLCJzZWFyY2giLCJkb2MiLCJzc3JXaW5kb3ciLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJoaXN0b3J5IiwicmVwbGFjZVN0YXRlIiwicHVzaFN0YXRlIiwiZ28iLCJiYWNrIiwiQ3VzdG9tRXZlbnQiLCJ0aGlzIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJJbWFnZSIsIkRhdGUiLCJzY3JlZW4iLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwibWF0Y2hNZWRpYSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbGxiYWNrIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJpZCIsIndpbiIsIndpbmRvdyIsImRlbGF5Iiwibm93IiwibyIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsInNsaWNlIiwidG8iLCJhcmd1bWVudHMiLCJ1bmRlZmluZWQiLCJub0V4dGVuZCIsImkiLCJuZXh0U291cmNlIiwibm9kZSIsIkhUTUxFbGVtZW50Iiwibm9kZVR5cGUiLCJrZXlzQXJyYXkiLCJmaWx0ZXIiLCJpbmRleE9mIiwibmV4dEluZGV4IiwibGVuIiwibmV4dEtleSIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiX19zd2lwZXJfXyIsImVsIiwidmFyTmFtZSIsInZhclZhbHVlIiwic2V0UHJvcGVydHkiLCJhbmltYXRlQ1NTTW9kZVNjcm9sbCIsIl9yZWYiLCJzd2lwZXIiLCJ0YXJnZXRQb3NpdGlvbiIsInNpZGUiLCJzdGFydFBvc2l0aW9uIiwidHJhbnNsYXRlIiwidGltZSIsInN0YXJ0VGltZSIsImR1cmF0aW9uIiwicGFyYW1zIiwic3BlZWQiLCJ3cmFwcGVyRWwiLCJzY3JvbGxTbmFwVHlwZSIsImNzc01vZGVGcmFtZUlEIiwiZGlyIiwiaXNPdXRPZkJvdW5kIiwiY3VycmVudCIsImFuaW1hdGUiLCJnZXRUaW1lIiwicHJvZ3Jlc3MiLCJNYXRoIiwibWF4IiwibWluIiwiZWFzZVByb2dyZXNzIiwiY29zIiwiUEkiLCJjdXJyZW50UG9zaXRpb24iLCJzY3JvbGxUbyIsIm92ZXJmbG93IiwiZWxlbWVudCIsInNlbGVjdG9yIiwiSFRNTFNsb3RFbGVtZW50IiwicHVzaCIsImFzc2lnbmVkRWxlbWVudHMiLCJtYXRjaGVzIiwic2hvd1dhcm5pbmciLCJ0ZXh0IiwiY29uc29sZSIsIndhcm4iLCJlcnIiLCJ0YWciLCJjbGFzc2VzIiwiY2xhc3NMaXN0IiwiYWRkIiwiQXJyYXkiLCJpc0FycmF5IiwidHJpbSIsInNwbGl0IiwiYyIsImVsZW1lbnRTdHlsZSIsInByb3AiLCJjaGlsZCIsInByZXZpb3VzU2libGluZyIsInBhcmVudHMiLCJwYXJlbnQiLCJwYXJlbnRFbGVtZW50IiwiZWxlbWVudE91dGVyU2l6ZSIsInNpemUiLCJpbmNsdWRlTWFyZ2lucyIsInBhcnNlRmxvYXQiLCJvZmZzZXRXaWR0aCIsImUiLCJzdXBwb3J0IiwiZGV2aWNlQ2FjaGVkIiwiYnJvd3NlciIsImdldFN1cHBvcnQiLCJzbW9vdGhTY3JvbGwiLCJkb2N1bWVudEVsZW1lbnQiLCJ0b3VjaCIsIkRvY3VtZW50VG91Y2giLCJjYWxjU3VwcG9ydCIsImdldERldmljZSIsIm92ZXJyaWRlcyIsIl90ZW1wIiwicGxhdGZvcm0iLCJ1YSIsImRldmljZSIsImlvcyIsImFuZHJvaWQiLCJzY3JlZW5XaWR0aCIsIndpZHRoIiwic2NyZWVuSGVpZ2h0IiwiaGVpZ2h0IiwibWF0Y2giLCJpcGFkIiwiaXBvZCIsImlwaG9uZSIsIndpbmRvd3MiLCJtYWNvcyIsIm9zIiwiY2FsY0RldmljZSIsImV2ZW50c0VtaXR0ZXIiLCJvbiIsImV2ZW50cyIsImhhbmRsZXIiLCJwcmlvcml0eSIsInNlbGYiLCJldmVudHNMaXN0ZW5lcnMiLCJkZXN0cm95ZWQiLCJtZXRob2QiLCJldmVudCIsIm9uY2UiLCJvbmNlSGFuZGxlciIsIm9mZiIsIl9fZW1pdHRlclByb3h5IiwiX2xlbiIsImFyZ3MiLCJfa2V5IiwiYXBwbHkiLCJvbkFueSIsImV2ZW50c0FueUxpc3RlbmVycyIsIm9mZkFueSIsImluZGV4Iiwic3BsaWNlIiwiZXZlbnRIYW5kbGVyIiwiZW1pdCIsImRhdGEiLCJjb250ZXh0IiwiX2xlbjIiLCJfa2V5MiIsInVuc2hpZnQiLCJ0b2dnbGVTbGlkZUNsYXNzZXMkMSIsInNsaWRlRWwiLCJjb25kaXRpb24iLCJjbGFzc05hbWUiLCJjb250YWlucyIsInJlbW92ZSIsInRvZ2dsZVNsaWRlQ2xhc3NlcyIsInByb2Nlc3NMYXp5UHJlbG9hZGVyIiwiaW1hZ2VFbCIsImNsb3Nlc3QiLCJpc0VsZW1lbnQiLCJzbGlkZUNsYXNzIiwibGF6eUVsIiwibGF6eVByZWxvYWRlckNsYXNzIiwic2hhZG93Um9vdCIsInVubGF6eSIsInNsaWRlcyIsInJlbW92ZUF0dHJpYnV0ZSIsInByZWxvYWQiLCJhbW91bnQiLCJsYXp5UHJlbG9hZFByZXZOZXh0Iiwic2xpZGVzUGVyVmlldyIsInNsaWRlc1BlclZpZXdEeW5hbWljIiwiY2VpbCIsImFjdGl2ZUluZGV4IiwiZ3JpZCIsInJvd3MiLCJhY3RpdmVDb2x1bW4iLCJwcmVsb2FkQ29sdW1ucyIsImZyb20iLCJtYXAiLCJfIiwiaW5jbHVkZXMiLCJjb2x1bW4iLCJzbGlkZUluZGV4TGFzdEluVmlldyIsInJld2luZCIsImxvb3AiLCJyZWFsSW5kZXgiLCJ1cGRhdGUiLCJ1cGRhdGVTaXplIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJpc0hvcml6b250YWwiLCJpc1ZlcnRpY2FsIiwicGFyc2VJbnQiLCJOdW1iZXIiLCJpc05hTiIsImFzc2lnbiIsInVwZGF0ZVNsaWRlcyIsImdldERpcmVjdGlvblByb3BlcnR5VmFsdWUiLCJsYWJlbCIsImdldERpcmVjdGlvbkxhYmVsIiwic2xpZGVzRWwiLCJzd2lwZXJTaXplIiwicnRsVHJhbnNsYXRlIiwicnRsIiwid3JvbmdSVEwiLCJpc1ZpcnR1YWwiLCJ2aXJ0dWFsIiwiZW5hYmxlZCIsInByZXZpb3VzU2xpZGVzTGVuZ3RoIiwic2xpZGVzTGVuZ3RoIiwic25hcEdyaWQiLCJzbGlkZXNHcmlkIiwic2xpZGVzU2l6ZXNHcmlkIiwib2Zmc2V0QmVmb3JlIiwic2xpZGVzT2Zmc2V0QmVmb3JlIiwib2Zmc2V0QWZ0ZXIiLCJzbGlkZXNPZmZzZXRBZnRlciIsInByZXZpb3VzU25hcEdyaWRMZW5ndGgiLCJwcmV2aW91c1NsaWRlc0dyaWRMZW5ndGgiLCJzcGFjZUJldHdlZW4iLCJzbGlkZVBvc2l0aW9uIiwicHJldlNsaWRlU2l6ZSIsInJlcGxhY2UiLCJ2aXJ0dWFsU2l6ZSIsIm1hcmdpbkxlZnQiLCJtYXJnaW5SaWdodCIsIm1hcmdpbkJvdHRvbSIsIm1hcmdpblRvcCIsImNlbnRlcmVkU2xpZGVzIiwiY3NzTW9kZSIsImdyaWRFbmFibGVkIiwic2xpZGVTaXplIiwiaW5pdFNsaWRlcyIsInVuc2V0U2xpZGVzIiwic2hvdWxkUmVzZXRTbGlkZVNpemUiLCJicmVha3BvaW50cyIsInNsaWRlIiwidXBkYXRlU2xpZGUiLCJzbGlkZVN0eWxlcyIsImN1cnJlbnRUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm0iLCJjdXJyZW50V2ViS2l0VHJhbnNmb3JtIiwid2Via2l0VHJhbnNmb3JtIiwicm91bmRMZW5ndGhzIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJib3hTaXppbmciLCJmbG9vciIsInN3aXBlclNsaWRlU2l6ZSIsImFicyIsInNsaWRlc1Blckdyb3VwIiwic2xpZGVzUGVyR3JvdXBTa2lwIiwiZWZmZWN0Iiwic2V0V3JhcHBlclNpemUiLCJ1cGRhdGVXcmFwcGVyU2l6ZSIsIm5ld1NsaWRlc0dyaWQiLCJzbGlkZXNHcmlkSXRlbSIsImdyb3VwcyIsInNsaWRlc0JlZm9yZSIsInNsaWRlc0FmdGVyIiwiZ3JvdXBTaXplIiwic2xpZGVJbmRleCIsImNlbnRlcmVkU2xpZGVzQm91bmRzIiwiYWxsU2xpZGVzU2l6ZSIsInNsaWRlU2l6ZVZhbHVlIiwibWF4U25hcCIsInNuYXAiLCJjZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXMiLCJvZmZzZXRTaXplIiwiYWxsU2xpZGVzT2Zmc2V0Iiwic25hcEluZGV4IiwiYWRkVG9TbmFwR3JpZCIsImFkZFRvU2xpZGVzR3JpZCIsInYiLCJ3YXRjaE92ZXJmbG93IiwiY2hlY2tPdmVyZmxvdyIsIndhdGNoU2xpZGVzUHJvZ3Jlc3MiLCJ1cGRhdGVTbGlkZXNPZmZzZXQiLCJiYWNrRmFjZUhpZGRlbkNsYXNzIiwiY29udGFpbmVyTW9kaWZpZXJDbGFzcyIsImhhc0NsYXNzQmFja2ZhY2VDbGFzc0FkZGVkIiwibWF4QmFja2ZhY2VIaWRkZW5TbGlkZXMiLCJ1cGRhdGVBdXRvSGVpZ2h0IiwiYWN0aXZlU2xpZGVzIiwibmV3SGVpZ2h0Iiwic2V0VHJhbnNpdGlvbiIsImdldFNsaWRlQnlJbmRleCIsImdldFNsaWRlSW5kZXhCeURhdGEiLCJ2aXNpYmxlU2xpZGVzIiwib2Zmc2V0SGVpZ2h0IiwibWludXNPZmZzZXQiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwic3dpcGVyU2xpZGVPZmZzZXQiLCJjc3NPdmVyZmxvd0FkanVzdG1lbnQiLCJ1cGRhdGVTbGlkZXNQcm9ncmVzcyIsIm9mZnNldENlbnRlciIsInZpc2libGVTbGlkZXNJbmRleGVzIiwic2xpZGVPZmZzZXQiLCJzbGlkZVByb2dyZXNzIiwibWluVHJhbnNsYXRlIiwib3JpZ2luYWxTbGlkZVByb2dyZXNzIiwic2xpZGVCZWZvcmUiLCJzbGlkZUFmdGVyIiwiaXNGdWxseVZpc2libGUiLCJpc1Zpc2libGUiLCJzbGlkZVZpc2libGVDbGFzcyIsInNsaWRlRnVsbHlWaXNpYmxlQ2xhc3MiLCJvcmlnaW5hbFByb2dyZXNzIiwidXBkYXRlUHJvZ3Jlc3MiLCJtdWx0aXBsaWVyIiwidHJhbnNsYXRlc0RpZmYiLCJtYXhUcmFuc2xhdGUiLCJpc0JlZ2lubmluZyIsImlzRW5kIiwicHJvZ3Jlc3NMb29wIiwid2FzQmVnaW5uaW5nIiwid2FzRW5kIiwiaXNCZWdpbm5pbmdSb3VuZGVkIiwiaXNFbmRSb3VuZGVkIiwiZmlyc3RTbGlkZUluZGV4IiwibGFzdFNsaWRlSW5kZXgiLCJmaXJzdFNsaWRlVHJhbnNsYXRlIiwibGFzdFNsaWRlVHJhbnNsYXRlIiwidHJhbnNsYXRlTWF4IiwidHJhbnNsYXRlQWJzIiwiYXV0b0hlaWdodCIsInVwZGF0ZVNsaWRlc0NsYXNzZXMiLCJnZXRGaWx0ZXJlZFNsaWRlIiwiYWN0aXZlU2xpZGUiLCJwcmV2U2xpZGUiLCJuZXh0U2xpZGUiLCJmaW5kIiwibmV4dEVscyIsIm5leHRFbGVtZW50U2libGluZyIsIm5leHQiLCJlbGVtZW50TmV4dEFsbCIsInByZXZFbHMiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwicHJldiIsImVsZW1lbnRQcmV2QWxsIiwic2xpZGVBY3RpdmVDbGFzcyIsInNsaWRlTmV4dENsYXNzIiwic2xpZGVQcmV2Q2xhc3MiLCJlbWl0U2xpZGVzQ2xhc3NlcyIsInVwZGF0ZUFjdGl2ZUluZGV4IiwibmV3QWN0aXZlSW5kZXgiLCJwcmV2aW91c0luZGV4IiwicHJldmlvdXNSZWFsSW5kZXgiLCJwcmV2aW91c1NuYXBJbmRleCIsImdldFZpcnR1YWxSZWFsSW5kZXgiLCJhSW5kZXgiLCJub3JtYWxpemVTbGlkZUluZGV4IiwiZ2V0QWN0aXZlSW5kZXhCeVRyYW5zbGF0ZSIsInNraXAiLCJmaXJzdFNsaWRlSW5Db2x1bW4iLCJhY3RpdmVTbGlkZUluZGV4IiwiZ2V0QXR0cmlidXRlIiwiaW5pdGlhbGl6ZWQiLCJydW5DYWxsYmFja3NPbkluaXQiLCJ1cGRhdGVDbGlja2VkU2xpZGUiLCJwYXRoIiwicGF0aEVsIiwic2xpZGVGb3VuZCIsImNsaWNrZWRTbGlkZSIsImNsaWNrZWRJbmRleCIsInNsaWRlVG9DbGlja2VkU2xpZGUiLCJ0cmFuc2l0aW9uRW1pdCIsInJ1bkNhbGxiYWNrcyIsImRpcmVjdGlvbiIsInN0ZXAiLCJzbGlkZVRvIiwiaW50ZXJuYWwiLCJpbml0aWFsIiwiYW5pbWF0aW5nIiwicHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uIiwibm9ybWFsaXplZFRyYW5zbGF0ZSIsIm5vcm1hbGl6ZWRHcmlkIiwibm9ybWFsaXplZEdyaWROZXh0IiwiYWxsb3dTbGlkZU5leHQiLCJhbGxvd1NsaWRlUHJldiIsInNldFRyYW5zbGF0ZSIsInRyYW5zaXRpb25TdGFydCIsInRyYW5zaXRpb25FbmQiLCJpc0giLCJ0IiwiX2ltbWVkaWF0ZVZpcnR1YWwiLCJfY3NzTW9kZVZpcnR1YWxJbml0aWFsU2V0IiwiaW5pdGlhbFNsaWRlIiwiYmVoYXZpb3IiLCJvblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCIsInNsaWRlVG9Mb29wIiwibmV3SW5kZXgiLCJ0YXJnZXRTbGlkZUluZGV4IiwiY29scyIsIm5lZWRMb29wRml4IiwibG9vcEZpeCIsInNsaWRlUmVhbEluZGV4Iiwic2xpZGVOZXh0IiwicGVyR3JvdXAiLCJzbGlkZXNQZXJHcm91cEF1dG8iLCJpbmNyZW1lbnQiLCJsb29wUHJldmVudHNTbGlkaW5nIiwiX2NsaWVudExlZnQiLCJjbGllbnRMZWZ0Iiwic2xpZGVQcmV2Iiwibm9ybWFsaXplIiwidmFsIiwibm9ybWFsaXplZFNuYXBHcmlkIiwicHJldlNuYXAiLCJwcmV2U25hcEluZGV4IiwicHJldkluZGV4IiwibGFzdEluZGV4Iiwic2xpZGVSZXNldCIsInNsaWRlVG9DbG9zZXN0IiwidGhyZXNob2xkIiwiY3VycmVudFNuYXAiLCJzbGlkZVRvSW5kZXgiLCJzbGlkZVNlbGVjdG9yIiwibG9vcGVkU2xpZGVzIiwiZ2V0U2xpZGVJbmRleCIsImxvb3BDcmVhdGUiLCJzaG91bGRGaWxsR3JvdXAiLCJzaG91bGRGaWxsR3JpZCIsImFkZEJsYW5rU2xpZGVzIiwiYW1vdW50T2ZTbGlkZXMiLCJzbGlkZUJsYW5rQ2xhc3MiLCJhcHBlbmQiLCJsb29wQWRkQmxhbmtTbGlkZXMiLCJyZWNhbGNTbGlkZXMiLCJieUNvbnRyb2xsZXIiLCJieU1vdXNld2hlZWwiLCJsb29wQWRkaXRpb25hbFNsaWRlcyIsImZpbGwiLCJwcmVwZW5kU2xpZGVzSW5kZXhlcyIsImFwcGVuZFNsaWRlc0luZGV4ZXMiLCJpc05leHQiLCJpc1ByZXYiLCJzbGlkZXNQcmVwZW5kZWQiLCJzbGlkZXNBcHBlbmRlZCIsImFjdGl2ZUNvbEluZGV4V2l0aFNoaWZ0IiwiY29sSW5kZXhUb1ByZXBlbmQiLCJfX3ByZXZlbnRPYnNlcnZlcl9fIiwic3dpcGVyTG9vcE1vdmVET00iLCJwcmVwZW5kIiwiY3VycmVudFNsaWRlVHJhbnNsYXRlIiwiZGlmZiIsInRvdWNoRXZlbnRzRGF0YSIsInN0YXJ0VHJhbnNsYXRlIiwiY3VycmVudFRyYW5zbGF0ZSIsInNoaWZ0IiwiY29udHJvbGxlciIsImNvbnRyb2wiLCJsb29wUGFyYW1zIiwibG9vcERlc3Ryb3kiLCJuZXdTbGlkZXNPcmRlciIsInN3aXBlclNsaWRlSW5kZXgiLCJwcmV2ZW50RWRnZVN3aXBlIiwic3RhcnRYIiwiZWRnZVN3aXBlRGV0ZWN0aW9uIiwiZWRnZVN3aXBlVGhyZXNob2xkIiwiaW5uZXJXaWR0aCIsInByZXZlbnREZWZhdWx0Iiwib25Ub3VjaFN0YXJ0Iiwib3JpZ2luYWxFdmVudCIsInR5cGUiLCJwb2ludGVySWQiLCJ0YXJnZXRUb3VjaGVzIiwidG91Y2hJZCIsImlkZW50aWZpZXIiLCJwYWdlWCIsInRvdWNoZXMiLCJzaW11bGF0ZVRvdWNoIiwicG9pbnRlclR5cGUiLCJ0YXJnZXRFbCIsInRvdWNoRXZlbnRzVGFyZ2V0IiwiaXNDaGlsZCIsInNsb3QiLCJlbGVtZW50c1F1ZXVlIiwiZWxlbWVudFRvQ2hlY2siLCJlbGVtZW50SXNDaGlsZE9mU2xvdCIsImVsZW1lbnRJc0NoaWxkT2YiLCJ3aGljaCIsImJ1dHRvbiIsImlzVG91Y2hlZCIsImlzTW92ZWQiLCJzd2lwaW5nQ2xhc3NIYXNWYWx1ZSIsIm5vU3dpcGluZ0NsYXNzIiwiZXZlbnRQYXRoIiwiY29tcG9zZWRQYXRoIiwibm9Td2lwaW5nU2VsZWN0b3IiLCJpc1RhcmdldFNoYWRvdyIsIm5vU3dpcGluZyIsImJhc2UiLCJfX2Nsb3Nlc3RGcm9tIiwiYXNzaWduZWRTbG90IiwiZm91bmQiLCJnZXRSb290Tm9kZSIsImNsb3Nlc3RFbGVtZW50IiwiYWxsb3dDbGljayIsInN3aXBlSGFuZGxlciIsImN1cnJlbnRYIiwiY3VycmVudFkiLCJwYWdlWSIsInN0YXJ0WSIsImFsbG93VG91Y2hDYWxsYmFja3MiLCJpc1Njcm9sbGluZyIsInN0YXJ0TW92aW5nIiwidG91Y2hTdGFydFRpbWUiLCJzd2lwZURpcmVjdGlvbiIsImFsbG93VGhyZXNob2xkTW92ZSIsImZvY3VzYWJsZUVsZW1lbnRzIiwic2hvdWxkUHJldmVudERlZmF1bHQiLCJhbGxvd1RvdWNoTW92ZSIsInRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdCIsInRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0IiwiaXNDb250ZW50RWRpdGFibGUiLCJmcmVlTW9kZSIsIm9uVG91Y2hNb3ZlIiwidGFyZ2V0VG91Y2giLCJjaGFuZ2VkVG91Y2hlcyIsInByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyIiwidG91Y2hSZWxlYXNlT25FZGdlcyIsInByZXZpb3VzWCIsInByZXZpb3VzWSIsImRpZmZYIiwiZGlmZlkiLCJzcXJ0IiwidG91Y2hBbmdsZSIsImF0YW4yIiwicHJldmVudFRvdWNoTW92ZUZyb21Qb2ludGVyTW92ZSIsImNhbmNlbGFibGUiLCJ0b3VjaE1vdmVTdG9wUHJvcGFnYXRpb24iLCJuZXN0ZWQiLCJzdG9wUHJvcGFnYXRpb24iLCJ0b3VjaGVzRGlmZiIsIm9uZVdheU1vdmVtZW50IiwidG91Y2hSYXRpbyIsInByZXZUb3VjaGVzRGlyZWN0aW9uIiwidG91Y2hlc0RpcmVjdGlvbiIsImlzTG9vcCIsImFsbG93TG9vcEZpeCIsImdldFRyYW5zbGF0ZSIsImV2dCIsImJ1YmJsZXMiLCJkZXRhaWwiLCJieVN3aXBlclRvdWNoTW92ZSIsImRpc3BhdGNoRXZlbnQiLCJhbGxvd01vbWVudHVtQm91bmNlIiwiZ3JhYkN1cnNvciIsInNldEdyYWJDdXJzb3IiLCJsb29wU3dhcFJlc2V0IiwiZGlzYWJsZVBhcmVudFN3aXBlciIsInJlc2lzdGFuY2VSYXRpbyIsInJlc2lzdGFuY2UiLCJmb2xsb3dGaW5nZXIiLCJvblRvdWNoRW5kIiwiaXNTYWZhcmkiLCJpc1dlYlZpZXciLCJ0b3VjaEVuZFRpbWUiLCJ0aW1lRGlmZiIsInBhdGhUcmVlIiwibGFzdENsaWNrVGltZSIsImN1cnJlbnRQb3MiLCJzd2lwZVRvTGFzdCIsInN0b3BJbmRleCIsInJld2luZEZpcnN0SW5kZXgiLCJyZXdpbmRMYXN0SW5kZXgiLCJyYXRpbyIsImxvbmdTd2lwZXNNcyIsImxvbmdTd2lwZXMiLCJsb25nU3dpcGVzUmF0aW8iLCJzaG9ydFN3aXBlcyIsIm5hdmlnYXRpb24iLCJuZXh0RWwiLCJwcmV2RWwiLCJvblJlc2l6ZSIsInNldEJyZWFrcG9pbnQiLCJpc1ZpcnR1YWxMb29wIiwiYXV0b3BsYXkiLCJydW5uaW5nIiwicGF1c2VkIiwicmVzaXplVGltZW91dCIsInJlc3VtZSIsIm9uQ2xpY2siLCJwcmV2ZW50Q2xpY2tzIiwicHJldmVudENsaWNrc1Byb3BhZ2F0aW9uIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwib25TY3JvbGwiLCJuZXdQcm9ncmVzcyIsInByZXZpb3VzVHJhbnNsYXRlIiwic2Nyb2xsTGVmdCIsInNjcm9sbFRvcCIsIm9uTG9hZCIsIm9uRG9jdW1lbnRUb3VjaFN0YXJ0IiwiZG9jdW1lbnRUb3VjaEhhbmRsZXJQcm9jZWVkZWQiLCJ0b3VjaEFjdGlvbiIsImNhcHR1cmUiLCJkb21NZXRob2QiLCJzd2lwZXJNZXRob2QiLCJwYXNzaXZlIiwidXBkYXRlT25XaW5kb3dSZXNpemUiLCJpc0dyaWRFbmFibGVkIiwiZGVmYXVsdHMiLCJpbml0Iiwic3dpcGVyRWxlbWVudE5vZGVOYW1lIiwicmVzaXplT2JzZXJ2ZXIiLCJjcmVhdGVFbGVtZW50cyIsImV2ZW50c1ByZWZpeCIsInVybCIsInZpcnR1YWxUcmFuc2xhdGUiLCJicmVha3BvaW50c0Jhc2UiLCJ1bmlxdWVOYXZFbGVtZW50cyIsInBhc3NpdmVMaXN0ZW5lcnMiLCJ3cmFwcGVyQ2xhc3MiLCJfZW1pdENsYXNzZXMiLCJtb2R1bGVFeHRlbmRQYXJhbXMiLCJhbGxNb2R1bGVzUGFyYW1zIiwibW9kdWxlUGFyYW1OYW1lIiwibW9kdWxlUGFyYW1zIiwiYXV0byIsInByb3RvdHlwZXMiLCJheGlzIiwibWF0cml4IiwiY3VyVHJhbnNmb3JtIiwidHJhbnNmb3JtTWF0cml4IiwiY3VyU3R5bGUiLCJjdXJyZW50U3R5bGUiLCJXZWJLaXRDU1NNYXRyaXgiLCJhIiwiam9pbiIsIk1velRyYW5zZm9ybSIsIk9UcmFuc2Zvcm0iLCJNc1RyYW5zZm9ybSIsIm1zVHJhbnNmb3JtIiwibTQxIiwibTQyIiwieCIsInkiLCJ0cmFuc2xhdGVUbyIsInRyYW5zbGF0ZUJvdW5kcyIsIm5ld1RyYW5zbGF0ZSIsIm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCIsInRyYW5zaXRpb24iLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uRGVsYXkiLCJtb3ZpbmciLCJpc0xvY2tlZCIsImN1cnNvciIsInVuc2V0R3JhYkN1cnNvciIsImF0dGFjaEV2ZW50cyIsImJpbmQiLCJkZXRhY2hFdmVudHMiLCJicmVha3BvaW50Q29udGFpbmVyIiwiYnJlYWtwb2ludCIsImdldEJyZWFrcG9pbnQiLCJjdXJyZW50QnJlYWtwb2ludCIsImJyZWFrcG9pbnRQYXJhbXMiLCJvcmlnaW5hbFBhcmFtcyIsIndhc011bHRpUm93IiwiaXNNdWx0aVJvdyIsIndhc0dyYWJDdXJzb3IiLCJpc0dyYWJDdXJzb3IiLCJ3YXNFbmFibGVkIiwiZW1pdENvbnRhaW5lckNsYXNzZXMiLCJ3YXNNb2R1bGVFbmFibGVkIiwiaXNNb2R1bGVFbmFibGVkIiwiZGlzYWJsZSIsImVuYWJsZSIsImRpcmVjdGlvbkNoYW5nZWQiLCJuZWVkc1JlTG9vcCIsIndhc0xvb3AiLCJjaGFuZ2VEaXJlY3Rpb24iLCJpc0VuYWJsZWQiLCJoYXNMb29wIiwiY29udGFpbmVyRWwiLCJjdXJyZW50SGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJwb2ludHMiLCJwb2ludCIsIm1pblJhdGlvIiwic3Vic3RyIiwidmFsdWUiLCJzb3J0IiwiYiIsIndhc0xvY2tlZCIsImxhc3RTbGlkZVJpZ2h0RWRnZSIsImFkZENsYXNzZXMiLCJjbGFzc05hbWVzIiwic3VmZml4ZXMiLCJlbnRyaWVzIiwicHJlZml4IiwicmVzdWx0Q2xhc3NlcyIsIml0ZW0iLCJwcmVwYXJlQ2xhc3NlcyIsInJlbW92ZUNsYXNzZXMiLCJleHRlbmRlZERlZmF1bHRzIiwiU3dpcGVyIiwic3dpcGVycyIsIm5ld1BhcmFtcyIsIm5lZWRQZXJzcGVjdGl2ZUZpeCIsInRvTG93ZXJDYXNlIiwiU3RyaW5nIiwibWFqb3IiLCJtaW5vciIsIm51bSIsInRlc3QiLCJpc1NhZmFyaUJyb3dzZXIiLCJuZWVkM2RGaXgiLCJjYWxjQnJvd3NlciIsIm1vZHVsZXMiLCJfX21vZHVsZXNfXyIsIm1vZCIsImV4dGVuZFBhcmFtcyIsInN3aXBlclBhcmFtcyIsInBhc3NlZFBhcmFtcyIsImV2ZW50TmFtZSIsInZlbG9jaXR5IiwidHJ1bmMiLCJjbGlja1RpbWVvdXQiLCJ2ZWxvY2l0aWVzIiwiaW1hZ2VzVG9Mb2FkIiwiaW1hZ2VzTG9hZGVkIiwicHJvcGVydHkiLCJzZXRQcm9ncmVzcyIsImNscyIsImdldFNsaWRlQ2xhc3NlcyIsInVwZGF0ZXMiLCJ2aWV3IiwiZXhhY3QiLCJzcHYiLCJicmVha0xvb3AiLCJ0cmFuc2xhdGVWYWx1ZSIsInRyYW5zbGF0ZWQiLCJjb21wbGV0ZSIsIm5ld0RpcmVjdGlvbiIsIm5lZWRVcGRhdGUiLCJjdXJyZW50RGlyZWN0aW9uIiwiY2hhbmdlTGFuZ3VhZ2VEaXJlY3Rpb24iLCJtb3VudCIsIm1vdW50ZWQiLCJwYXJlbnROb2RlIiwidG9VcHBlckNhc2UiLCJnZXRXcmFwcGVyU2VsZWN0b3IiLCJzbGlkZVNsb3RzIiwiaG9zdEVsIiwibGF6eUVsZW1lbnRzIiwiZGVzdHJveSIsImRlbGV0ZUluc3RhbmNlIiwiY2xlYW5TdHlsZXMiLCJvYmplY3QiLCJkZWxldGVQcm9wcyIsImV4dGVuZERlZmF1bHRzIiwibmV3RGVmYXVsdHMiLCJpbnN0YWxsTW9kdWxlIiwidXNlIiwibW9kdWxlIiwibSIsImNoZWNrUHJvcHMiLCJwcm90b3R5cGVHcm91cCIsInByb3RvTWV0aG9kIiwib2JzZXJ2ZXIiLCJhbmltYXRpb25GcmFtZSIsInJlc2l6ZUhhbmRsZXIiLCJvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIiLCJSZXNpemVPYnNlcnZlciIsIm5ld1dpZHRoIiwiX3JlZjIiLCJjb250ZW50Qm94U2l6ZSIsImNvbnRlbnRSZWN0IiwiaW5saW5lU2l6ZSIsImJsb2NrU2l6ZSIsIm9ic2VydmUiLCJ1bm9ic2VydmUiLCJvYnNlcnZlcnMiLCJhdHRhY2giLCJvcHRpb25zIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYmtpdE11dGF0aW9uT2JzZXJ2ZXIiLCJtdXRhdGlvbnMiLCJvYnNlcnZlclVwZGF0ZSIsImF0dHJpYnV0ZXMiLCJjaGlsZExpc3QiLCJjaGFyYWN0ZXJEYXRhIiwib2JzZXJ2ZVBhcmVudHMiLCJvYnNlcnZlU2xpZGVDaGlsZHJlbiIsImNvbnRhaW5lclBhcmVudHMiLCJkaXNjb25uZWN0IiwiZ2V0RWwiLCJyZXMiLCJ0b2dnbGVFbCIsImRpc2FibGVkIiwic3ViRWwiLCJkaXNhYmxlZENsYXNzIiwidGFnTmFtZSIsImxvY2tDbGFzcyIsIm9uUHJldkNsaWNrIiwib25OZXh0Q2xpY2siLCJpbml0QnV0dG9uIiwiZGVzdHJveUJ1dHRvbiIsImhpZGVPbkNsaWNrIiwiaGlkZGVuQ2xhc3MiLCJuYXZpZ2F0aW9uRGlzYWJsZWRDbGFzcyIsIl9zIiwidGFyZ2V0SXNCdXR0b24iLCJwYWdpbmF0aW9uIiwiY2xpY2thYmxlIiwiaXNIaWRkZW4iLCJ0b2dnbGUiLCJwZngiLCJidWxsZXRTaXplIiwiYnVsbGV0RWxlbWVudCIsInJlbmRlckJ1bGxldCIsInJlbmRlclByb2dyZXNzYmFyIiwicmVuZGVyRnJhY3Rpb24iLCJyZW5kZXJDdXN0b20iLCJwcm9ncmVzc2Jhck9wcG9zaXRlIiwiZHluYW1pY0J1bGxldHMiLCJkeW5hbWljTWFpbkJ1bGxldHMiLCJmb3JtYXRGcmFjdGlvbkN1cnJlbnQiLCJudW1iZXIiLCJmb3JtYXRGcmFjdGlvblRvdGFsIiwiYnVsbGV0Q2xhc3MiLCJidWxsZXRBY3RpdmVDbGFzcyIsIm1vZGlmaWVyQ2xhc3MiLCJjdXJyZW50Q2xhc3MiLCJ0b3RhbENsYXNzIiwicHJvZ3Jlc3NiYXJGaWxsQ2xhc3MiLCJwcm9ncmVzc2Jhck9wcG9zaXRlQ2xhc3MiLCJjbGlja2FibGVDbGFzcyIsImhvcml6b250YWxDbGFzcyIsInZlcnRpY2FsQ2xhc3MiLCJwYWdpbmF0aW9uRGlzYWJsZWRDbGFzcyIsImJ1bGxldHMiLCJkeW5hbWljQnVsbGV0SW5kZXgiLCJpc1BhZ2luYXRpb25EaXNhYmxlZCIsInNldFNpZGVCdWxsZXRzIiwiYnVsbGV0RWwiLCJwb3NpdGlvbiIsIm9uQnVsbGV0Q2xpY2siLCJtb3ZlRGlyZWN0aW9uIiwidG90YWwiLCJmaXJzdEluZGV4IiwibWlkSW5kZXgiLCJjbGFzc2VzVG9SZW1vdmUiLCJzdWZmaXgiLCJzIiwiZmxhdCIsImJ1bGxldCIsImJ1bGxldEluZGV4IiwiZmlyc3REaXNwbGF5ZWRCdWxsZXQiLCJsYXN0RGlzcGxheWVkQnVsbGV0IiwiZHluYW1pY0J1bGxldHNMZW5ndGgiLCJidWxsZXRzT2Zmc2V0Iiwib2Zmc2V0UHJvcCIsInN1YkVsSW5kZXgiLCJmcmFjdGlvbkVsIiwidGV4dENvbnRlbnQiLCJ0b3RhbEVsIiwicHJvZ3Jlc3NiYXJEaXJlY3Rpb24iLCJzY2FsZSIsInNjYWxlWCIsInNjYWxlWSIsInByb2dyZXNzRWwiLCJpbm5lckhUTUwiLCJyZW5kZXIiLCJwYWdpbmF0aW9uSFRNTCIsIm51bWJlck9mQnVsbGV0cyJdLCJzb3VyY2VSb290IjoiIn0=