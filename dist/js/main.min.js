/*! For license information please see main.min.js.LICENSE.txt */
!function(){"use strict";const n=document.querySelector(".burger"),t=document.querySelector(".burger__line"),e=document.querySelector("nav"),i=document.querySelector("body"),r=document.querySelectorAll("header nav li");function o(n,t){for(var e=0;e<t.length;e++){var i=t[e];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(n,i.key,i)}}var u="(prefers-reduced-motion: reduce)";function s(n){n.length=0}function c(n,t,e){return Array.prototype.slice.call(n,t,e)}function a(n){return n.bind.apply(n,[null].concat(c(arguments,1)))}var l=setTimeout,f=function(){};function d(n){return requestAnimationFrame(n)}function v(n,t){return typeof t===n}function p(n){return!b(n)&&v("object",n)}var g=Array.isArray,h=a(v,"function"),m=a(v,"string"),y=a(v,"undefined");function b(n){return null===n}function w(n){try{return n instanceof(n.ownerDocument.defaultView||window).HTMLElement}catch(n){return!1}}function E(n){return g(n)?n:[n]}function S(n,t){E(n).forEach(t)}function x(n,t){return n.indexOf(t)>-1}function L(n,t){return n.push.apply(n,E(t)),n}function C(n,t,e){n&&S(t,(function(t){t&&n.classList[e?"add":"remove"](t)}))}function P(n,t){C(n,m(t)?t.split(" "):t,!0)}function k(n,t){S(t,n.appendChild.bind(n))}function _(n,t){S(n,(function(n){var e=(t||n).parentNode;e&&e.insertBefore(n,t)}))}function A(n,t){return w(n)&&(n.msMatchesSelector||n.matches).call(n,t)}function D(n,t){var e=n?c(n.children):[];return t?e.filter((function(n){return A(n,t)})):e}function M(n,t){return t?D(n,t)[0]:n.firstElementChild}var z=Object.keys;function N(n,t,e){return n&&(e?z(n).reverse():z(n)).forEach((function(e){"__proto__"!==e&&t(n[e],e)})),n}function O(n){return c(arguments,1).forEach((function(t){N(t,(function(e,i){n[i]=t[i]}))})),n}function I(n){return c(arguments,1).forEach((function(t){N(t,(function(t,e){g(t)?n[e]=t.slice():p(t)?n[e]=I({},p(n[e])?n[e]:{},t):n[e]=t}))})),n}function T(n,t){S(t||z(n),(function(t){delete n[t]}))}function F(n,t){S(n,(function(n){S(t,(function(t){n&&n.removeAttribute(t)}))}))}function j(n,t,e){p(t)?N(t,(function(t,e){j(n,e,t)})):S(n,(function(n){b(e)||""===e?F(n,t):n.setAttribute(t,String(e))}))}function R(n,t,e){var i=document.createElement(n);return t&&(m(t)?P(i,t):j(i,t)),e&&k(e,i),i}function q(n,t,e){if(y(e))return getComputedStyle(n)[t];b(e)||(n.style[t]=""+e)}function W(n,t){q(n,"display",t)}function X(n){n.setActive&&n.setActive()||n.focus({preventScroll:!0})}function G(n,t){return n.getAttribute(t)}function B(n,t){return n&&n.classList.contains(t)}function H(n){return n.getBoundingClientRect()}function Y(n){S(n,(function(n){n&&n.parentNode&&n.parentNode.removeChild(n)}))}function U(n){return M((new DOMParser).parseFromString(n,"text/html").body)}function K(n,t){n.preventDefault(),t&&(n.stopPropagation(),n.stopImmediatePropagation())}function J(n,t){return n&&n.querySelector(t)}function V(n,t){return t?c(n.querySelectorAll(t)):[]}function Q(n,t){C(n,t,!1)}function Z(n){return n.timeStamp}function $(n){return m(n)?n:n?n+"px":""}var nn="splide",tn="data-"+nn;function en(n,t){if(!n)throw new Error("["+nn+"] "+(t||""))}var rn=Math.min,on=Math.max,un=Math.floor,sn=Math.ceil,cn=Math.abs;function an(n,t,e){return cn(n-t)<e}function ln(n,t,e,i){var r=rn(t,e),o=on(t,e);return i?r<n&&n<o:r<=n&&n<=o}function fn(n,t,e){var i=rn(t,e),r=on(t,e);return rn(on(i,n),r)}function dn(n){return+(n>0)-+(n<0)}function vn(n,t){return S(t,(function(t){n=n.replace("%s",""+t)})),n}function pn(n){return n<10?"0"+n:""+n}var gn={};function hn(){var n=[];function t(n,t,e){S(n,(function(n){n&&S(t,(function(t){t.split(" ").forEach((function(t){var i=t.split(".");e(n,i[0],i[1])}))}))}))}return{bind:function(e,i,r,o){t(e,i,(function(t,e,i){var u="addEventListener"in t,s=u?t.removeEventListener.bind(t,e,r,o):t.removeListener.bind(t,r);u?t.addEventListener(e,r,o):t.addListener(r),n.push([t,e,i,r,s])}))},unbind:function(e,i,r){t(e,i,(function(t,e,i){n=n.filter((function(n){return!!(n[0]!==t||n[1]!==e||n[2]!==i||r&&n[3]!==r)||(n[4](),!1)}))}))},dispatch:function(n,t,e){var i,r=!0;return"function"==typeof CustomEvent?i=new CustomEvent(t,{bubbles:r,detail:e}):(i=document.createEvent("CustomEvent")).initCustomEvent(t,r,!1,e),n.dispatchEvent(i),i},destroy:function(){n.forEach((function(n){n[4]()})),s(n)}}}var mn="mounted",yn="ready",bn="move",wn="moved",En="click",Sn="refresh",xn="updated",Ln="resize",Cn="resized",Pn="scroll",kn="scrolled",_n="destroy",An="navigation:mounted",Dn="autoplay:play",Mn="autoplay:pause",zn="lazyload:loaded",Nn="ei";function On(n){var t=n?n.event.bus:document.createDocumentFragment(),e=hn();return n&&n.event.on(_n,e.destroy),O(e,{bus:t,on:function(n,i){e.bind(t,E(n).join(" "),(function(n){i.apply(i,g(n.detail)?n.detail:[])}))},off:a(e.unbind,t),emit:function(n){e.dispatch(t,n,c(arguments,1))}})}function In(n,t,e,i){var r,o,u=Date.now,s=0,c=!0,a=0;function l(){if(!c){if(s=n?rn((u()-r)/n,1):1,e&&e(s),s>=1&&(t(),r=u(),i&&++a>=i))return f();o=d(l)}}function f(){c=!0}function v(){o&&cancelAnimationFrame(o),s=0,o=0,c=!0}return{start:function(t){t||v(),r=u()-(t?s*n:0),c=!1,o=d(l)},rewind:function(){r=u(),s=0,e&&e(s)},pause:f,cancel:v,set:function(t){n=t},isPaused:function(){return c}}}var Tn="Arrow",Fn=Tn+"Left",jn=Tn+"Right",Rn=Tn+"Up",qn=Tn+"Down",Wn="ttb",Xn={width:["height"],left:["top","right"],right:["bottom","left"],x:["y"],X:["Y"],Y:["X"],ArrowLeft:[Rn,jn],ArrowRight:[qn,Fn]};var Gn="role",Bn="tabindex",Hn="aria-",Yn=Hn+"controls",Un=Hn+"current",Kn=Hn+"selected",Jn=Hn+"label",Vn=Hn+"labelledby",Qn=Hn+"hidden",Zn=Hn+"orientation",$n=Hn+"roledescription",nt=Hn+"live",tt=Hn+"busy",et=Hn+"atomic",it=[Gn,Bn,"disabled",Yn,Un,Jn,Vn,Qn,Zn,$n],rt=nn+"__",ot="is-",ut=nn,st=rt+"track",ct=rt+"list",at=rt+"slide",lt=at+"--clone",ft=at+"__container",dt=rt+"arrows",vt=rt+"arrow",pt=vt+"--prev",gt=vt+"--next",ht=rt+"pagination",mt=ht+"__page",yt=rt+"progress__bar",bt=rt+"toggle",wt=rt+"sr",Et=ot+"initialized",St=ot+"active",xt=ot+"prev",Lt=ot+"next",Ct=ot+"visible",Pt=ot+"loading",kt=ot+"focus-in",_t=ot+"overflow",At=[St,Ct,xt,Lt,Pt,kt,_t],Dt={slide:at,clone:lt,arrows:dt,arrow:vt,prev:pt,next:gt,pagination:ht,page:mt,spinner:rt+"spinner"},Mt="touchstart mousedown",zt="touchmove mousemove",Nt="touchend touchcancel mouseup click",Ot="slide",It="loop",Tt="fade";var Ft=tn+"-interval",jt={passive:!1,capture:!0},Rt={Spacebar:" ",Right:jn,Left:Fn,Up:Rn,Down:qn};function qt(n){return n=m(n)?n:n.key,Rt[n]||n}var Wt="keydown",Xt=tn+"-lazy",Gt=Xt+"-srcset",Bt="["+Xt+"], ["+Gt+"]",Ht=[" ","Enter"],Yt=Object.freeze({__proto__:null,Media:function(n,t,e){var i=n.state,r=e.breakpoints||{},o=e.reducedMotion||{},s=hn(),c=[];function a(n){n&&s.destroy()}function l(n,t){var e=matchMedia(t);s.bind(e,"change",f),c.push([n,e])}function f(){var t=i.is(7),r=e.direction,o=c.reduce((function(n,t){return I(n,t[1].matches?t[0]:{})}),{});T(e),d(o),e.destroy?n.destroy("completely"===e.destroy):t?(a(!0),n.mount()):r!==e.direction&&n.refresh()}function d(t,r,o){I(e,t),r&&I(Object.getPrototypeOf(e),t),!o&&i.is(1)||n.emit(xn,e)}return{setup:function(){var n="min"===e.mediaQuery;z(r).sort((function(t,e){return n?+t-+e:+e-+t})).forEach((function(t){l(r[t],"("+(n?"min":"max")+"-width:"+t+"px)")})),l(o,u),f()},destroy:a,reduce:function(n){matchMedia(u).matches&&(n?I(e,o):T(e,z(o)))},set:d}},Direction:function(n,t,e){return{resolve:function(n,t,i){var r="rtl"!==(i=i||e.direction)||t?i===Wn?0:-1:1;return Xn[n]&&Xn[n][r]||n.replace(/width|left|right/i,(function(n,t){var e=Xn[n.toLowerCase()][r]||n;return t>0?e.charAt(0).toUpperCase()+e.slice(1):e}))},orient:function(n){return n*("rtl"===e.direction?1:-1)}}},Elements:function(n,t,e){var i,r,o,u=On(n),c=u.on,a=u.bind,l=n.root,f=e.i18n,d={},v=[],p=[],g=[];function m(){var n,t,o;i=w("."+st),r=M(i,"."+ct),en(i&&r,"A track/list element is missing."),L(v,D(r,"."+at+":not(."+lt+")")),N({arrows:dt,pagination:ht,prev:pt,next:gt,bar:yt,toggle:bt},(function(n,t){d[t]=w("."+n)})),O(d,{root:l,track:i,list:r,slides:v}),t=l.id||""+(n=nn)+pn(gn[n]=(gn[n]||0)+1),o=e.role,l.id=t,i.id=i.id||t+"-track",r.id=r.id||t+"-list",!G(l,Gn)&&"SECTION"!==l.tagName&&o&&j(l,Gn,o),j(l,$n,f.carousel),j(r,Gn,"presentation"),b()}function y(n){var t=it.concat("style");s(v),Q(l,p),Q(i,g),F([i,r],t),F(l,n?t:["style",$n])}function b(){Q(l,p),Q(i,g),p=E(ut),g=E(st),P(l,p),P(i,g),j(l,Jn,e.label),j(l,Vn,e.labelledby)}function w(n){var t=J(l,n);return t&&function(n,t){if(h(n.closest))return n.closest(t);for(var e=n;e&&1===e.nodeType&&!A(e,t);)e=e.parentElement;return e}(t,"."+ut)===l?t:void 0}function E(n){return[n+"--"+e.type,n+"--"+e.direction,e.drag&&n+"--draggable",e.isNavigation&&n+"--nav",n===ut&&St]}return O(d,{setup:m,mount:function(){c(Sn,y),c(Sn,m),c(xn,b),a(document,Mt+" keydown",(function(n){o="keydown"===n.type}),{capture:!0}),a(l,"focusin",(function(){C(l,kt,!!o)}))},destroy:y})},Slides:function(n,t,e){var i=On(n),r=i.on,o=i.emit,u=i.bind,c=t.Elements,l=c.slides,f=c.list,d=[];function v(){l.forEach((function(n,t){g(n,t,-1)}))}function p(){b((function(n){n.destroy()})),s(d)}function g(t,e,i){var r=function(n,t,e,i){var r,o=On(n),u=o.on,s=o.emit,c=o.bind,l=n.Components,f=n.root,d=n.options,v=d.isNavigation,p=d.updateOnMove,g=d.i18n,h=d.pagination,m=d.slideFocus,y=l.Direction.resolve,b=G(i,"style"),w=G(i,Jn),E=e>-1,S=M(i,"."+ft);function x(){var r=n.splides.map((function(n){var e=n.splide.Components.Slides.getAt(t);return e?e.slide.id:""})).join(" ");j(i,Jn,vn(g.slideX,(E?e:t)+1)),j(i,Yn,r),j(i,Gn,m?"button":""),m&&F(i,$n)}function L(){r||P()}function P(){if(!r){var e=n.index;(o=k())!==B(i,St)&&(C(i,St,o),j(i,Un,v&&o||""),s(o?"active":"inactive",_)),function(){var t=function(){if(n.is(Tt))return k();var t=H(l.Elements.track),e=H(i),r=y("left",!0),o=y("right",!0);return un(t[r])<=sn(e[r])&&un(e[o])<=sn(t[o])}(),e=!t&&(!k()||E);if(n.state.is([4,5])||j(i,Qn,e||""),j(V(i,d.focusableNodes||""),Bn,e?-1:""),m&&j(i,Bn,e?-1:0),t!==B(i,Ct)&&(C(i,Ct,t),s(t?"visible":"hidden",_)),!t&&document.activeElement===i){var r=l.Slides.getAt(n.index);r&&X(r.slide)}}(),C(i,xt,t===e-1),C(i,Lt,t===e+1)}var o}function k(){var i=n.index;return i===t||d.cloneStatus&&i===e}var _={index:t,slideIndex:e,slide:i,container:S,isClone:E,mount:function(){E||(i.id=f.id+"-slide"+pn(t+1),j(i,Gn,h?"tabpanel":"group"),j(i,$n,g.slide),j(i,Jn,w||vn(g.slideLabel,[t+1,n.length]))),c(i,"click",a(s,En,_)),c(i,"keydown",a(s,"sk",_)),u([wn,"sh",kn],P),u(An,x),p&&u(bn,L)},destroy:function(){r=!0,o.destroy(),Q(i,At),F(i,it),j(i,"style",b),j(i,Jn,w||"")},update:P,style:function(n,t,e){q(e&&S||i,n,t)},isWithin:function(e,i){var r=cn(e-t);return E||!d.rewind&&!n.is(It)||(r=rn(r,n.length-r)),r<=i}};return _}(n,e,i,t);r.mount(),d.push(r),d.sort((function(n,t){return n.index-t.index}))}function y(n){return n?L((function(n){return!n.isClone})):d}function b(n,t){y(t).forEach(n)}function L(n){return d.filter(h(n)?n:function(t){return m(n)?A(t.slide,n):x(E(n),t.index)})}return{mount:function(){v(),r(Sn,p),r(Sn,v)},destroy:p,update:function(){b((function(n){n.update()}))},register:g,get:y,getIn:function(n){var i=t.Controller,r=i.toIndex(n),o=i.hasFocus()?1:e.perPage;return L((function(n){return ln(n.index,r,r+o-1)}))},getAt:function(n){return L(n)[0]},add:function(n,t){S(n,(function(n){if(m(n)&&(n=U(n)),w(n)){var i=l[t];i?_(n,i):k(f,n),P(n,e.classes.slide),r=n,s=a(o,Ln),c=V(r,"img"),(d=c.length)?c.forEach((function(n){u(n,"load error",(function(){--d||s()}))})):s()}var r,s,c,d})),o(Sn)},remove:function(n){Y(L(n).map((function(n){return n.slide}))),o(Sn)},forEach:b,filter:L,style:function(n,t,e){b((function(i){i.style(n,t,e)}))},getLength:function(n){return n?l.length:d.length},isEnough:function(){return d.length>e.perPage}}},Layout:function(n,t,e){var i,r,o,u=On(n),s=u.on,c=u.bind,l=u.emit,f=t.Slides,d=t.Direction.resolve,v=t.Elements,g=v.root,h=v.track,m=v.list,y=f.getAt,b=f.style;function w(){i=e.direction===Wn,q(g,"maxWidth",$(e.width)),q(h,d("paddingLeft"),S(!1)),q(h,d("paddingRight"),S(!0)),E(!0)}function E(n){var t,u=H(g);(n||r.width!==u.width||r.height!==u.height)&&(q(h,"height",(t="",i&&(en(t=x(),"height or heightRatio is missing."),t="calc("+t+" - "+S(!1)+" - "+S(!0)+")"),t)),b(d("marginRight"),$(e.gap)),b("width",e.autoWidth?null:$(e.fixedWidth)||(i?"":L())),b("height",$(e.fixedHeight)||(i?e.autoHeight?null:L():x()),!0),r=u,l(Cn),o!==(o=M())&&(C(g,_t,o),l("overflow",o)))}function S(n){var t=e.padding,i=d(n?"right":"left");return t&&$(t[i]||(p(t)?0:t))||"0px"}function x(){return $(e.height||H(m).width*e.heightRatio)}function L(){var n=$(e.gap);return"calc((100%"+(n&&" + "+n)+")/"+(e.perPage||1)+(n&&" - "+n)+")"}function P(){return H(m)[d("width")]}function k(n,t){var e=y(n||0);return e?H(e.slide)[d("width")]+(t?0:D()):0}function _(n,t){var e=y(n);if(e){var i=H(e.slide)[d("right")],r=H(m)[d("left")];return cn(i-r)+(t?0:D())}return 0}function A(t){return _(n.length-1)-_(0)+k(0,t)}function D(){var n=y(0);return n&&parseFloat(q(n.slide,d("marginRight")))||0}function M(){return n.is(Tt)||A(!0)>P()}return{mount:function(){var n,t;w(),c(window,"resize load",(n=a(l,Ln),t=In(0,n,null,1),function(){t.isPaused()&&t.start()})),s([xn,Sn],w),s(Ln,E)},resize:E,listSize:P,slideSize:k,sliderSize:A,totalSize:_,getPadding:function(n){return parseFloat(q(h,d("padding"+(n?"Right":"Left"))))||0},isOverflow:M}},Clones:function(n,t,e){var i,r=On(n),o=r.on,u=t.Elements,c=t.Slides,a=t.Direction.resolve,l=[];function f(){o(Sn,d),o([xn,Ln],p),(i=g())&&(function(t){var i=c.get().slice(),r=i.length;if(r){for(;i.length<t;)L(i,i);L(i.slice(-t),i.slice(0,t)).forEach((function(o,s){var a=s<t,f=function(t,i){var r=t.cloneNode(!0);return P(r,e.classes.clone),r.id=n.root.id+"-clone"+pn(i+1),r}(o.slide,s);a?_(f,i[0].slide):k(u.list,f),L(l,f),c.register(f,s-t+(a?0:r),o.index)}))}}(i),t.Layout.resize(!0))}function d(){v(),f()}function v(){Y(l),s(l),r.destroy()}function p(){var n=g();i!==n&&(i<n||!n)&&r.emit(Sn)}function g(){var i=e.clones;if(n.is(It)){if(y(i)){var r=e[a("fixedWidth")]&&t.Layout.slideSize(0);i=r&&sn(H(u.track)[a("width")]/r)||e[a("autoWidth")]&&n.length||2*e.perPage}}else i=0;return i}return{mount:f,destroy:v}},Move:function(n,t,e){var i,r=On(n),o=r.on,u=r.emit,s=n.state.set,c=t.Layout,a=c.slideSize,l=c.getPadding,f=c.totalSize,d=c.listSize,v=c.sliderSize,p=t.Direction,g=p.resolve,h=p.orient,m=t.Elements,b=m.list,w=m.track;function E(){t.Controller.isBusy()||(t.Scroll.cancel(),S(n.index),t.Slides.update())}function S(n){x(k(n,!0))}function x(e,i){if(!n.is(Tt)){var r=i?e:function(e){if(n.is(It)){var i=P(e),r=i>t.Controller.getEnd();(i<0||r)&&(e=L(e,r))}return e}(e);q(b,"transform","translate"+g("X")+"("+r+"px)"),e!==r&&u("sh")}}function L(n,t){var e=n-A(t),i=v();return n-h(i*(sn(cn(e)/i)||1))*(t?1:-1)}function C(){x(_(),!0),i.cancel()}function P(n){for(var e=t.Slides.get(),i=0,r=1/0,o=0;o<e.length;o++){var u=e[o].index,s=cn(k(u,!0)-n);if(!(s<=r))break;r=s,i=u}return i}function k(t,i){var r=h(f(t-1)-function(n){var t=e.focus;return"center"===t?(d()-a(n,!0))/2:+t*a(n)||0}(t));return i?function(t){return e.trimSpace&&n.is(Ot)&&(t=fn(t,0,h(v(!0)-d()))),t}(r):r}function _(){var n=g("left");return H(b)[n]-H(w)[n]+h(l(!1))}function A(n){return k(n?t.Controller.getEnd():0,!!e.trimSpace)}return{mount:function(){i=t.Transition,o([mn,Cn,xn,Sn],E)},move:function(n,t,e,r){var o,c;n!==t&&(o=n>e,c=h(L(_(),o)),o?c>=0:c<=b[g("scrollWidth")]-H(w)[g("width")])&&(C(),x(L(_(),n>e),!0)),s(4),u(bn,t,e,n),i.start(t,(function(){s(3),u(wn,t,e,n),r&&r()}))},jump:S,translate:x,shift:L,cancel:C,toIndex:P,toPosition:k,getPosition:_,getLimit:A,exceededLimit:function(n,t){t=y(t)?_():t;var e=!0!==n&&h(t)<h(A(!1)),i=!1!==n&&h(t)>h(A(!0));return e||i},reposition:E}},Controller:function(n,t,e){var i,r,o,u,s=On(n),c=s.on,l=s.emit,f=t.Move,d=f.getPosition,v=f.getLimit,p=f.toPosition,g=t.Slides,h=g.isEnough,b=g.getLength,w=e.omitEnd,E=n.is(It),S=n.is(Ot),x=a(A,!1),L=a(A,!0),C=e.start||0,P=C;function k(){r=b(!0),o=e.perMove,u=e.perPage,i=z();var n=fn(C,0,w?i:r-1);n!==C&&(C=n,f.reposition())}function _(){i!==z()&&l(Nn)}function A(n,t){var e=o||(T()?1:u),r=D(C+e*(n?-1:1),C,!(o||T()));return-1===r&&S&&!an(d(),v(!n),1)?n?0:i:t?r:M(r)}function D(t,s,c){if(h()||T()){var a=function(t){if(S&&"move"===e.trimSpace&&t!==C)for(var i=d();i===p(t,!0)&&ln(t,0,n.length-1,!e.rewind);)t<C?--t:++t;return t}(t);a!==t&&(s=t,t=a,c=!1),t<0||t>i?t=o||!ln(0,t,s,!0)&&!ln(i,s,t,!0)?E?c?t<0?-(r%u||u):r:t:e.rewind?t<0?i:0:-1:N(O(t)):c&&t!==s&&(t=N(O(s)+(t<s?-1:1)))}else t=-1;return t}function M(n){return E?(n+r)%r||0:n}function z(){for(var n=r-(T()||E&&o?1:u);w&&n-- >0;)if(p(r-1,!0)!==p(n,!0)){n++;break}return fn(n,0,r-1)}function N(n){return fn(T()?n:u*n,0,i)}function O(n){return T()?rn(n,i):un((n>=i?r-1:n)/u)}function I(n){n!==C&&(P=C,C=n)}function T(){return!y(e.focus)||e.isNavigation}function F(){return n.state.is([4,5])&&!!e.waitForTransition}return{mount:function(){k(),c([xn,Sn,Nn],k),c(Cn,_)},go:function(n,t,e){if(!F()){var r=function(n){var t=C;if(m(n)){var e=n.match(/([+\-<>])(\d+)?/)||[],r=e[1],o=e[2];"+"===r||"-"===r?t=D(C+ +(""+r+(+o||1)),C):">"===r?t=o?N(+o):x(!0):"<"===r&&(t=L(!0))}else t=E?n:fn(n,0,i);return t}(n),o=M(r);o>-1&&(t||o!==C)&&(I(o),f.move(r,o,P,e))}},scroll:function(n,e,r,o){t.Scroll.scroll(n,e,r,(function(){var n=M(f.toIndex(d()));I(w?rn(n,i):n),o&&o()}))},getNext:x,getPrev:L,getAdjacent:A,getEnd:z,setIndex:I,getIndex:function(n){return n?P:C},toIndex:N,toPage:O,toDest:function(n){var t=f.toIndex(n);return S?fn(t,0,i):t},hasFocus:T,isBusy:F}},Arrows:function(n,t,e){var i,r,o=On(n),u=o.on,s=o.bind,c=o.emit,l=e.classes,f=e.i18n,d=t.Elements,v=t.Controller,p=d.arrows,g=d.track,h=p,m=d.prev,y=d.next,b={};function w(){var n;!(n=e.arrows)||m&&y||(h=p||R("div",l.arrows),m=L(!0),y=L(!1),i=!0,k(h,[m,y]),!p&&_(h,g)),m&&y&&(O(b,{prev:m,next:y}),W(h,n?"":"none"),P(h,r=dt+"--"+e.direction),n&&(u([mn,wn,Sn,kn,Nn],C),s(y,"click",a(x,">")),s(m,"click",a(x,"<")),C(),j([m,y],Yn,g.id),c("arrows:mounted",m,y))),u(xn,E)}function E(){S(),w()}function S(){o.destroy(),Q(h,r),i?(Y(p?[m,y]:h),m=y=null):F([m,y],it)}function x(n){v.go(n,!0)}function L(n){return U('<button class="'+l.arrow+" "+(n?l.prev:l.next)+'" type="button"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40 40" width="40" height="40" focusable="false"><path d="'+(e.arrowPath||"m15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z")+'" />')}function C(){if(m&&y){var t=n.index,e=v.getPrev(),i=v.getNext(),r=e>-1&&t<e?f.last:f.prev,o=i>-1&&t>i?f.first:f.next;m.disabled=e<0,y.disabled=i<0,j(m,Jn,r),j(y,Jn,o),c("arrows:updated",m,y,e,i)}}return{arrows:b,mount:w,destroy:S,update:C}},Autoplay:function(n,t,e){var i,r,o=On(n),u=o.on,s=o.bind,c=o.emit,a=In(e.interval,n.go.bind(n,">"),(function(n){var t=f.bar;t&&q(t,"width",100*n+"%"),c("autoplay:playing",n)})),l=a.isPaused,f=t.Elements,d=t.Elements,v=d.root,p=d.toggle,g=e.autoplay,h="pause"===g;function m(){l()&&t.Slides.isEnough()&&(a.start(!e.resetProgress),r=i=h=!1,w(),c(Dn))}function y(n){void 0===n&&(n=!0),h=!!n,w(),l()||(a.pause(),c(Mn))}function b(){h||(i||r?y(!1):m())}function w(){p&&(C(p,St,!h),j(p,Jn,e.i18n[h?"play":"pause"]))}function E(n){var i=t.Slides.getAt(n);a.set(i&&+G(i.slide,Ft)||e.interval)}return{mount:function(){g&&(e.pauseOnHover&&s(v,"mouseenter mouseleave",(function(n){i="mouseenter"===n.type,b()})),e.pauseOnFocus&&s(v,"focusin focusout",(function(n){r="focusin"===n.type,b()})),p&&s(p,"click",(function(){h?m():y(!0)})),u([bn,Pn,Sn],a.rewind),u(bn,E),p&&j(p,Yn,f.track.id),h||m(),w())},destroy:a.cancel,play:m,pause:y,isPaused:l}},Cover:function(n,t,e){var i=On(n).on;function r(n){t.Slides.forEach((function(t){var e=M(t.container||t.slide,"img");e&&e.src&&o(n,e,t)}))}function o(n,t,e){e.style("background",n?'center/cover no-repeat url("'+t.src+'")':"",!0),W(t,n?"none":"")}return{mount:function(){e.cover&&(i(zn,a(o,!0)),i([mn,xn,Sn],a(r,!0)))},destroy:a(r,!1)}},Scroll:function(n,t,e){var i,r,o=On(n),u=o.on,s=o.emit,c=n.state.set,l=t.Move,f=l.getPosition,d=l.getLimit,v=l.exceededLimit,p=l.translate,g=n.is(Ot),h=1;function m(n,e,o,u,d){var p=f();if(w(),o&&(!g||!v())){var m=t.Layout.sliderSize(),E=dn(n)*m*un(cn(n)/m)||0;n=l.toPosition(t.Controller.toDest(n%m))+E}var S=an(p,n,1);h=1,e=S?0:e||on(cn(n-p)/1.5,800),r=u,i=In(e,y,a(b,p,n,d),1),c(5),s(Pn),i.start()}function y(){c(3),r&&r(),s(kn)}function b(n,t,i,o){var u,s,c=f(),a=(n+(t-n)*(u=o,(s=e.easingFunc)?s(u):1-Math.pow(1-u,4))-c)*h;p(c+a),g&&!i&&v()&&(h*=.6,cn(a)<10&&m(d(v(!0)),600,!1,r,!0))}function w(){i&&i.cancel()}function E(){i&&!i.isPaused()&&(w(),y())}return{mount:function(){u(bn,w),u([xn,Sn],E)},destroy:w,scroll:m,cancel:E}},Drag:function(n,t,e){var i,r,o,u,s,c,a,l,d=On(n),v=d.on,g=d.emit,h=d.bind,m=d.unbind,y=n.state,b=t.Move,w=t.Scroll,E=t.Controller,S=t.Elements.track,x=t.Media.reduce,L=t.Direction,C=L.resolve,P=L.orient,k=b.getPosition,_=b.exceededLimit,D=!1;function M(){var n=e.drag;X(!n),u="free"===n}function z(n){if(c=!1,!a){var t=W(n);i=n.target,r=e.noDrag,A(i,"."+mt+", ."+vt)||r&&A(i,r)||!t&&n.button||(E.isBusy()?K(n,!0):(l=t?S:window,s=y.is([4,5]),o=null,h(l,zt,N,jt),h(l,Nt,O,jt),b.cancel(),w.cancel(),T(n)))}var i,r}function N(t){if(y.is(6)||(y.set(6),g("drag")),t.cancelable)if(s){b.translate(i+F(t)/(D&&n.is(Ot)?5:1));var r=j(t)>200,o=D!==(D=_());(r||o)&&T(t),c=!0,g("dragging"),K(t)}else(function(n){return cn(F(n))>cn(F(n,!0))})(t)&&(s=function(n){var t=e.dragMinThreshold,i=p(t),r=i&&t.mouse||0,o=(i?t.touch:+t)||10;return cn(F(n))>(W(n)?o:r)}(t),K(t))}function O(i){y.is(6)&&(y.set(3),g("dragged")),s&&(function(i){var r=function(t){if(n.is(It)||!D){var e=j(t);if(e&&e<200)return F(t)/e}return 0}(i),o=function(n){return k()+dn(n)*rn(cn(n)*(e.flickPower||600),u?1/0:t.Layout.listSize()*(e.flickMaxPages||1))}(r),s=e.rewind&&e.rewindByDrag;x(!1),u?E.scroll(o,0,e.snap):n.is(Tt)?E.go(P(dn(r))<0?s?"<":"-":s?">":"+"):n.is(Ot)&&D&&s?E.go(_(!0)?">":"<"):E.go(E.toDest(o),!0),x(!0)}(i),K(i)),m(l,zt,N),m(l,Nt,O),s=!1}function I(n){!a&&c&&K(n,!0)}function T(n){o=r,r=n,i=k()}function F(n,t){return q(n,t)-q(R(n),t)}function j(n){return Z(n)-Z(R(n))}function R(n){return r===n&&o||r}function q(n,t){return(W(n)?n.changedTouches[0]:n)["page"+C(t?"Y":"X")]}function W(n){return"undefined"!=typeof TouchEvent&&n instanceof TouchEvent}function X(n){a=n}return{mount:function(){h(S,zt,f,jt),h(S,Nt,f,jt),h(S,Mt,z,jt),h(S,"click",I,{capture:!0}),h(S,"dragstart",K),v([mn,xn],M)},disable:X,isDragging:function(){return s}}},Keyboard:function(n,t,e){var i,r,o=On(n),u=o.on,s=o.bind,c=o.unbind,a=n.root,f=t.Direction.resolve;function d(){var n=e.keyboard;n&&(i="global"===n?window:a,s(i,Wt,g))}function v(){c(i,Wt)}function p(){var n=r;r=!0,l((function(){r=n}))}function g(t){if(!r){var e=qt(t);e===f(Fn)?n.go("<"):e===f(jn)&&n.go(">")}}return{mount:function(){d(),u(xn,v),u(xn,d),u(bn,p)},destroy:v,disable:function(n){r=n}}},LazyLoad:function(n,t,e){var i=On(n),r=i.on,o=i.off,u=i.bind,c=i.emit,l="sequential"===e.lazyLoad,f=[wn,kn],d=[];function v(){s(d),t.Slides.forEach((function(n){V(n.slide,Bt).forEach((function(t){var i=G(t,Xt),r=G(t,Gt);if(i!==t.src||r!==t.srcset){var o=e.classes.spinner,u=t.parentElement,s=M(u,"."+o)||R("span",o,u);d.push([t,n,s]),t.src||W(t,"none")}}))})),l?m():(o(f),r(f,p),p())}function p(){(d=d.filter((function(t){var i=e.perPage*((e.preloadPages||1)+1)-1;return!t[1].isWithin(n.index,i)||g(t)}))).length||o(f)}function g(n){var t=n[0];P(n[1].slide,Pt),u(t,"load error",a(h,n)),j(t,"src",G(t,Xt)),j(t,"srcset",G(t,Gt)),F(t,Xt),F(t,Gt)}function h(n,t){var e=n[0],i=n[1];Q(i.slide,Pt),"error"!==t.type&&(Y(n[2]),W(e,""),c(zn,e,i),c(Ln)),l&&m()}function m(){d.length&&g(d.shift())}return{mount:function(){e.lazyLoad&&(v(),r(Sn,v))},destroy:a(s,d),check:p}},Pagination:function(n,t,e){var i,r,o=On(n),u=o.on,l=o.emit,f=o.bind,d=t.Slides,v=t.Elements,p=t.Controller,g=p.hasFocus,h=p.getIndex,m=p.go,y=t.Direction.resolve,b=v.pagination,w=[];function E(){i&&(Y(b?c(i.children):i),Q(i,r),s(w),i=null),o.destroy()}function S(n){m(">"+n,!0)}function x(n,t){var e=w.length,i=qt(t),r=L(),o=-1;i===y(jn,!1,r)?o=++n%e:i===y(Fn,!1,r)?o=(--n+e)%e:"Home"===i?o=0:"End"===i&&(o=e-1);var u=w[o];u&&(X(u.button),m(">"+o),K(t,!0))}function L(){return e.paginationDirection||e.direction}function C(n){return w[p.toPage(n)]}function k(){var n=C(h(!0)),t=C(h());if(n){var e=n.button;Q(e,St),F(e,Kn),j(e,Bn,-1)}if(t){var r=t.button;P(r,St),j(r,Kn,!0),j(r,Bn,"")}l("pagination:updated",{list:i,items:w},n,t)}return{items:w,mount:function t(){E(),u([xn,Sn,Nn],t);var o=e.pagination;b&&W(b,o?"":"none"),o&&(u([bn,Pn,kn],k),function(){var t=n.length,o=e.classes,u=e.i18n,s=e.perPage,c=g()?p.getEnd()+1:sn(t/s);P(i=b||R("ul",o.pagination,v.track.parentElement),r=ht+"--"+L()),j(i,Gn,"tablist"),j(i,Jn,u.select),j(i,Zn,L()===Wn?"vertical":"");for(var l=0;l<c;l++){var h=R("li",null,i),m=R("button",{class:o.page,type:"button"},h),y=d.getIn(l).map((function(n){return n.slide.id})),E=!g()&&s>1?u.pageX:u.slideX;f(m,"click",a(S,l)),e.paginationKeyboard&&f(m,"keydown",a(x,l)),j(h,Gn,"presentation"),j(m,Gn,"tab"),j(m,Yn,y.join(" ")),j(m,Jn,vn(E,l+1)),j(m,Bn,-1),w.push({li:h,button:m,page:l})}}(),k(),l("pagination:mounted",{list:i,items:w},C(n.index)))},destroy:E,getAt:C,update:k}},Sync:function(n,t,e){var i=e.isNavigation,r=e.slideFocus,o=[];function u(){var t,e;n.splides.forEach((function(t){t.isParent||(l(n,t.splide),l(t.splide,n))})),i&&((e=(t=On(n)).on)(En,d),e("sk",v),e([mn,xn],f),o.push(t),t.emit(An,n.splides))}function c(){o.forEach((function(n){n.destroy()})),s(o)}function l(n,t){var e=On(n);e.on(bn,(function(n,e,i){t.go(t.is(It)?i:n)})),o.push(e)}function f(){j(t.Elements.list,Zn,e.direction===Wn?"vertical":"")}function d(t){n.go(t.index)}function v(n,t){x(Ht,qt(t))&&(d(n),K(t))}return{setup:a(t.Media.set,{slideFocus:y(r)?i:r},!0),mount:u,destroy:c,remount:function(){c(),u()}}},Wheel:function(n,t,e){var i=On(n).bind,r=0;function o(i){if(i.cancelable){var o=i.deltaY,u=o<0,s=Z(i),c=e.wheelMinThreshold||0,a=e.wheelSleep||0;cn(o)>c&&s-r>a&&(n.go(u?"<":">"),r=s),function(i){return!e.releaseWheel||n.state.is(4)||-1!==t.Controller.getAdjacent(i)}(u)&&K(i)}}return{mount:function(){e.wheel&&i(t.Elements.track,"wheel",o,jt)}}},Live:function(n,t,e){var i=On(n).on,r=t.Elements.track,o=e.live&&!e.isNavigation,u=R("span",wt),s=In(90,a(c,!1));function c(n){j(r,tt,n),n?(k(r,u),s.start()):(Y(u),s.cancel())}function l(n){o&&j(r,nt,n?"off":"polite")}return{mount:function(){o&&(l(!t.Autoplay.isPaused()),j(r,et,!0),u.textContent="…",i(Dn,a(l,!0)),i(Mn,a(l,!1)),i([wn,kn],a(c,!0)))},disable:l,destroy:function(){F(r,[nt,et,tt]),Y(u)}}}}),Ut={type:"slide",role:"region",speed:400,perPage:1,cloneStatus:!0,arrows:!0,pagination:!0,paginationKeyboard:!0,interval:5e3,pauseOnHover:!0,pauseOnFocus:!0,resetProgress:!0,easing:"cubic-bezier(0.25, 1, 0.5, 1)",drag:!0,direction:"ltr",trimSpace:!0,focusableNodes:"a, button, textarea, input, select, iframe",live:!0,classes:Dt,i18n:{prev:"Previous slide",next:"Next slide",first:"Go to first slide",last:"Go to last slide",slideX:"Go to slide %s",pageX:"Go to page %s",play:"Start autoplay",pause:"Pause autoplay",carousel:"carousel",slide:"slide",select:"Select a slide to show",slideLabel:"%s of %s"},reducedMotion:{speed:0,rewindSpeed:0,autoplay:"pause"}};function Kt(n,t,e){var i=t.Slides;function r(){i.forEach((function(n){n.style("transform","translateX(-"+100*n.index+"%)")}))}return{mount:function(){On(n).on([mn,Sn],r)},start:function(n,t){i.style("transition","opacity "+e.speed+"ms "+e.easing),l(t)},cancel:f}}function Jt(n,t,e){var i,r=t.Move,o=t.Controller,u=t.Scroll,s=t.Elements.list,c=a(q,s,"transition");function l(){c(""),u.cancel()}return{mount:function(){On(n).bind(s,"transitionend",(function(n){n.target===s&&i&&(l(),i())}))},start:function(t,s){var a=r.toPosition(t,!0),l=r.getPosition(),f=function(t){var i=e.rewindSpeed;if(n.is(Ot)&&i){var r=o.getIndex(!0),u=o.getEnd();if(0===r&&t>=u||r>=u&&0===t)return i}return e.speed}(t);cn(a-l)>=1&&f>=1?e.useScroll?u.scroll(a,f,!1,s):(c("transform "+f+"ms "+e.easing),r.translate(a,!0),i=s):(r.jump(t),s())},cancel:l}}var Vt=function(){function n(t,e){var i;this.event=On(),this.Components={},this.state=(i=1,{set:function(n){i=n},is:function(n){return x(E(n),i)}}),this.splides=[],this._o={},this._E={};var r=m(t)?J(document,t):t;en(r,r+" is invalid."),this.root=r,e=I({label:G(r,Jn)||"",labelledby:G(r,Vn)||""},Ut,n.defaults,e||{});try{I(e,JSON.parse(G(r,tn)))}catch(n){en(!1,"Invalid JSON")}this._o=Object.create(I({},e))}var t,e,i=n.prototype;return i.mount=function(n,t){var e=this,i=this.state,r=this.Components;return en(i.is([1,7]),"Already mounted!"),i.set(1),this._C=r,this._T=t||this._T||(this.is(Tt)?Kt:Jt),this._E=n||this._E,N(O({},Yt,this._E,{Transition:this._T}),(function(n,t){var i=n(e,r,e._o);r[t]=i,i.setup&&i.setup()})),N(r,(function(n){n.mount&&n.mount()})),this.emit(mn),P(this.root,Et),i.set(3),this.emit(yn),this},i.sync=function(n){return this.splides.push({splide:n}),n.splides.push({splide:this,isParent:!0}),this.state.is(3)&&(this._C.Sync.remount(),n.Components.Sync.remount()),this},i.go=function(n){return this._C.Controller.go(n),this},i.on=function(n,t){return this.event.on(n,t),this},i.off=function(n){return this.event.off(n),this},i.emit=function(n){var t;return(t=this.event).emit.apply(t,[n].concat(c(arguments,1))),this},i.add=function(n,t){return this._C.Slides.add(n,t),this},i.remove=function(n){return this._C.Slides.remove(n),this},i.is=function(n){return this._o.type===n},i.refresh=function(){return this.emit(Sn),this},i.destroy=function(n){void 0===n&&(n=!0);var t=this.event,e=this.state;return e.is(1)?On(this).on(yn,this.destroy.bind(this,n)):(N(this._C,(function(t){t.destroy&&t.destroy(n)}),!0),t.emit(_n),t.destroy(),n&&s(this.splides),e.set(7)),this},t=n,(e=[{key:"options",get:function(){return this._o},set:function(n){this._C.Media.set(n,!0,!0)}},{key:"length",get:function(){return this._C.Slides.getLength(!0)}},{key:"index",get:function(){return this._C.Controller.getIndex()}}])&&o(t.prototype,e),Object.defineProperty(t,"prototype",{writable:!1}),n}(),Qt=Vt;Qt.defaults={},Qt.STATES={CREATED:1,MOUNTED:2,IDLE:3,MOVING:4,SCROLLING:5,DRAGGING:6,DESTROYED:7},n.addEventListener("click",(()=>{t.classList.toggle("line--hide"),n.classList.toggle("burger--transform"),e.classList.toggle("nav--hide"),i.classList.toggle("no-scroll")})),r.forEach((r=>{r.addEventListener("click",(()=>{t.classList.remove("line--hide"),n.classList.remove("burger--transform"),e.classList.remove("nav--hide"),i.classList.remove("no-scroll")}))})),new Qt(".splide",{type:"loop"}).mount();const Zt=document.querySelector(".splide__pagination__page").textContent;console.log(Zt)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,